  /**********************************************
  Postinstall file v1.4
  last update: 20.4.2012
  fsm added
  working component
  
  
***********************************************/  


#uses "fwDIP/fwDIP.ctl"
string dipAddress;


/////////main 
const string instType = "DIPFSM";// = DIP for complete installation  
main()
{

DebugN("Start installing Gas and Cooling Component...");

if(strpos(instType,"DIP")>-1){
configure();  
delete(); 
datatypecreation();
barreldp();
endcapdp();
infrastructure();
alarmset();
setfunction();
dbset();
fsmAdd();
setNewArchOnPressure();
fwInstallation_appendManager(TRUE, "Searching components", "PVSS00ctrl", "manual", 30, 2, 2, "CMS_RPCfwHardwareGas/CMS_RPCfwHardwareGas_StatusRefresh.ctl");
}

if(strpos(instType,"FSM")>-1){
fwFsmTree_stopTree();
fwFsmTree_generateAll();
fwFsmTree_refreshTree();

}
DebugN("configuration finished: All OK");
}

string RPCGasGetSysName(){
  dyn_string systemNumber;
  
  fwInstallation_getApplicationSystem("CMS_RPCfwHardwareGas",systemNumber);
  if(dynlen(systemNumber)==1)
    return systemNumber[1];
  else
  {
    return getSystemName();
    DebugN("Gas Component not found");
  }  
}
///////////configure and check if the configuration is ok
void setNewArchOnPressure()
{
    dyn_string dplists = dpNames(RPCGasGetSysName()+"*ressure", "RPCGasParameters");
  //DebugN(dpBarrelList);
  string archiveClassName = "RDB-99) EVENT";
  //"ValueArchive_0000";//Archive's name
  int archiveType = DPATTR_ARCH_PROC_SIMPLESM, count=1, value, l;
  int smoothProcedure = DPATTR_TIME_AND_VALUE_SMOOTH , pos; 
  float deadband = 2;
  float timeInterval = 7200; 
  bool isActive; 
  dyn_string exceptionInfo,channels;

  for(int i = 1; i <= dynlen(dplists); i++){
    if(strpos(dplists[i],"nvir")>-1)
    fwArchive_set(dplists[i]+".value", archiveClassName, archiveType, 
                  smoothProcedure, deadband, timeInterval, exceptionInfo);
  }
}

configure()
{
  dyn_string exinfo, configure = dpNames("*","_FwDipConfig");
  int len = dynlen(configure);
  //DebugN(configure, len);
  if(len != 1) cout.append("Error, check configuration");
  else {
    
    dipAddress = configure[1];
    fwDIP_setupSelfTest(dipAddress, exinfo);

    if(dynlen(exinfo)) {
      fwExceptionHandling_display(exceptioninfo); 
      return;
    }

    bool yes = fwInstallation_checkInstalledComponent("CMS_RPCfwHardwareGas");
        
    if(!yes) {
      DebugN("Driver Checked, All OK");
    }
  }
}

///////////delete all datatypes and datapoints

delete()
{
  dyn_string toBeDel,exInfo;
  dyn_string elements = dpNames("*", "RPCGasChannel");
  dyn_string deletetypes = dpTypes("RPCGasChannel");
  //dynAppend(toBeDel,elements);
  fwDIP_unsubscribeMany(elements,exInfo);
  
  dyn_string elements1 = dpNames("*", "RPCGasParameters");
  dyn_string deletetypes1 = dpTypes("RPCGasParameters");
  //dynAppend(toBeDel,elements1);
  fwDIP_unsubscribeMany(elements1,exInfo);
  
  dyn_string elements2 = dpNames("*", "RPCGasStatus");
  dyn_string deletetypes2 = dpTypes("RPCGasStatus");
  //dynAppend(toBeDel,elements2);
  fwDIP_unsubscribeMany(elements2,exInfo);
  
  dyn_string elements3 = dpNames("*", "RPCGasParameterStatus");
  dyn_string deletetypes3 = dpTypes("RPCGasParameterStatus");
  //dynAppend(toBeDel,elements3);
  fwDIP_unsubscribeMany(elements3,exInfo);
        
  for(int i = 1; i<=dynlen(elements); i++){
    dpDelete(elements[i]); 
    }
  
  for(int i = 1; i<=dynlen(elements1); i++){
    dpDelete(elements1[i]); 
    }
  
  for(int i = 1; i<=dynlen(elements2); i++){
    dpDelete(elements2[i]);
  }
  
  for(int i = 1; i<=dynlen(elements3); i++){
    dpDelete(elements3[i]);
  }
    
  dyn_string typescheck;
  typescheck = dpTypes(deletetypes);
  if(dynlen(typescheck) > 0)  dpTypeDelete(deletetypes);
  typescheck = dpTypes(deletetypes1);
  if(dynlen(typescheck) > 0)dpTypeDelete(deletetypes1);
  typescheck = dpTypes(deletetypes2);
  if(dynlen(typescheck) > 0)dpTypeDelete(deletetypes2);
  typescheck = dpTypes(deletetypes3);
  if(dynlen(typescheck) > 0)dpTypeDelete(deletetypes3);
  
  DebugN("All dps and dTypes deleted");
}

//////////creatiion of datatypes

datatypecreation()
{
  dyn_string searchtypes;
  searchtypes = dpTypes("RPCGasChannel");
  
  if(dynlen(searchtypes)<1){

  int var;
  dyn_dyn_string nametypes;
  dyn_dyn_int xtypes;
  
  nametypes[1]= makeDynString("RPCGasChannel", "");
  nametypes[2]= makeDynString("", "flowIn");
  nametypes[3]= makeDynString("", "flowOut");
  nametypes[4]= makeDynString("", "difference");
  
  xtypes[1]= makeDynInt(1);
  xtypes[2]= makeDynInt(0, DPEL_FLOAT);
  xtypes[3]= makeDynInt(0, DPEL_FLOAT);
  xtypes[4]= makeDynInt(0, DPEL_INT);
  
  var = dpTypeCreate(nametypes, xtypes);
  
  }
  
  dyn_string searchgasparameter;
  searchgasparameter = dpTypes("RPCGasParameters");
  
  if(dynlen(searchgasparameter)<1){

  int var1;
  dyn_dyn_string nametypes1;
  dyn_dyn_int xtypes1;
  
  nametypes1[1]= makeDynString("RPCGasParameters", "");
  nametypes1[2]= makeDynString("", "value");
    
  xtypes1[1]= makeDynInt(1);
  xtypes1[2]= makeDynInt(0, DPEL_FLOAT);
    
  var1 = dpTypeCreate(nametypes1, xtypes1);
  
  }
  
  dyn_string searchgasparameterstatus;
  searchgasparameterstatus = dpTypes("RPCGasParameterStatus");
  
  if(dynlen(searchgasparameterstatus)<1){

  int var1;
  dyn_dyn_string nametypes1;
  dyn_dyn_int xtypes1;
  
  nametypes1[1]= makeDynString("RPCGasParameterStatus", "");
  nametypes1[2]= makeDynString("", "state");
    
  xtypes1[1]= makeDynInt(1);
  xtypes1[2]= makeDynInt(0, DPEL_INT);
    
  var1 = dpTypeCreate(nametypes1, xtypes1);
  
  }  
  
  dyn_string searchgasstatus;
  searchgasstatus = dpTypes("RPCGasStatus");
  
  if(dynlen(searchgasstatus)<1){

  int var2;
  dyn_dyn_string nametypes2;
  dyn_dyn_int xtypes2;
  
  nametypes2[1]= makeDynString("RPCGasStatus", "");
  nametypes2[2]= makeDynString("", "status");
  nametypes2[3]= makeDynString("", "error");
  nametypes2[4]= makeDynString("", "warning");
  nametypes2[5]= makeDynString("", "unacknowledge");
    
  xtypes2[1]= makeDynInt(1);
  xtypes2[2]= makeDynInt(0, DPEL_INT);
  xtypes2[3]= makeDynInt(0, DPEL_INT);
  xtypes2[4]= makeDynInt(0, DPEL_INT);
  xtypes2[5]= makeDynInt(0, DPEL_INT);
    
  var2 = dpTypeCreate(nametypes2, xtypes2);
  
  DebugN("Data Types created");
  
  }
  
  else{ 
    DebugN("Data Types already exist");
  }
}

/////////////////////creation of barrel dps

barreldp()
{
   
  mapping mapRack74, mapRack69, mapRack76, mapRack71, mapRack78, mapRack73, mapRack75, mapRack70, mapRack77, mapRack72;
  
  // Wheel YB-2up Gas Channels
  mapRack74["RB1S02"] = 1;
  mapRack74["RB1S03"] = 2;	
  mapRack74["RB2S02"] = 3;	
  mapRack74["RB2S03"] = 4;	
  mapRack74["RB3S02"] = 5;	
  mapRack74["RB3S03"] = 6;	
  mapRack74["RB4S02"] = 7;	
  mapRack74["RB4S03"] = 8;	
  mapRack74["RB1S04"] = 9;	
  mapRack74["RB1S05"] = 10;	
  mapRack74["RB2S04"] = 11;
  mapRack74["RB2S05"] = 12;
  mapRack74["RB3S04"] = 13;	
  mapRack74["RB3S05"] = 14;	
  mapRack74["RB4S04R"] = 15;	
  mapRack74["RB4S05"] = 16;	
  mapRack74["RB4S04L"] = 17;	
  mapRack74["RB1S06"] = 18;	
  mapRack74["RB1S07"] = 19;	
  mapRack74["RB2S06"] = 20;	
  mapRack74["RB2S07"] = 21;	
  mapRack74["RB3S06"] = 22;	
  mapRack74["RB3S07"] = 23;
  mapRack74["RB4S06"] = 24;	
  mapRack74["RB4S07"] = 25;	
  
  // Wheel YB-2down Gas Channels

  mapRack69["RB1S08"] = 1;	
  mapRack69["RB1S09"] = 2;	
  mapRack69["RB2S08"] = 3;	
  mapRack69["RB2S09"] = 4;	
  mapRack69["RB3S08"] = 5;	
  mapRack69["RB3S09"] = 6;	
  mapRack69["RB4S08"] = 7;	
  mapRack69["RB4S09"] = 8;	
  mapRack69["RB1S10"] = 9;
  mapRack69["RB1S11"] = 10;	
  mapRack69["RB2S10"] = 11;	
  mapRack69["RB2S11"] = 12;	
  mapRack69["RB3S10"] = 13;	
  mapRack69["RB3S11"] = 14;	
  mapRack69["RB4S10R"] = 15;	
  mapRack69["RB4S10L"] = 16;	
  mapRack69["RB4S11"] = 17;	
  mapRack69["RB1S12"] = 18;	
  mapRack69["RB1S01"] = 19;	
  mapRack69["RB2S12"] = 20;
  mapRack69["RB2S01"] = 21;	
  mapRack69["RB3S12"] = 22;	
  mapRack69["RB3S01"] = 23;	
  mapRack69["RB4S12"] = 24;	
  mapRack69["RB4S01"] = 25;	

  // Wheel YB+2up Gas Channels
  
  mapRack78["RB1S02"] = 1;
  mapRack78["RB1S03"] = 2;	
  mapRack78["RB2S02"] = 3;	
  mapRack78["RB2S03"] = 4;	
  mapRack78["RB3S02"] = 5;	
  mapRack78["RB3S03"] = 6;	
  mapRack78["RB4S02"] = 7;	
  mapRack78["RB4S03"] = 8;	
  mapRack78["RB1S04"] = 9;	
  mapRack78["RB1S05"] = 10;	
  mapRack78["RB2S04"] = 11;
  mapRack78["RB2S05"] = 12;
  mapRack78["RB3S04"] = 13;	
  mapRack78["RB3S05"] = 14;	
  mapRack78["RB4S04L"] = 15;	
  mapRack78["RB4S05"] = 16;	
  mapRack78["RB4S04R"] = 17;
  mapRack78["RB1S06"] = 18;	
  mapRack78["RB1S07"] = 19;	
  mapRack78["RB2S06"] = 20;	
  mapRack78["RB2S07"] = 21;	
  mapRack78["RB3S06"] = 22;	
  mapRack78["RB3S07"] = 23;
  mapRack78["RB4S06"] = 24;	
  mapRack78["RB4S07"] = 25;	
  
  // Wheel YB+2down Gas Channels

  mapRack73["RB1S08"] = 1;	
  mapRack73["RB1S09"] = 2;	
  mapRack73["RB2S08"] = 3;	
  mapRack73["RB2S09"] = 4;	
  mapRack73["RB3S08"] = 5;	
  mapRack73["RB3S09"] = 6;	
  mapRack73["RB4S08"] = 7;	
  mapRack73["RB4S09"] = 8;	
  mapRack73["RB1S10"] = 9;
  mapRack73["RB1S11"] = 10;	
  mapRack73["RB2S10"] = 11;	
  mapRack73["RB2S11"] = 12;	
  mapRack73["RB3S10"] = 13;	
  mapRack73["RB3S11"] = 14;	
  mapRack73["RB4S10L"] = 15;	
  mapRack73["RB4S10R"] = 16;	
  mapRack73["RB4S11"] = 17;	
  mapRack73["RB1S12"] = 18;	
  mapRack73["RB1S01"] = 19;	
  mapRack73["RB2S12"] = 20;
  mapRack73["RB2S01"] = 21;	
  mapRack73["RB3S12"] = 22;	
  mapRack73["RB3S01"] = 23;	
  mapRack73["RB4S12"] = 24;	
  mapRack73["RB4S01"] = 25;
  
  // Wheel YB-1up Gas Channels
  
  mapRack75["RB1S01"] = 1;
  mapRack75["RB1S02"] = 2;	
  mapRack75["RB2S01"] = 3;	
  mapRack75["RB2S02"] = 4;	
  mapRack75["RB3S01"] = 5;	
  mapRack75["RB3S02"] = 6;	
  mapRack75["RB4S01"] = 7;	
  mapRack75["RB4S02"] = 8;	
  mapRack75["RB1S03"] = 9;	
  mapRack75["RB1S04"] = 10;	
  mapRack75["RB2S03"] = 11;
  mapRack75["RB2S04"] = 12;
  mapRack75["RB3S03"] = 13;	
  mapRack75["RB3S04"] = 14;	
  mapRack75["RB4S03"] = 15;	
  mapRack75["RB4S04L"] = 16;	
  mapRack75["RB4S04R"] = 17;	
  mapRack75["RB1S05"] = 18;	
  mapRack75["RB1S06"] = 19;	
  mapRack75["RB2S05"] = 20;	
  mapRack75["RB2S06"] = 21;	
  mapRack75["RB3S05"] = 22;	
  mapRack75["RB3S06"] = 23;
  mapRack75["RB4S05"] = 24;	
  mapRack75["RB4S06"] = 25;

 //Wheel YB-1down Gas Channels
	
  mapRack70["RB1S07"] = 1;	
  mapRack70["RB1S08"] = 2;	
  mapRack70["RB2S07"] = 3;	
  mapRack70["RB2S08"] = 4;	
  mapRack70["RB3S07"] = 5;	
  mapRack70["RB3S08"] = 6;	
  mapRack70["RB4S07"] = 7;	
  mapRack70["RB4S08"] = 8;	
  mapRack70["RB1S09"] = 9;
  mapRack70["RB1S10"] = 10;	
  mapRack70["RB2S09"] = 11;	
  mapRack70["RB2S10"] = 12;	
  mapRack70["RB3S09"] = 13;	
  mapRack70["RB3S10"] = 14;	
  mapRack70["RB4S09"] = 15;	
  mapRack70["RB4S10R"] = 16;	
  mapRack70["RB4S10L"] = 17;	
  mapRack70["RB1S11"] = 18;	
  mapRack70["RB1S12"] = 19;	
  mapRack70["RB2S11"] = 20;
  mapRack70["RB2S12"] = 21;	
  mapRack70["RB3S11"] = 22;	
  mapRack70["RB3S12"] = 23;	
  mapRack70["RB4S11"] = 24;	
  mapRack70["RB4S12"] = 25;
  
  // Wheel YB+1up Gas Channels
  
  mapRack77["RB1S01"] = 1;
  mapRack77["RB1S02"] = 2;	
  mapRack77["RB2S01"] = 3;	
  mapRack77["RB2S02"] = 4;	
  mapRack77["RB3S01"] = 5;	
  mapRack77["RB3S02"] = 6;	
  mapRack77["RB4S01"] = 7;	
  mapRack77["RB4S02"] = 8;	
  mapRack77["RB1S03"] = 9;	
  mapRack77["RB1S04"] = 10;	
  mapRack77["RB2S03"] = 11;
  mapRack77["RB2S04"] = 12;
  mapRack77["RB3S03"] = 13;	
  mapRack77["RB3S04"] = 14;	
  mapRack77["RB4S03"] = 15;	
  mapRack77["RB4S04R"] = 16;
  mapRack77["RB4S04L"] = 17;	
  mapRack77["RB1S05"] = 18;	
  mapRack77["RB1S06"] = 19;	
  mapRack77["RB2S05"] = 20;	
  mapRack77["RB2S06"] = 21;	
  mapRack77["RB3S05"] = 22;	
  mapRack77["RB3S06"] = 23;
  mapRack77["RB4S05"] = 24;	
  mapRack77["RB4S06"] = 25;
  
  //Wheel YB+1down Gas Channels
	
  mapRack72["RB1S07"] = 1;	
  mapRack72["RB1S08"] = 2;	
  mapRack72["RB2S07"] = 3;	
  mapRack72["RB2S08"] = 4;	
  mapRack72["RB3S07"] = 5;	
  mapRack72["RB3S08"] = 6;	
  mapRack72["RB4S07"] = 7;	
  mapRack72["RB4S08"] = 8;	
  mapRack72["RB1S09"] = 9;
  mapRack72["RB1S10"] = 10;	
  mapRack72["RB2S09"] = 11;	
  mapRack72["RB2S10"] = 12;	
  mapRack72["RB3S09"] = 13;	
  mapRack72["RB3S10"] = 14;	
  mapRack72["RB4S09"] = 15;	
  mapRack72["RB4S10L"] = 16;
  mapRack72["RB4S10R"] = 17;	
  mapRack72["RB1S11"] = 18;	
  mapRack72["RB1S12"] = 19;	
  mapRack72["RB2S11"] = 20;
  mapRack72["RB2S12"] = 21;	
  mapRack72["RB3S11"] = 22;	
  mapRack72["RB3S12"] = 23;	
  mapRack72["RB4S11"] = 24;	
  mapRack72["RB4S12"] = 25;	

  // Wheel YB0up Gas Channels
  
  mapRack76["RB1S02"] = 1;
  mapRack76["RB1S03"] = 2;	
  mapRack76["RB2S02"] = 3;	
  mapRack76["RB2S03"] = 4;	
  mapRack76["RB3S02"] = 5;	
  mapRack76["RB3S03"] = 6;	
  mapRack76["RB4S02"] = 7;	
  mapRack76["RB4S03"] = 8;	
  mapRack76["RB1S04"] = 9;	
  mapRack76["RB1S05"] = 10;	
  mapRack76["RB2S04"] = 11;
  mapRack76["RB2S05"] = 12;
  mapRack76["RB3S04"] = 13;	
  mapRack76["RB3S05"] = 14;	
  mapRack76["RB4S04L"] = 15;	
  mapRack76["RB4S04R"] = 16;	
  mapRack76["RB4S05"] = 17;	
  mapRack76["RB1S06"] = 18;	
  mapRack76["RB1S07"] = 19;	
  mapRack76["RB2S06"] = 20;	
  mapRack76["RB2S07"] = 21;	
  mapRack76["RB3S06"] = 22;	
  mapRack76["RB3S07"] = 23;
  mapRack76["RB4S06"] = 24;	
  mapRack76["RB4S07"] = 25;

  // Wheel YB0down Gas Channels
  
  mapRack71["RB1S08"] = 1;	
  mapRack71["RB1S09"] = 2;	
  mapRack71["RB2S08"] = 3;	
  mapRack71["RB2S09"] = 4;	
  mapRack71["RB3S08"] = 5;	
  mapRack71["RB3S09"] = 6;	
  mapRack71["RB4S08"] = 7;	
  mapRack71["RB4S09"] = 8;	
  mapRack71["RB1S10"] = 9;
  mapRack71["RB1S11"] = 10;	
  mapRack71["RB2S10"] = 11;	
  mapRack71["RB2S11"] = 12;	
  mapRack71["RB3S10"] = 13;	
  mapRack71["RB3S11"] = 14;	
  mapRack71["RB4S10L"] = 15;	
  mapRack71["RB4S10R"] = 16;	
  mapRack71["RB4S11"] = 17;	
  mapRack71["RB1S12"] = 18;	
  mapRack71["RB1S01"] = 19;	
  mapRack71["RB2S12"] = 20;
  mapRack71["RB2S01"] = 21;	
  mapRack71["RB3S12"] = 22;	
  mapRack71["RB3S01"] = 23;	
  mapRack71["RB4S12"] = 24;	
  mapRack71["RB4S01"] = 25;	
  
  string rackNr;
  mapping map;
  
  dyn_string wName = makeDynString("WP2up", "WP2down", "WP1up", "WP1down", 
                                   "W00up", "W00down", "WM1up", "WM1down", 
                                   "WM2up", "WM2down");
  dyn_string upPair = makeDynString("02", "03", "04", "05", "06", "07");
  dyn_string downPair = makeDynString("08", "09", "10", "11", "12", "01");
  dyn_string upOdd = makeDynString("01", "02", "03", "04", "05", "06");
  dyn_string downOdd = makeDynString("07", "08", "09", "10", "11", "12");
  dyn_string halfSect;
 
  for(int i=1; i<=dynlen(wName); i++){
  
    switch (wName[i]){
      
     case "WP2up":  rackNr = "78"; map = mapRack78; halfSect = upPair; break;
     case "WP2down":  rackNr = "73"; map = mapRack73; halfSect = downPair; break;
     case "WP1up":  rackNr = "77"; map = mapRack77; halfSect = upOdd; break;
     case "WP1down":  rackNr = "72"; map = mapRack72; halfSect = downOdd; break;
     case "W00up":  rackNr = "76"; map = mapRack76; halfSect = upPair; break;
     case "W00down":  rackNr = "71"; map = mapRack71; halfSect = downPair; break;
     case "WM1up":  rackNr = "75"; map = mapRack75; halfSect = upOdd;  break;
     case "WM1down":  rackNr = "70"; map = mapRack70; halfSect = downOdd;  break;
     case "WM2up":  rackNr = "74"; map = mapRack74; halfSect = upPair;  break;
     case "WM2down":  rackNr = "69"; map = mapRack69; halfSect = downPair;  break;
           
    }
    
  int channelNr;
  string chamber;
  for(int k = 1; k <= dynlen(halfSect); k++){
   
    string ssNr = halfSect[k];
    for(int j = 1; j < 5; j++){
      if((j==4) && (ssNr == "04" || ssNr == "10")){
             
        channelNr = map["RB"+j+"S"+ssNr+"L"]; 
        chamber = substr(wName[i],0,3)+"_S"+ssNr+"_RB"+j+"L";
        //Creation of channel barrel dp (RB4L)
        dpCreate(chamber, "RPCGasChannel");
        
        //Dip function to connect to data
        dipBarrelAddress(rackNr, channelNr, chamber);
        
        channelNr = map["RB"+j+"S"+ssNr+"R"];
        chamber = substr(wName[i],0,3)+"_S"+ssNr+"_RB"+j+"R";
        //Creation of channel barrel dps (RB4R)
        dpCreate(chamber, "RPCGasChannel");
        
        //Dip function to connect to data
        dipBarrelAddress(rackNr, channelNr, chamber);
      }
      
      else{
        
        channelNr = map["RB"+j+"S"+ssNr];
        chamber = substr(wName[i],0,3)+"_S"+ssNr+"_RB"+j;
        //Creation of channel barre dps
        dpCreate(chamber, "RPCGasChannel");
        
        //Dip function to connect to data
        dipBarrelAddress(rackNr, channelNr, chamber);
        }
      }
    }
  }
  
  DebugN("DPs created for the Barrel");
    
}


//function DIP connection

dipBarrelAddress(string rackNr, int channelNr, string chamber){
  
  dyn_string exInfo, childName, fieldName;
  dyn_int childType, fieldType;
  
  string item = "dip/CMS/GCS/CMSRPC/Distribution/Rack"+rackNr+"/Channel"+channelNr;
  string configDp = dipAddress;
  dyn_string dpes = makeDynString(getSystemName()+chamber+".flowIn", getSystemName()+chamber+".flowOut");
  dyn_string tags = makeDynString("InFlow(FE"+rackNr+"02Ch"+channelNr+")","OutFlow(FE"+rackNr+"06Ch"+channelNr+")");
 
  bool overwrite = FALSE;
  
  if(dynlen(exInfo)<1){ 
    fwDIP_unsubscribeMany(dpes,exInfo);  
  fwDIP_subscribeStructure(item, dpes, tags, configDp, exInfo, overwrite);
  //fwDIP_subscribe(dpes, configDp, item, tags, exInfo, overwrite);
}
}

/////////////////////Creationd of endcap dp

endcapdp()
{
  mapping mapRackin63, mapRackout63, mapRackin67, mapRackout67, mapRackin62, mapRackin66, 
  mapRackout62, mapRackout66, mapRackin65, mapRackout65, mapRackin80, mapRackout80, mapRackin81,
  mapRackout81, mapRackin83, mapRackout83, mapRackin84, mapRackout84, mapRackin85, mapRackout85;
  
  //mapping input RE-3
  
  mapRackin63["EM3_R02_R03_C22_C24_UP"] = 1;
  mapRackin63["EM3_R02_R03_C22_C24_DW"] = 2;
  mapRackin63["EM3_R02_R03_C25_C27_DW"] = 3;
  mapRackin63["EM3_R02_R03_C25_C27_UP"] = 4;
  mapRackin63["EM3_R02_R03_C28_C30_UP"] = 5;
  mapRackin63["EM3_R02_R03_C28_C30_DW"] = 6;
  mapRackin63["EM3_R02_R03_C31_C33_UP"] = 7;
  mapRackin63["EM3_R02_R03_C31_C33_DW"] = 8;
  mapRackin63["EM3_R02_R03_C34_C36_DW"] = 9;
  mapRackin63["EM3_R02_R03_C34_C36_UP"] = 10;
  mapRackin63["EM3_R02_R03_C01_C03_DW"] = 11;
  mapRackin63["EM3_R02_R03_C01_C03_UP"] = 12;
  
  mapRackin67["EM3_R02_R03_C04_C06_DW"] = 1;
  mapRackin67["EM3_R02_R03_C04_C06_UP"] = 2;
  mapRackin67["EM3_R02_R03_C07_C09_UP"] = 3;
  mapRackin67["EM3_R02_R03_C07_C09_DW"] = 4;
  mapRackin67["EM3_R02_R03_C10_C12_UP"] = 5;
  mapRackin67["EM3_R02_R03_C10_C12_DW"] = 6;
  mapRackin67["EM3_R02_R03_C13_C15_UP"] = 7;
  mapRackin67["EM3_R02_R03_C13_C15_DW"] = 8;
  mapRackin67["EM3_R02_R03_C16_C18_UP"] = 9;
  mapRackin67["EM3_R02_R03_C16_C18_DW"] = 10;
  mapRackin67["EM3_R02_R03_C19_C21_UP"] = 11;
  mapRackin67["EM3_R02_R03_C19_C21_DW"] = 12;
  
  //mapping output RE-3  
  
  mapRackout63["EM3_R02_R03_C22_C24_UP"] = 1;
  mapRackout63["EM3_R02_R03_C22_C24_DW"] = 2;
  mapRackout63["EM3_R02_R03_C25_C27_DW"] = 3;
  mapRackout63["EM3_R02_R03_C25_C27_UP"] = 4;
  mapRackout63["EM3_R02_R03_C28_C30_UP"] = 5;
  mapRackout63["EM3_R02_R03_C28_C30_DW"] = 6;
  mapRackout63["EM3_R02_R03_C31_C33_UP"] = 7;
  mapRackout63["EM3_R02_R03_C31_C33_DW"] = 8;
  mapRackout63["EM3_R02_R03_C34_C36_DW"] = 9;
  mapRackout63["EM3_R02_R03_C34_C36_UP"] = 10;
  mapRackout63["EM3_R02_R03_C01_C03_DW"] = 11;
  mapRackout63["EM3_R02_R03_C01_C03_UP"] = 12;
  
  mapRackout67["EM3_R02_R03_C04_C06_DW"] = 1;
  mapRackout67["EM3_R02_R03_C04_C06_UP"] = 2;
  mapRackout67["EM3_R02_R03_C07_C09_UP"] = 3;
  mapRackout67["EM3_R02_R03_C07_C09_DW"] = 4;
  mapRackout67["EM3_R02_R03_C10_C12_UP"] = 5;
  mapRackout67["EM3_R02_R03_C10_C12_DW"] = 6;
  mapRackout67["EM3_R02_R03_C13_C15_UP"] = 7;
  mapRackout67["EM3_R02_R03_C13_C15_DW"] = 8;
  mapRackout67["EM3_R02_R03_C16_C18_UP"] = 9;
  mapRackout67["EM3_R02_R03_C16_C18_DW"] = 10;
  mapRackout67["EM3_R02_R03_C19_C21_UP"] = 11;
  mapRackout67["EM3_R02_R03_C19_C21_DW"] = 12;
  
  //mapping input RE-2
  
  mapRackin62["EM2_R02_R03_C21_C23_DW"] = 1;
  mapRackin62["EM2_R02_R03_C21_C23_UP"] = 2;
  mapRackin62["EM2_R02_R03_C24_C26_DW"] = 3;
  mapRackin62["EM2_R02_R03_C24_C26_UP"] = 4;
  mapRackin62["EM2_R02_R03_C27_C29_DW"] = 5;
  mapRackin62["EM2_R02_R03_C27_C29_UP"] = 6;
  mapRackin62["EM2_R02_R03_C30_C32_DW"] = 7;
  mapRackin62["EM2_R02_R03_C30_C32_UP"] = 8;
  mapRackin62["EM2_R02_R03_C33_C35_DW"] = 9;
  mapRackin62["EM2_R02_R03_C33_C35_UP"] = 10;
  mapRackin62["EM2_R02_R03_C36_C02_DW"] = 11;
  mapRackin62["EM2_R02_R03_C36_C02_UP"] = 12;
  
  mapRackin66["EM2_R02_R03_C03_C05_DW"] = 1;
  mapRackin66["EM2_R02_R03_C03_C05_UP"] = 2;
  mapRackin66["EM2_R02_R03_C06_C08_DW"] = 3;
  mapRackin66["EM2_R02_R03_C06_C08_UP"] = 4;
  mapRackin66["EM2_R02_R03_C09_C11_DW"] = 5;
  mapRackin66["EM2_R02_R03_C09_C11_UP"] = 6;
  mapRackin66["EM2_R02_R03_C12_C14_DW"] = 7;
  mapRackin66["EM2_R02_R03_C12_C14_UP"] = 8;
  mapRackin66["EM2_R02_R03_C15_C17_DW"] = 9;
  mapRackin66["EM2_R02_R03_C15_C17_UP"] = 10;
  mapRackin66["EM2_R02_R03_C18_C20_DW"] = 11;
  mapRackin66["EM2_R02_R03_C18_C20_UP"] = 12;
  
  //mapping output RE-2
  
  mapRackout62["EM2_R02_R03_C21_C23_DW"] = 1;
  mapRackout62["EM2_R02_R03_C21_C23_UP"] = 2;
  mapRackout62["EM2_R02_R03_C24_C26_DW"] = 3;
  mapRackout62["EM2_R02_R03_C24_C26_UP"] = 4;
  mapRackout62["EM2_R02_R03_C27_C29_DW"] = 5;
  mapRackout62["EM2_R02_R03_C27_C29_UP"] = 6;
  mapRackout62["EM2_R02_R03_C30_C32_DW"] = 7;
  mapRackout62["EM2_R02_R03_C30_C32_UP"] = 8;
  mapRackout62["EM2_R02_R03_C33_C35_DW"] = 9;
  mapRackout62["EM2_R02_R03_C33_C35_UP"] = 10;
  mapRackout62["EM2_R02_R03_C36_C02_DW"] = 11;
  mapRackout62["EM2_R02_R03_C36_C02_UP"] = 12;
  
  mapRackout66["EM2_R02_R03_C03_C05_DW"] = 1;
  mapRackout66["EM2_R02_R03_C03_C05_UP"] = 2;
  mapRackout66["EM2_R02_R03_C06_C08_DW"] = 3;
  mapRackout66["EM2_R02_R03_C06_C08_UP"] = 4;
  mapRackout66["EM2_R02_R03_C09_C11_DW"] = 5;
  mapRackout66["EM2_R02_R03_C09_C11_UP"] = 6;
  mapRackout66["EM2_R02_R03_C12_C14_DW"] = 7;
  mapRackout66["EM2_R02_R03_C12_C14_UP"] = 8;
  mapRackout66["EM2_R02_R03_C15_C17_DW"] = 9;
  mapRackout66["EM2_R02_R03_C15_C17_UP"] = 10;
  mapRackout66["EM2_R02_R03_C18_C20_DW"] = 11;
  mapRackout66["EM2_R02_R03_C18_C20_UP"] = 12;
  
  //mapping input  RE-1
  
  mapRackin65["EM1_R02_C06_C11_DW"] = 1;
  mapRackin65["EM1_R02_C12_C17_DW"] = 2;
  mapRackin65["EM1_R02_C06_C11_UP"] = 3;
  mapRackin65["EM1_R02_C18_C23_DW"] = 4;
  mapRackin65["EM1_R02_C12_C17_UP"] = 5;
  mapRackin65["EM1_R02_C18_C23_UP"] = 6;
  mapRackin65["EM1_R02_C24_C29_DW"] = 7;
  mapRackin65["EM1_R02_C30_C35_DW"] = 8;
  mapRackin65["EM1_R02_C24_C29_UP"] = 9;
  mapRackin65["EM1_R02_C36_C05_DW"] = 10;
  mapRackin65["EM1_R02_C30_C35_UP"] = 11;
  mapRackin65["EM1_R02_C36_C05_UP"] = 12;
  mapRackin65["EM1_R03_C36_C05_UP"] = 13;
  mapRackin65["EM1_R03_C12_C17_DW"] = 14;
  mapRackin65["EM1_R03_C06_C11_UP"] = 15;
  mapRackin65["EM1_R03_C18_C23_DW"] = 16;
  mapRackin65["EM1_R03_C12_C17_UP"] = 17;
  mapRackin65["EM1_R03_C24_C29_DW"] = 18;
  mapRackin65["EM1_R03_C18_C23_UP"] = 19;
  mapRackin65["EM1_R03_C30_C35_DW"] = 20;
  mapRackin65["EM1_R03_C24_C29_UP"] = 21;
  mapRackin65["EM1_R03_C36_C05_DW"] = 22;
  mapRackin65["EM1_R03_C30_C35_UP"] = 23;
  mapRackin65["EM1_R03_C06_C11_DW"] = 24;
  
  //mapping output RE-1
  
  mapRackout65["EM1_R02_C06_C11_DW"] = 1;
  mapRackout65["EM1_R02_C12_C17_DW"] = 2;
  mapRackout65["EM1_R02_C06_C11_UP"] = 3;
  mapRackout65["EM1_R02_C18_C23_DW"] = 4;
  mapRackout65["EM1_R02_C12_C17_UP"] = 5;
  mapRackout65["EM1_R02_C18_C23_UP"] = 6;
  mapRackout65["EM1_R02_C24_C29_DW"] = 7;
  mapRackout65["EM1_R02_C30_C35_DW"] = 8;
  mapRackout65["EM1_R02_C24_C29_UP"] = 9;
  mapRackout65["EM1_R02_C36_C05_DW"] = 10;
  mapRackout65["EM1_R02_C30_C35_UP"] = 11;
  mapRackout65["EM1_R02_C36_C05_UP"] = 12;
  mapRackout65["EM1_R03_C06_C11_DW"] = 13;
  mapRackout65["EM1_R03_C12_C17_DW"] = 14;
  mapRackout65["EM1_R03_C36_C05_DW"] = 15;
  mapRackout65["EM1_R03_C24_C29_UP"] = 16;
  mapRackout65["EM1_R03_C12_C17_UP"] = 17;
  mapRackout65["EM1_R03_C18_C23_UP"] = 18;
  mapRackout65["EM1_R03_C24_C29_DW"] = 19;
  mapRackout65["EM1_R03_C30_C35_DW"] = 20;
  mapRackout65["EM1_R03_C18_C23_DW"] = 21;
  mapRackout65["EM1_R03_C06_C11_UP"] = 22;
  mapRackout65["EM1_R03_C30_C35_UP"] = 23;
  mapRackout65["EM1_R03_C36_C05_UP"] = 24;
  
  //mapping input  RE+1
  
  mapRackin83["EP1_R03_C06_C11_DW"] = 1;
  mapRackin83["EP1_R03_C30_C35_UP"] = 2;
  mapRackin83["EP1_R03_C36_C05_DW"] = 3;
  mapRackin83["EP1_R03_C24_C29_UP"] = 4;
  mapRackin83["EP1_R03_C30_C35_DW"] = 5;
  mapRackin83["EP1_R03_C18_C23_UP"] = 6;
  mapRackin83["EP1_R03_C24_C29_DW"] = 7;
  mapRackin83["EP1_R03_C12_C17_UP"] = 8;
  mapRackin83["EP1_R03_C18_C23_DW"] = 9;
  mapRackin83["EP1_R03_C06_C11_UP"] = 10;
  mapRackin83["EP1_R03_C12_C17_DW"] = 11;
  mapRackin83["EP1_R03_C36_C05_UP"] = 12;
  mapRackin83["EP1_R02_C36_C05_UP"] = 13;
  mapRackin83["EP1_R02_C30_C35_UP"] = 14;
  mapRackin83["EP1_R02_C36_C05_DW"] = 15;
  mapRackin83["EP1_R02_C24_C29_UP"] = 16;
  mapRackin83["EP1_R02_C30_C35_DW"] = 17;
  mapRackin83["EP1_R02_C24_C29_DW"] = 18;
  mapRackin83["EP1_R02_C12_C17_DW"] = 19;
  mapRackin83["EP1_R02_C12_C17_UP"] = 20;
  mapRackin83["EP1_R02_C18_C23_DW"] = 21;
  mapRackin83["EP1_R02_C06_C11_UP"] = 22;
  mapRackin83["EP1_R02_C18_C23_UP"] = 23;
  mapRackin83["EP1_R02_C06_C11_DW"] = 24;
  
  //mapping output RE+1
  
  mapRackout83["EP1_R03_C36_C05_UP"] = 1;
  mapRackout83["EP1_R03_C30_C35_UP"] = 2;
  mapRackout83["EP1_R03_C06_C11_UP"] = 3;
  mapRackout83["EP1_R03_C18_C23_DW"] = 4;
  mapRackout83["EP1_R03_C30_C35_DW"] = 5;
  mapRackout83["EP1_R03_C24_C29_DW"] = 6;
  mapRackout83["EP1_R03_C18_C23_UP"] = 7;
  mapRackout83["EP1_R03_C12_C17_UP"] = 8;
  mapRackout83["EP1_R03_C24_C29_UP"] = 9;
  mapRackout83["EP1_R03_C36_C05_DW"] = 10;
  mapRackout83["EP1_R03_C12_C17_DW"] = 11;
  mapRackout83["EP1_R03_C06_C11_DW"] = 12;
  mapRackout83["EP1_R02_C36_C05_UP"] = 13;
  mapRackout83["EP1_R02_C30_C35_UP"] = 14;
  mapRackout83["EP1_R02_C36_C05_DW"] = 15;
  mapRackout83["EP1_R02_C24_C29_UP"] = 16;
  mapRackout83["EP1_R02_C30_C35_DW"] = 17;
  mapRackout83["EP1_R02_C24_C29_DW"] = 18;
  mapRackout83["EP1_R02_C18_C23_UP"] = 19;
  mapRackout83["EP1_R02_C12_C17_UP"] = 20;
  mapRackout83["EP1_R02_C18_C23_DW"] = 21;
  mapRackout83["EP1_R02_C06_C11_UP"] = 22;
  mapRackout83["EP1_R02_C12_C17_DW"] = 23;
  mapRackout83["EP1_R02_C06_C11_DW"] = 24;
  
  //mapping input RE+2
  
  mapRackin80["EP2_R02_R03_C21_C23_DW"] = 1;
  mapRackin80["EP2_R02_R03_C21_C23_UP"] = 2;
  mapRackin80["EP2_R02_R03_C24_C26_DW"] = 3;
  mapRackin80["EP2_R02_R03_C24_C26_UP"] = 4;
  mapRackin80["EP2_R02_R03_C27_C29_DW"] = 5;
  mapRackin80["EP2_R02_R03_C27_C29_UP"] = 6;
  mapRackin80["EP2_R02_R03_C30_C32_DW"] = 7;
  mapRackin80["EP2_R02_R03_C30_C32_UP"] = 8;
  mapRackin80["EP2_R02_R03_C33_C35_DW"] = 9;
  mapRackin80["EP2_R02_R03_C33_C35_UP"] = 10;
  mapRackin80["EP2_R02_R03_C36_C02_DW"] = 11;
  mapRackin80["EP2_R02_R03_C36_C02_UP"] = 12;
  
  mapRackin84["EP2_R02_R03_C03_C05_DW"] = 1;
  mapRackin84["EP2_R02_R03_C03_C05_UP"] = 2;
  mapRackin84["EP2_R02_R03_C06_C08_DW"] = 3;
  mapRackin84["EP2_R02_R03_C06_C08_UP"] = 4;
  mapRackin84["EP2_R02_R03_C09_C11_DW"] = 5;
  mapRackin84["EP2_R02_R03_C09_C11_UP"] = 6;
  mapRackin84["EP2_R02_R03_C12_C14_DW"] = 7;
  mapRackin84["EP2_R02_R03_C12_C14_UP"] = 8;
  mapRackin84["EP2_R02_R03_C15_C17_DW"] = 9;
  mapRackin84["EP2_R02_R03_C15_C17_UP"] = 10;
  mapRackin84["EP2_R02_R03_C18_C20_DW"] = 11;
  mapRackin84["EP2_R02_R03_C18_C20_UP"] = 12;

  //mapping output RE+2

  mapRackout80["EP2_R02_R03_C21_C23_DW"] = 1;
  mapRackout80["EP2_R02_R03_C21_C23_UP"] = 2;
  mapRackout80["EP2_R02_R03_C24_C26_DW"] = 3;
  mapRackout80["EP2_R02_R03_C24_C26_UP"] = 4;
  mapRackout80["EP2_R02_R03_C27_C29_DW"] = 5;
  mapRackout80["EP2_R02_R03_C27_C29_UP"] = 6;
  mapRackout80["EP2_R02_R03_C30_C32_DW"] = 7;
  mapRackout80["EP2_R02_R03_C30_C32_UP"] = 8;
  mapRackout80["EP2_R02_R03_C33_C35_DW"] = 9;
  mapRackout80["EP2_R02_R03_C33_C35_UP"] = 10;
  mapRackout80["EP2_R02_R03_C36_C02_DW"] = 11;
  mapRackout80["EP2_R02_R03_C36_C02_UP"] = 12;

  mapRackout84["EP2_R02_R03_C03_C05_DW"] = 1;
  mapRackout84["EP2_R02_R03_C03_C05_UP"] = 2;
  mapRackout84["EP2_R02_R03_C06_C08_DW"] = 3;
  mapRackout84["EP2_R02_R03_C06_C08_UP"] = 4;
  mapRackout84["EP2_R02_R03_C09_C11_DW"] = 5;
  mapRackout84["EP2_R02_R03_C09_C11_UP"] = 6;
  mapRackout84["EP2_R02_R03_C12_C14_DW"] = 7;
  mapRackout84["EP2_R02_R03_C12_C14_UP"] = 8;
  mapRackout84["EP2_R02_R03_C15_C17_DW"] = 9;
  mapRackout84["EP2_R02_R03_C15_C17_UP"] = 10;
  mapRackout84["EP2_R02_R03_C18_C20_DW"] = 11;
  mapRackout84["EP2_R02_R03_C18_C20_UP"] = 12;

  //mapping input RE+3  

  mapRackin81["EP3_R02_R03_C04_C06_UP"] = 1;
  mapRackin81["EP3_R02_R03_C04_C06_DW"] = 2;
  mapRackin81["EP3_R02_R03_C07_C09_UP"] = 3;
  mapRackin81["EP3_R02_R03_C07_C09_DW"] = 4;
  mapRackin81["EP3_R02_R03_C10_C12_UP"] = 5;
  mapRackin81["EP3_R02_R03_C10_C12_DW"] = 6;
  mapRackin81["EP3_R02_R03_C13_C15_UP"] = 7;
  mapRackin81["EP3_R02_R03_C13_C15_DW"] = 8;
  mapRackin81["EP3_R02_R03_C16_C18_UP"] = 9;
  mapRackin81["EP3_R02_R03_C16_C18_DW"] = 10;
  mapRackin81["EP3_R02_R03_C19_C21_UP"] = 11;
  mapRackin81["EP3_R02_R03_C19_C21_DW"] = 12;

  mapRackin85["EP3_R02_R03_C22_C24_UP"] = 1;
  mapRackin85["EP3_R02_R03_C25_C27_UP"] = 2;
  mapRackin85["EP3_R02_R03_C22_C24_DW"] = 3;
  mapRackin85["EP3_R02_R03_C25_C27_DW"] = 4;
  mapRackin85["EP3_R02_R03_C28_C30_UP"] = 5;
  mapRackin85["EP3_R02_R03_C28_C30_DW"] = 6;
  mapRackin85["EP3_R02_R03_C31_C33_UP"] = 7;
  mapRackin85["EP3_R02_R03_C31_C33_DW"] = 8;
  mapRackin85["EP3_R02_R03_C34_C36_UP"] = 9;
  mapRackin85["EP3_R02_R03_C01_C03_UP"] = 10;
  mapRackin85["EP3_R02_R03_C34_C36_DW"] = 11;
  mapRackin85["EP3_R02_R03_C01_C03_DW"] = 12;

  //mapping output RE+3
  
  mapRackout81["EP3_R02_R03_C04_C06_UP"] = 1;
  mapRackout81["EP3_R02_R03_C04_C06_DW"] = 2;
  mapRackout81["EP3_R02_R03_C07_C09_UP"] = 3;
  mapRackout81["EP3_R02_R03_C07_C09_DW"] = 4;
  mapRackout81["EP3_R02_R03_C10_C12_UP"] = 5;
  mapRackout81["EP3_R02_R03_C10_C12_DW"] = 6;
  mapRackout81["EP3_R02_R03_C13_C15_UP"] = 7;
  mapRackout81["EP3_R02_R03_C13_C15_DW"] = 8;
  mapRackout81["EP3_R02_R03_C16_C18_UP"] = 9;
  mapRackout81["EP3_R02_R03_C16_C18_DW"] = 10;
  mapRackout81["EP3_R02_R03_C19_C21_UP"] = 11;
  mapRackout81["EP3_R02_R03_C19_C21_DW"] = 12;

  mapRackout85["EP3_R02_R03_C25_C27_DW"] = 1;
  mapRackout85["EP3_R02_R03_C22_C24_DW"] = 2;
  mapRackout85["EP3_R02_R03_C25_C27_UP"] = 3;
  mapRackout85["EP3_R02_R03_C22_C24_UP"] = 4;
  mapRackout85["EP3_R02_R03_C28_C30_UP"] = 5;
  mapRackout85["EP3_R02_R03_C28_C30_DW"] = 6;
  mapRackout85["EP3_R02_R03_C31_C33_UP"] = 7;
  mapRackout85["EP3_R02_R03_C31_C33_DW"] = 8;
  mapRackout85["EP3_R02_R03_C01_C03_DW"] = 9;
  mapRackout85["EP3_R02_R03_C34_C36_DW"] = 10;
  mapRackout85["EP3_R02_R03_C01_C03_UP"] = 11;
  mapRackout85["EP3_R02_R03_C34_C36_UP"] = 12;

  string rackNr;
  mapping mapin, mapout;
  dyn_string halfRack;
  dyn_string dName = makeDynString("EM3first", "EM3second", "EM2first", 
                                   "EM2second", "EM1", "EP1", "EP2first", 
                                   "EP2second", "EP3first", "EP3second");
  dyn_string low3 = makeDynString ("C04_C06", "C07_C09", "C10_C12", "C13_C15",
                                   "C16_C18", "C19_C21");
  dyn_string high3 = makeDynString ("C22_C24", "C25_C27", "C28_C30", "C31_C33",
                                    "C34_C36","C01_C03");
  dyn_string low2 = makeDynString ("C03_C05", "C06_C08", "C09_C11", "C12_C14",
                                   "C15_C17", "C18_C20");
  dyn_string high2 = makeDynString ("C21_C23", "C24_C26", "C27_C29", "C30_C32",
                                    "C33_C35","C36_C02");
  dyn_string tot1 = makeDynString ("C06_C11", "C12_C17", "C18_C23", "C24_C29", "C30_C35", "C36_C05");
  dyn_string Ring2_3 = makeDynString("R02", "R03");

  for(int i=1; i<=dynlen(dName); i++){
    
    switch (dName[i]){
      case "EM3first": rackNr = "67"; mapin = mapRackin67; mapout = mapRackout67; halfRack = low3; break;
      case "EM3second": rackNr = "63"; mapin = mapRackin63; mapout = mapRackout63; halfRack = high3; break;
      case "EM2first": rackNr = "66"; mapin = mapRackin66; mapout = mapRackout66; halfRack = low2; break;
      case "EM2second": rackNr = "62"; mapin = mapRackin62; mapout = mapRackout62; halfRack = high2; break;
      case "EM1": rackNr = "65"; mapin = mapRackin65; mapout = mapRackout65; halfRack = tot1; break;
      case "EP1": rackNr = "83"; mapin = mapRackin83; mapout = mapRackout83; halfRack = tot1; break;
      case "EP2first": rackNr = "84"; mapin = mapRackin84; mapout = mapRackout84; halfRack = low2; break;
      case "EP2second": rackNr = "80"; mapin = mapRackin80; mapout = mapRackout80; halfRack = high2; break;
      case "EP3first": rackNr = "85"; mapin = mapRackin85; mapout = mapRackout85; halfRack = high3; break;
      case "EP3second":rackNr = "81"; mapin = mapRackin81; mapout = mapRackout81; halfRack = low3; break; 
        }
  
  int channelNr;
  string chamber;
  
  if(rackNr == "65" || rackNr == "83"){
    for(int k=1; k<=6; k++){ 
      for(int j=1; j<=2; j++){
        
        channelNr = mapin[dName[i]+"_"+Ring2_3[j]+"_"+halfRack[k]+"_UP"];
        chamber = dName[i]+"_"+Ring2_3[j]+"_"+halfRack[k]+"_UP";
        //Creation of up channel endcap dps 
        dpCreate(chamber, "RPCGasChannel");
        
        //Dip function (up endcap)
                //dipEndcapAddress(rackNr, channelNr, chamber+".flowIn");
                //dipEndcapAddress(rackNr, channelNr, chamber+".flowOut");
        dipEndcapAddress(rackNr, channelNr, chamber);
                
        channelNr = mapin[dName[i]+"_"+Ring2_3[j]+"_"+halfRack[k]+"_DW"];
        chamber = dName[i]+"_"+Ring2_3[j]+"_"+halfRack[k]+"_DW";
        //Creation of down channel endcap dps
        dpCreate(chamber, "RPCGasChannel");
        
        //Dip function (down endcap)
                //dipEndcapAddress(rackNr, channelNr, chamber+".flowIn");
                //dipEndcapAddress(rackNr, channelNr, chamber+".flowOut");
        dipEndcapAddress(rackNr, channelNr, chamber);
        
        }
      }
    }
  
  else{
    for(int k=1; k<=6; k++){
      
      channelNr= mapin[substr(dName[i], 0, 3)+"_R02_R03_"+halfRack[k]+"_UP"];
      chamber = substr(dName[i], 0, 3)+"_R02_R03_"+halfRack[k]+"_UP";
      //Creation of up channel endcap
      dpCreate(chamber, "RPCGasChannel");
      
      //Dip function (up endcap)
              //dipEndcapAddress(rackNr, channelNr, chamber+".flowIn");
              //dipEndcapAddress(rackNr, channelNr, chamber+".flowOut");
              dipEndcapAddress(rackNr, channelNr, chamber);

      
      channelNr = mapin[substr(dName[i], 0, 3)+"_R02_R03_"+halfRack[k]+"_DW"];
      chamber = substr(dName[i], 0, 3)+"_R02_R03_"+halfRack[k]+"_DW";
      //Creation of down channel endcap
      dpCreate(chamber, "RPCGasChannel");
      
      //Dip function (down endcap)
            //dipEndcapAddress(rackNr, channelNr, chamber+".flowIn");
            //dipEndcapAddress(rackNr, channelNr, chamber+".flowOut");
      dipEndcapAddress(rackNr, channelNr, chamber);
      
      }
    }
  }
  
  DebugN("DPs created for the Endcap");
  
}

///////////////////////fino a qui//////////////////////////////

//DIP function (endcap)

dipEndcapAddress(string rackNr, int channelNr, string chamber)
{

  dyn_string exInfo, childName, fieldName;
  dyn_int childType, fieldType;
  
  string item = "dip/CMS/GCS/CMSRPC/Distribution/Rack"+rackNr+"/Channel"+channelNr;
  string configDp = dipAddress;
  dyn_string dpes = makeDynString(getSystemName()+chamber+".flowIn", getSystemName()+chamber+".flowOut");
  //dyn_string dpes = makeDynString(getSystemName()+chamber);
 dyn_string tags = makeDynString("InFlow(FE"+rackNr+"02Ch"+channelNr+")","OutFlow(FE"+rackNr+"06Ch"+channelNr+")");
 
  bool overwrite = FALSE;
  
  if(dynlen(exInfo)<1){ 
    fwDIP_unsubscribeMany(dpes,exInfo);  

    fwDIP_subscribeStructure(item, dpes, tags, configDp, exInfo, overwrite);
    //fwDIP_subscribe(dpes, configDp, item, tags, exInfo, overwrite);
  }
}

infrastructure()
{
  //cout.append("Infrastructure dp creation started");
  //cout.append("...............");

  dyn_string EndcapRacks = makeDynString("EM3_Rack67ChamberPres", "EM3_Rack63ChamberPres", "EM2_Rack66ChamberPres", 
                                         "EM2_Rack62ChamberPres", "EM1_Rack65ChamberPres", "EP1_Rack83ChamberPres", 
                                         "EP2_Rack84ChamberPres", "EP2_Rack80ChamberPres", "EP3_Rack85ChamberPres", 
                                         "EP3_Rack81ChamberPres", "EM3_Rack67InputPres", "EM3_Rack63InputPres", 
                                         "EM2_Rack66InputPres", "EM2_Rack62InputPres", "EM1_Rack65InputPres", 
                                         "EP1_Rack83InputPres", "EP2_Rack84InputPres", "EP2_Rack80InputPres", 
                                         "EP3_Rack85InputPres", "EP3_Rack81InputPres");
  dyn_string EndcapOutRacks = makeDynString("EM3_Rack67OutputPres", 
                                         "EM3_Rack63OutputPres", "EM2_Rack66OutputPres", "EM2_Rack62OutputPres", 
                                         "EM1_Rack65OutputPres", "EP1_Rack83OutputPres", "EP2_Rack84OutputPres", 
                                         "EP2_Rack80OutputPres", "EP3_Rack85OutputPres", "EP3_Rack81OutputPres");


  for(int i = 1; i <= dynlen(EndcapOutRacks); i++){
    string variable = EndcapOutRacks[i]; 
    dpCreate(variable, "RPCGasParameters");
  }  

 dyn_string EndcapStateRacks = makeDynString("EM3_Rack67State", "EM3_Rack63State", "EM2_Rack66State", 
                                             "EM2_Rack62State", "EM1_Rack65State", "EP1_Rack83State", 
                                             "EP2_Rack84State", "EP2_Rack80State", "EP3_Rack85State", 
                                             "EP3_Rack81State");  
  
    
  dyn_string DipEndcapRacks = makeDynString("67", "63", "66", "62", "65", "83", "84", "80", "85", "81",
                                            "67", "63", "66", "62", "65", "83", "84", "80", "85", "81"); 
//                                            "67", "63", "66", "62", "65", "83", "84", "80", "85", "81"); 
//                                             "67", "63", "66", "62", "65", "83", "84", "80", "85", "81");
  
  dyn_string DipEndcapStateRacks = makeDynString("67", "63", "66", "62", "65", "83", "84", "80", "85", "81");
  
  dyn_string AliasEndcapRacks = makeDynString("ChPressure(PT6704)", "ChPressure(PT6304)", "ChPressure(PT6604)",
                                              "ChPressure(PT6204)", "ChPressure(PT6504)", "ChPressure(PT8304)",
                                              "ChPressure(PT8404)", "ChPressure(PT8004)", "ChPressure(PT8504)",
                                              "ChPressure(PT8104)", "InPressure(PT6724)", "InPressure(PT6324)", 
                                              "InPressure(PT6624)", "InPressure(PT6224)", "InPressure(PT6524)", 
                                              "InPressure(PT8324)", "InPressure(PT8424)", "InPressure(PT8024)",
                                              "InPressure(PT8524)", "InPressure(PT8124)");//, "OutManifoldPressure(PDT6725)",

  dyn_string AliasEndcapStateRacks = makeDynString("State(Rack67StepWS)", "State(Rack63StepWS)", "State(Rack66StepWS)",
                                              "State(Rack62StepWS)", "State(Rack65StepWS)", "State(Rack83StepWS)",
                                              "State(Rack84StepWS)", "State(Rack80StepWS)", "State(Rack85StepWS)",
                                              "State(Rack81StepWS)");
  
  
    for(int i = 1; i <= dynlen(EndcapRacks); i++){
    string variable = EndcapRacks[i]; 
    dpCreate(variable, "RPCGasParameters");   
 
    string dpConfig = dipAddress;
    string item = "dip/CMS/GCS/CMSRPC/Distribution/Rack"+DipEndcapRacks[i];
    dyn_string childName, fieldName, exceptionInfo;
    //dyn_int childType, fieldType;
    string dpes = getSystemName()+EndcapRacks[i]+".value";
    string tags = AliasEndcapRacks[i];
    fwDIP_unsubscribe(dpes,exceptionInfo);
    fwDIP_subscribe(dpes, dpConfig, item, tags, exceptionInfo);
            // }
  }

  
 for(int i = 1; i <= dynlen(EndcapStateRacks); i++){
    string variable = EndcapStateRacks[i]; 
    dpCreate(variable, "RPCGasParameterStatus");   
 
    string dpConfig = dipAddress;
    string item = "dip/CMS/GCS/CMSRPC/Distribution/Rack"+DipEndcapStateRacks[i];
    dyn_string childName, fieldName, exceptionInfo;
    //dyn_int childType, fieldType;
    string dpes = getSystemName()+EndcapStateRacks[i]+".state";
    string tags = AliasEndcapStateRacks[i];
 fwDIP_unsubscribe(dpes,exceptionInfo);
    fwDIP_subscribe(dpes, dpConfig, item, tags, exceptionInfo);
            // }
  }  
    
    //Barrel Racks
      
  dyn_string BarrelRacks = makeDynString("WP2_Rack78ChamberPres", "WP2_Rack73ChamberPres", "WP1_Rack77ChamberPres", 
                                         "WP1_Rack72ChamberPres", "W00_Rack76ChamberPres", "W00_Rack71ChamberPres", 
                                         "WM1_Rack75ChamberPres", "WM1_Rack70ChamberPres", "WM2_Rack74ChamberPres", 
                                         "WM2_Rack69ChamberPres", "WP2_Rack78InputPres", "WP2_Rack73InputPres", 
                                         "WP1_Rack77InputPres", "WP1_Rack72InputPres", "W00_Rack76InputPres", 
                                         "W00_Rack71InputPres", "WM1_Rack75InputPres", "WM1_Rack70InputPres", 
                                         "WM2_Rack74InputPres", "WM2_Rack69InputPres");//,
  dyn_string BarrelOutRacks = makeDynString( "WP2_Rack78OutputPres", 
                                         "WP2_Rack73OutputPres", "WP1_Rack77OutputPres", "WP1_Rack72OutputPres", 
                                         "W00_Rack76OutputPres", "W00_Rack71OutputPres", "WM1_Rack75OutputPres", 
                                         "WM1_Rack70OutputPres", "WM2_Rack74OutputPres", "WM2_Rack69OutputPres");
  
      for(int i = 1; i <= dynlen(BarrelOutRacks); i++){
    string variable = BarrelOutRacks[i]; 
    dpCreate(variable, "RPCGasParameters");
  }
//                                          "WP2_Rack78State", "WP2_Rack73State", "WP1_Rack77State", 
//                                          "WP1_Rack72State", "W00_Rack76State", "W00_Rack71State", 
//                                          "WM1_Rack75State", "WM1_Rack70State", "WM2_Rack74State", 
//                                          "WM2_Rack69State");

  dyn_string  BarrelStateRacks = makeDynString("WP2_Rack78State", "WP2_Rack73State", "WP1_Rack77State", 
                                         "WP1_Rack72State", "W00_Rack76State", "W00_Rack71State", 
                                         "WM1_Rack75State", "WM1_Rack70State", "WM2_Rack74State", 
                                         "WM2_Rack69State");
    
  dyn_string DipBarrelRacks = makeDynString("78", "73", "77", "72", "76", "71", "75", "70", "74", "69",
                                            "78", "73", "77", "72", "76", "71", "75", "70", "74", "69");
//                                            "78", "73", "77", "72", "76", "71", "75", "70", "74", "69");
//                                             "78", "73", "77", "72", "76", "71", "75", "70", "74", "69");
  
  dyn_string DipBarrelStateRacks = makeDynString("78", "73", "77", "72", "76", "71", "75", "70", "74", "69");
  
  dyn_string AliasBarrelRacks = makeDynString("ChPressure(PT7804)", "ChPressure(PT7304)", "ChPressure(PT7704)",
                                              "ChPressure(PT7204)", "ChPressure(PT7604)", "ChPressure(PT7104)",
                                              "ChPressure(PT7504)", "ChPressure(PT7004)", "ChPressure(PT7404)",
                                              "ChPressure(PT6904)", "InPressure(PT7824)", "InPressure(PT7324)", 
                                              "InPressure(PT7724)", "InPressure(PT7224)", "InPressure(PT7624)", 
                                              "InPressure(PT7124)", "InPressure(PT7524)", "InPressure(PT7024)",
                                              "InPressure(PT7424)", "InPressure(PT6924)");//, "OutManifoldPressure(PDT7825)",
//                                              "OutManifoldPressure(PDT7325)", "OutManifoldPressure(PDT7725)", "OutManifoldPressure(PDT7225)",
//                                              "OutManifoldPressure(PDT7625)", "OutManifoldPressure(PDT7125)", "OutManifoldPressure(PDT7525)",
//                                              "OutManifoldPressure(PDT7025)", "OutManifoldPressure(PDT7425)", "OutManifoldPressure(PDT6925)");
//                                               "State(Rack78StepWP)", "State(Rack73StepWP)", "State(Rack77StepWP)",
//                                               "State(Rack72StepWP)", "State(Rack76StepWP)", "State(Rack71StepWP)",
//                                               "State(Rack75StepWP)", "State(Rack70StepWP)", "State(Rack74StepWP)",
//                                               "State(Rack69StepWP)");
  
  dyn_string AliasBarrelStateRacks = makeDynString("State(Rack78StepWS)", "State(Rack73StepWS)", "State(Rack77StepWS)",
                                              "State(Rack72StepWS)", "State(Rack76StepWS)", "State(Rack71StepWS)",
                                              "State(Rack75StepWS)", "State(Rack70StepWS)", "State(Rack74StepWS)",
                                              "State(Rack69StepWS)");
  
    for(int i = 1; i <= dynlen(BarrelRacks); i++){
    string variable = BarrelRacks[i]; 
    dpCreate(variable, "RPCGasParameters"); 
   
    string dpConfig = dipAddress;
    string item = "dip/CMS/GCS/CMSRPC/Distribution/Rack"+DipBarrelRacks[i];
    dyn_string childName, fieldName, exceptionInfo;
    //dyn_int childType, fieldType;
    string dpes = getSystemName()+BarrelRacks[i]+".value";
    string tags = AliasBarrelRacks[i];
      fwDIP_unsubscribe(dpes,exceptionInfo);         
    fwDIP_subscribe(dpes, dpConfig, item, tags, exceptionInfo);
               // }
   
  }
  
       for(int i = 1; i <= dynlen(BarrelStateRacks); i++){
    string variable = BarrelStateRacks[i]; 
    dpCreate(variable, "RPCGasParameterStatus"); 
   
    string dpConfig = dipAddress;
    string item = "dip/CMS/GCS/CMSRPC/Distribution/Rack"+DipBarrelStateRacks[i];
    dyn_string childName, fieldName, exceptionInfo;
    //dyn_int childType, fieldType;
    string dpes = getSystemName()+BarrelStateRacks[i]+".state";
    string tags = AliasBarrelStateRacks[i];
     fwDIP_unsubscribe(dpes,exceptionInfo);
    fwDIP_subscribeStructure(item, dpes, tags, dpConfig, exceptionInfo);
    fwDIP_subscribe(dpes, dpConfig, item, tags, exceptionInfo);
               // }
   
  }
   
    
    
  //service  
    
  dyn_string OtherParameters = makeDynString("Mixer_TotalFlow", "Mixer_OutPressure", 
                                             "Exhaust_OutFlow",  
                                             "Humidifier_Humidity", "Humidifier_WaterTankLevel",
                                             "Mixer_SF6Input", "Mixer_C2H2F4Input", "Mixer_IC4H10Input",
                                             "Mixer_SF6Ratio", "Mixer_C2H2F4Ratio", "Mixer_IC4H10Ratio",
                                             "Exhaust_BufferPressure", "Exhaust_CirculationPressure",
                                             "Exhaust_CirculationFlow", "DistributionTotalFlow");

  
  dyn_string OtherStateParameters = makeDynString("Mixer_State", "Exhaust_State", "Pump_State", "AliveCounter",
                                                  "Humidifier_State", "GasSystemState", "Purifier1_State",
                                                  "Purifier1ColA_State", "Purifier1ColB_State", "Purifier2_State",
                                                  "Purifier2ColA_State", "Purifier2ColB_State");
 
  dyn_string OtherParameters1 = makeDynString("Environmental_SGAtmoPressure", "Environmental_USServiceAtmoPressure",
                                              "Environmental_UXCPressure", "Analyzer_Chain2ch141", "Analyzer_Chain2ch142", 
                                              "Analyzer_Chain2ch143", "Analyzer_Chain2ch144", "Analyzer_Chain3ch141_O2", 
                                              "Analyzer_Chain3ch142_O2", "Analyzer_Chain3ch156_O2", "Analyzer_Chain3ch157_O2", 
                                              "Analyzer_Chain3ch158_O2", "Analyzer_Chain3ch159_O2", "Analyzer_Chain3ch141_H2O",
                                              "Analyzer_Chain3ch142_H2O", "Analyzer_Chain3ch156_H2O", "Analyzer_Chain3ch157_H2O", 
                                              "Analyzer_Chain3ch158_H2O", "Analyzer_Chain3ch159_H2O");
  
  dyn_string Par = makeDynString("Environmental_UXCTemperature", 
                                 "Environmental_UXCHumidity", //"Purifier1_State",
                                 //"Purifier1ColA_State", "Purifier1ColB_State", "Purifier2_State",
                                 //"Purifier2ColA_State", "Purifier2ColB_State", 
                                 "Purifier3_State",
                                 "Purifier3ColA_State", "Purifier3ColB_State", // "AnalyzerChain2_141pur1", "AnalyzerChain2_142pur",
                                 //"AnalyzerChain2_143mixer", "AnalyzerChain2_144supply", "AnalyzerChain3_141O2",
                                 //"AnalyzerChain3_142H2O", "AnalyzerChain3_156pur1", "AnalyzerChain3_157pur", 
                                 //"AnalyzerChain3_158mixer", "AnalyzerChain3_159supply", 
                                 "TotalLeakRate");     //, "Exhaust_OutFlow");
  
  dyn_string DipOtherParameters = makeDynString("Mixer", "Mixer", "Exhaust",
                                                "Humidifier", "Humidifier", "Mixer", "Mixer", "Mixer", 
                                                "Mixer", "Mixer", "Mixer", "Exhaust", 
                                                "Exhaust", "Exhaust", "Distribution");
  
  dyn_string DipOtherStateParameters = makeDynString("Mixer", "Exhaust", "Pump", "PlcCounter", "Humidifier",
                                                     "GasSystem", "Purifiers/Purifier1", "Purifiers/Purifier1",
                                                     "Purifiers/Purifier1", "Purifiers/Purifier2", "Purifiers/Purifier2",
                                                     "Purifiers/Purifier2");
  
  dyn_string DipOtherParameters1 = makeDynString("Environmental", "Environmental", "Environmental", "Analysis/Chain2/Source141",
                                                 "Analysis/Chain2/Source142", "Analysis/Chain2/Source143", "Analysis/Chain2/Source144",
                                                 "Analysis/Chain3/Source141", "Analysis/Chain3/Source142", "Analysis/Chain3/Source156",
                                                 "Analysis/Chain3/Source157", "Analysis/Chain3/Source158", "Analysis/Chain3/Source159",
                                                 "Analysis/Chain3/Source141", "Analysis/Chain3/Source142", "Analysis/Chain3/Source156",
                                                 "Analysis/Chain3/Source157", "Analysis/Chain3/Source158", "Analysis/Chain3/Source159");
  
  dyn_string AliasOtherParameters = makeDynString("TotalFlow(TotalFlowAS)", "OutPressure(PT1009)",
                                                  "OutFlow(XMFC5002FIF)", 
                                                  "Humidity(XHAT5128)", "WaterTankLevel(WaterLevelAS)",
                                                  "Line3InputPressure(PT1303)", "Line1InputPressure(PT1103)", "Line2InputPressure(PT1203)",
                                                  "Line3Ratio(L3CompRatioAS)", "Line1Ratio(L1CompRatioAS)", "Line2Ratio(L2CompRatioAS)",
                                                  "BufferPressure(PT5005)",
                                                  "CirculationPressure(PT5011)", "CirculationFlow(FIT5010)", "TotalInputFlow(TotFlowAS)");
  
  dyn_string AliasOtherStateParameters = makeDynString("State(StepperWS)", "State(StepperWS)", "State(StepperWS)",
                                                       "AliveCounter", "State(StepperWS)", "State(GsStepWS)",
                                                       "State(PuStepWS)", "ColAState(PuCAStepWS)", "ColBState(PuCBStepWS)",
                                                       "State(PuStepWS)", "ColAState(PuCAStepWS)", "ColBState(PuCBStepWS)");
  
  dyn_string AliasOtherParameters1 = makeDynString("SGAtmosPressure(PT0101)", "USAtmosPressure(PT0201)", "UXAtmosPressure1(PT0301)",
                                                   "IR(L2Sr141ConAS)", "IR(L2Sr142ConAS)", "IR(L2Sr143ConAS)", "IR(L2Sr144ConAS)",
                                                   "O2(L3Sr141O2AS)", "O2(L3Sr142O2AS)", "O2(L3Sr156O2AS)", "O2(L3Sr157O2AS)",
                                                   "O2(L3Sr158O2AS)", "O2(L3Sr159O2AS)", "HO2(L3Sr141H2OAS)", "HO2(L3Sr142H2OAS)",
                                                   "HO2(L3Sr156H2OAS)", "HO2(L3Sr157H2OAS)", "HO2(L3Sr158H2OAS)", "HO2(L3Sr159H2OAS)");
  
  dyn_string StatusParameters = makeDynString("EM3", "EM2", "EM1", "WM2", "WM1", "W00", "WP1", "WP2", "EP1", "EP2", "EP3",
                                              "GasSystem", "Mixer", "Rack67", "Rack63", "Rack66", "Rack62", "Rack65",
                                              "Rack83", "Rack84", "Rack80", "Rack85", "Rack81", "Rack74", "Rack69",
                                              "Rack75", "Rack70", "Rack76", "Rack71", "Rack77", "Rack72", "Rack78",
                                              "Rack73", "Pump", "Exhaust", "Purifier", "Humidifier", 
                                              "Environmental", "GeneralServiceSystem", "AnalysisReadOutChain", "Barrel", 
                                              "Endcap", "Infrastructure");
 
  
    for(int i = 1; i <= dynlen(OtherParameters); i++){
      dpCreate(OtherParameters[i], "RPCGasParameters"); 
      
      string dpConfig = dipAddress;
      string item = "dip/CMS/GCS/CMSRPC/"+DipOtherParameters[i];
      dyn_string childName, fieldName, exceptionInfo;
      dyn_int childType, fieldType;
      string dpes = getSystemName()+OtherParameters[i]+".value";
      string tags = AliasOtherParameters[i];
   fwDIP_unsubscribe(dpes,exceptionInfo);
      fwDIP_subscribeStructure(item, dpes, tags, dpConfig, exceptionInfo);
      fwDIP_subscribe(dpes, dpConfig, item, tags, exceptionInfo);
      // }     
      
  }
    
        for(int i = 1; i <= dynlen(OtherStateParameters); i++){
      dpCreate(OtherStateParameters[i], "RPCGasParameterStatus"); 
      
      string dpConfig = dipAddress;
      string item = "dip/CMS/GCS/CMSRPC/"+DipOtherStateParameters[i];
      dyn_string childName, fieldName, exceptionInfo;
      dyn_int childType, fieldType;
      string dpes = getSystemName()+OtherStateParameters[i]+".state";
      string tags = AliasOtherStateParameters[i];
 fwDIP_unsubscribe(dpes,exceptionInfo);
      fwDIP_subscribe(dpes, dpConfig, item, tags, exceptionInfo);
      // }     
      
  }
    
    for(int i = 1; i <= dynlen(OtherParameters1); i++){
      dpCreate(OtherParameters1[i], "RPCGasParameters"); 
      
      string dpConfig = dipAddress;
      string item = "dip/CMS/GCS/CMSAUX/"+DipOtherParameters1[i];
      dyn_string childName, fieldName, exceptionInfo;
      dyn_int childType, fieldType;
      string dpes = getSystemName()+OtherParameters1[i]+".value";
      string tags = AliasOtherParameters1[i];
   
      fwDIP_subscribe(dpes, dpConfig, item, tags, exceptionInfo);
      // }     
      
  }
    
    for(int i=1; i<=dynlen(Par); i++){
     dpCreate(Par[i], "RPCGasParameters");
     
     string dpConfig = dipAddress;
     string item = "dip/CMS/GCS/";
     dyn_string childNme, fieldName, exceptionInfo;
     dyn_int childType, fieldType;
     string dpes = getSystemName()+Par[i]; 
      
      
    }
  
    for(int i =1; i<= dynlen(StatusParameters); i++){
      dpCreate(StatusParameters[i], "RPCGasStatus");

    }  
  DebugN("Infrastructure dp created");
  //cout.append("Infrastructure dp created");
  //cout.append("...............");
}


//Set the alarm

alarmset()
{
  setGasFlowAlarm();
  setColorAlarm();
  setGasRackPressureAlarm();
  setHumidifierAlarm();
  setMixerAlarm();
  DebugN("Alarms set");
  //cout.append("Alarms set");
  //cout.append("...............");
}

setGasFlowAlarm(){
  
  dyn_string barreladdress = dpNames(RPCGasGetSysName()+"W*", "RPCGasChannel");
  //DebugN(barreladdress);
  
  dyn_string endcapaddress = dpNames(RPCGasGetSysName()+"E*", "RPCGasChannel");
  //DebugN(endcapaddress);
  
  dyn_string exceptionInfo;
  //float firstEcValue = 15, secondEcValue = 10, firstBaValue = 15, secondEcValue = 10;
  dyn_float limits;
  string endcapChannelIn, endcapChannelOut, barrelChannelIn, endcapChannelDifference, barrelChannelOut, barrelChannelDifference;
  dyn_string alertTexts = makeDynString("LowFlow", "Warning", "Ok");
  dyn_string alertTexts1 = makeDynString("High", "Low", "Ok");
  dyn_string alertClasses = makeDynString("_fwErrorAck.", "_fwWarningAck.", "");
  dyn_string alertClasses1 = makeDynString("_fwErrorAck.", "_fwWarningAck.", "");
  string alertPanel, alertHelp; 
  dyn_string summary, alertPanelParameters;
   
  for(int i=1; i<=dynlen(barreladdress); i++){
   
    barrelChannelIn = barreladdress[i]+".flowIn";
    //DebugN(barrelChannelIn);
    fwAlertConfig_deactivate(barrelChannelIn, exceptionInfo);
    limits = makeDynFloat(10, 15);
    fwAlertConfig_set(barrelChannelIn, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts, limits, alertClasses, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
    //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
    fwAlertConfig_activate(barrelChannelIn, exceptionInfo);
     
    barrelChannelOut = barreladdress[i]+".flowOut";
    fwAlertConfig_deactivate(barrelChannelOut, exceptionInfo);
    limits = makeDynFloat(10, 15);
    fwAlertConfig_set(barrelChannelOut, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts, limits, alertClasses, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
    //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
    fwAlertConfig_activate(barrelChannelOut, exceptionInfo);
    
    barrelChannelDifference = barreladdress[i]+".difference";
    fwAlertConfig_deactivate(barrelChannelDifference, exceptionInfo);
    limits = makeDynFloat(-30, -20);
    fwAlertConfig_set(barrelChannelDifference, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts1, limits, alertClasses1, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
    //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
    fwAlertConfig_activate(barrelChannelDifference, exceptionInfo);
    
       
   }
   
   for(int i=1; i<=dynlen(endcapaddress); i++){
     
   endcapChannelIn = endcapaddress[i]+".flowIn";
   fwAlertConfig_deactivate(endcapChannelIn, exceptionInfo);
   limits = makeDynFloat(6, 9);
   fwAlertConfig_set(endcapChannelIn, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts, limits, alertClasses, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
   //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
   fwAlertConfig_activate(endcapChannelIn, exceptionInfo);
   
   endcapChannelOut = endcapaddress[i]+".flowOut";
   fwAlertConfig_deactivate(endcapChannelOut, exceptionInfo);
   limits = makeDynFloat(6, 9);
   fwAlertConfig_set(endcapChannelOut, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts, limits, alertClasses, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
   //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
   fwAlertConfig_activate(endcapChannelOut, exceptionInfo);
   
   endcapChannelDifference = endcapaddress[i]+".difference";
   fwAlertConfig_deactivate(endcapChannelDifference, exceptionInfo);
   limits = makeDynFloat(-30, -20);
   fwAlertConfig_set(endcapChannelDifference, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts1, limits, alertClasses1, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
   //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
   fwAlertConfig_activate(endcapChannelDifference, exceptionInfo);
   
  
  }
}
setColorAlarm(){
   
   dyn_string alertTexts2 = makeDynString("Ok", "Warning", "Error");
   dyn_string alertClasses2 = makeDynString("", "_fwWarningAck.", "_fwErrorAck.");
   dyn_float limits2;
   dyn_string exceptionInfo;
   dyn_string statusaddress = dpNames(RPCGasGetSysName()+"*", "RPCGasStatus");
   //DebugN(statusaddress);
   dyn_string colorstatus;
   string alertPanel, alertHelp; 
   dyn_string summary, alertPanelParameters;
  
    for(int i = 1; i<=dynlen(statusaddress); i++){
      colorstatus = statusaddress[i]+".status";
      //DebugN(colorstatus);
      fwAlertConfig_deactivate(colorstatus, exceptionInfo);
      limits2 = makeDynFloat(1, 2);
      fwAlertConfig_set(colorstatus, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts2, limits2, alertClasses2, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
      //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
      fwAlertConfig_activate(colorstatus, exceptionInfo);
    
   
    }
   
}
setGasRackPressureAlarm(){
  
  dyn_string rackaddress = dpNames(RPCGasGetSysName()+"*Rack*Chamber*", "RPCGasParameters"); 
  //DebugN(rackaddress);
  dyn_string exceptionInfo;
  dyn_float limits;
  dyn_string rackaddressval;
  dyn_string alertTexts = makeDynString("Warning", "Ok", "Warning");
  dyn_string alertClasses = makeDynString("_fwWarningAck.", "", "_fwWarningAck.");
  string alertPanel, alertHelp; 
  dyn_string summary, alertPanelParameters;

    for(int i=1; i<=dynlen(rackaddress); i++){
      
          rackaddressval = rackaddress[i]+".value";
          fwAlertConfig_deactivate(rackaddressval, exceptionInfo);
          limits = makeDynFloat(0.05, 0.7);
          fwAlertConfig_set(rackaddressval, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts, limits, alertClasses, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
          //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
          fwAlertConfig_activate(rackaddressval, exceptionInfo); 
  
          }
  dyn_string rackaddress = dpNames(RPCGasGetSysName()+"*Rack*State*", "RPCGasParameterStatus"); 
  //DebugN(rackaddress);
  dyn_string exceptionInfo;
  dyn_float limits;
  dyn_string rackaddressval;
  dyn_string alertTexts = makeDynString("Error", "Ok");
  dyn_string alertClasses = makeDynString("_fwErrorAck.", "");
  string alertPanel, alertHelp; 
  dyn_string summary, alertPanelParameters;

    for(int i=1; i<=dynlen(rackaddress); i++){
      
          rackaddressval = rackaddress[i]+".state";
          fwAlertConfig_deactivate(rackaddressval, exceptionInfo);
          limits = makeDynFloat(2);
          fwAlertConfig_set(rackaddressval, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts, limits, alertClasses, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
          //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
          fwAlertConfig_activate(rackaddressval, exceptionInfo);   
        }
}
setHumidifierAlarm()
{
  string watertankaddress = dpNames(RPCGasGetSysName()+"*Humidifier_Water*", "RPCGasParameters");
  
  dyn_string exceptionInfo;
  dyn_float limits;
  string watervalue = watertankaddress+".value";
  dyn_string alertTexts = makeDynString("Error", "Warning", "Ok");
  dyn_string alertClasses = makeDynString("_fwErrorAck.", "_fwWarningAck", "");
  string alertPanel, alertHelp; 
  dyn_string summary, alertPanelParameters;
  
  fwAlertConfig_deactivate(watervalue, exceptionInfo);
  limits = makeDynFloat(15, 30);
  fwAlertConfig_set(watervalue, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts, limits, alertClasses, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
  //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
  fwAlertConfig_activate(watervalue, exceptionInfo);  
   
}

setMixerAlarm()
{
  string mixeroutpres = dpNames(RPCGasGetSysName()+"*Mixer_Out*", "RPCGasParameters");
    
  dyn_string exceptionInfo;
  dyn_float limits;
  string outpres = mixeroutpres+".value";
  dyn_string alertTexts = makeDynString("Warning", "Ok", "Error");
  dyn_string alertClasses = makeDynString("_fwWarningAck.", "", "_fwErrorAck.");
  string alertPanel, alertHelp; 
  dyn_string summary, alertPanelParameters;
  
  fwAlertConfig_deactivate(outpres, exceptionInfo);
  limits = makeDynFloat(0.2, 1);
  fwAlertConfig_set(outpres, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts, limits, alertClasses, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
  //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
  fwAlertConfig_activate(outpres, exceptionInfo);  
  
  string mixerinputflow = dpNames(RPCGasGetSysName()+"*Mixer_Tot*", "RPCGasParameters");
  dyn_float limits1;
  string totflow = mixerinputflow+".value";
  dyn_string alertTexts1 = makeDynString("Error", "Ok");
  dyn_string alertClasses1 = makeDynString("_fwErrorAck.", ""); 
  
  fwAlertConfig_deactivate(totflow, exceptionInfo);
  limits1 = makeDynFloat(400);
  fwAlertConfig_set(totflow, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts1, limits1, alertClasses1, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
  //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
  fwAlertConfig_activate(totflow, exceptionInfo);  
  
  
  dyn_string mixerinputpressure = dpNames(RPCGasGetSysName()+"*Mixer_*Input*", "RPCGasParameters");
  dyn_float limits2;
  dyn_string alertTexts2 = makeDynString("Error", "Ok");
  dyn_string alertClasses2 = makeDynString("_fwErrorAck.", ""); 
   
  for(int i=1; i<=dynlen(mixerinputpressure); i++){

    dyn_string input = mixerinputpressure[i]+".value";
    fwAlertConfig_deactivate(input, exceptionInfo);
    limits2 = makeDynFloat(1);
    fwAlertConfig_set(input, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts2, limits2, alertClasses2, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
    //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
    fwAlertConfig_activate(input, exceptionInfo);  
     }
  
  string mixerC2 = dpNames(RPCGasGetSysName()+"*Mixer_C2*Ratio*", "RPCGasParameters");
  dyn_float limits3;
  string C2 = mixerC2+".value";
  dyn_string alertTexts3 = makeDynString("Error", "Ok", "Error");
  dyn_string alertClasses3 = makeDynString("_fwErrorAck.", "", "_fwErrorAck"); 
  
  fwAlertConfig_deactivate(C2, exceptionInfo);
  limits3 = makeDynFloat(95.5, 96.8);
  fwAlertConfig_set(C2, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts3, limits3, alertClasses3, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
  //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
  fwAlertConfig_activate(C2, exceptionInfo);  
  
  string mixerIC4 = dpNames(RPCGasGetSysName()+"*Mixer_IC4*Ratio*", "RPCGasParameters");
  dyn_float limits4;
  string IC4 = mixerIC4+".value";
  
  fwAlertConfig_deactivate(IC4, exceptionInfo);
  limits4 = makeDynFloat(3.2, 4.1);
  fwAlertConfig_set(IC4, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts3, limits4, alertClasses3, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
  //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
  fwAlertConfig_activate(IC4, exceptionInfo);
  
  string mixerSF6 = dpNames(RPCGasGetSysName()+"*Mixer_SF6*Ratio*", "RPCGasParameters");
  dyn_float limits5;
  string SF6 = mixerSF6+".value";
  
  fwAlertConfig_deactivate(SF6, exceptionInfo);
  limits5 = makeDynFloat(0.2, 0.4);
  fwAlertConfig_set(SF6, DPCONFIG_ALERT_NONBINARYSIGNAL, alertTexts3, limits5, alertClasses3, summary, alertPanel, alertPanelParameters, alertHelp, exceptionInfo);   
  //if(fwConfigurationDB_handleErrors(exceptionInfo)) return;
  fwAlertConfig_activate(SF6, exceptionInfo);
}



dbset()
{
 // fwArchive_set();
 gasFlowArchiveSet();
 //gasRackPressureArchiveSet();
 gasOtherParametersSet();
 DebugN("db set");
 //cout.append("DB set");
 //cout.append("...............");
}

void gasFlowArchiveSet(){

  dyn_string dpBarrelList = dpNames(RPCGasGetSysName()+"W*", "RPCGasChannel");
  //DebugN(dpBarrelList);
  dyn_string dpEndcapList = dpNames(RPCGasGetSysName()+"E*", "RPCGasChannel");
  //DebugN(dpEndcapList);
  string archiveClassName = "RDB-99) EVENT";
  //"ValueArchive_0000";//Archive's name
  int archiveType = DPATTR_ARCH_PROC_SIMPLESM, count=1, value, l;
  int smoothProcedure = DPATTR_TIME_AND_VALUE_SMOOTH , pos; 
  float deadband = 0.5;
  float deadband1 = 0.05;
  float timeInterval = 10000; 
  bool isActive; 
  dyn_string exceptionInfo,channels;

  for(int i = 1; i <= dynlen(dpBarrelList); i++){
    fwArchive_set(dpBarrelList[i]+".flowIn", archiveClassName, archiveType, 
                  smoothProcedure, deadband, timeInterval, exceptionInfo);
    fwArchive_set(dpBarrelList[i]+".flowOut", archiveClassName, archiveType, 
                  smoothProcedure, deadband, timeInterval, exceptionInfo);
//    fwArchive_set(dpBarrelList[i]+".difference", archiveClassName, archiveType,
//                  smoothProcedure, deadband1, timeInterval, exceptionInfo);
  }
  
  for(int i = 1; i <= dynlen(dpEndcapList); i++){
    fwArchive_set(dpEndcapList[i]+".flowIn", archiveClassName, archiveType, 
                  smoothProcedure, deadband, timeInterval, exceptionInfo);
    fwArchive_set(dpEndcapList[i]+".flowOut", archiveClassName, archiveType, 
                  smoothProcedure, deadband, timeInterval, exceptionInfo);
//    fwArchive_set(dpEndcapList[i]+".difference", archiveClassName, archiveType,
//                  smoothProcedure, deadband1, timeInterval, exceptionInfo);

  }
  
}
gasOtherParametersSet(){
  
  dyn_string dpOtherList = dpNames(RPCGasGetSysName()+"*", "RPCGasParameters");
  
  string archiveClassName = "RDB-99) EVENT";
  //"ValueArchive_0000";//Archive's name
  int archiveType = DPATTR_ARCH_PROC_SIMPLESM, count=1, value, l;
  int smoothProcedure = DPATTR_TIME_AND_VALUE_REL_SMOOTH , pos; 
  
  float deadband = 10;
  float timeInterval = 20000; 
  bool isActive; 
  dyn_string exceptionInfo,channels;

  
  for(int i = 1; i <= dynlen(dpOtherList); i++){
    fwArchive_set(dpOtherList[i]+".value", archiveClassName, archiveType, 
                  smoothProcedure, deadband, timeInterval, exceptionInfo);
  }
  
}

setfunction()
{
  dyn_string barreladdress = dpNames(RPCGasGetSysName()+"W*", "RPCGasChannel");
  //DebugN(barreladdress);
  
  dyn_string endcapaddress = dpNames(RPCGasGetSysName()+"E*", "RPCGasChannel");
  //DebugN(endcapaddress);
  
  dyn_string exceptionInfo;
  string endcapChannelIn, endcapChannelOut, barrelChannelIn, endcapChannelDifference, barrelChannelOut, barrelChannelDifference;
  //dyn_string alertTexts = makeDynString("LowFlow", "Warning", "Ok");
  //dyn_string alertClasses = makeDynString("_fwErrorAck.", "_fwWarningAck.", "");
  string alertPanel, alertHelp; 
  dyn_string summary, alertPanelParameters;
   
  for(int i=1; i<=dynlen(barreladdress); i++){
   
    barrelChannelIn = barreladdress[i]+".flowIn:_original.._value";
    barrelChannelOut = barreladdress[i]+".flowOut:_original.._value";
    barrelChannelDifference = barreladdress[i]+".difference";
    //DebugN(barrelChannelDifference);
    bool runChecks = true;
    dyn_string functionGlobal;
    dyn_string parameters = makeDynString(barrelChannelIn, barrelChannelOut);  
    fwDpFunction_delete(barrelChannelDifference, exceptionInfo);
    fwDpFunction_setDpeConnection(barrelChannelDifference, parameters,
                                  functionGlobal, "100*(p2-p1)/(p1+0.01)",
                                  exceptionInfo, runChecks);
     
   }
  
  for(int i=1; i<=dynlen(endcapaddress); i++){
    
    endcapChannelIn = endcapaddress[i]+".flowIn:_original.._value";
    endcapChannelOut = endcapaddress[i]+".flowOut:_original.._value";
    endcapChannelDifference = endcapaddress[i]+".difference";
    //DebugN(endcapChannelDifference);
    bool runChecks = true;
    dyn_string functionGlobal;
    dyn_string parameters = makeDynString(endcapChannelIn, endcapChannelOut);  
    fwDpFunction_delete(endcapChannelDifference, exceptionInfo);
    fwDpFunction_setDpeConnection(endcapChannelDifference, parameters,
                                  functionGlobal, "100*(p2-p1)/(p1+0.01)",
                                  exceptionInfo, runChecks);
    
    
  }
  
  string InputFlowMixer = dpNames(RPCGasGetSysName()+"*Mixer_TotalF*", "RPCGasParameters")+".value:_original.._value";
  string OutputFlowExhaust = dpNames(RPCGasGetSysName()+"*Exhaust_OutFlow*", "RPCGasParameters")+".value:_original.._value";
  string TotalLeakRate = dpNames(RPCGasGetSysName()+"*TotalLeak*", "RPCGasParameters")+".value";
  bool runChecks = true;
  dyn_string functionGlobal, exceptionInfo;
  dyn_string parameters = makeDynString(InputFlowMixer, OutputFlowExhaust);  
  fwDpFunction_delete(TotalLeakRate, exceptionInfo);
  fwDpFunction_setDpeConnection(TotalLeakRate, parameters,
                                  functionGlobal, "p1-p2",
                                  exceptionInfo, runChecks);
    
  
  DebugN("difference functions set");
}
 
fsmAdd()
{
 
  if(fwFsmTree_isNode("RPC_GAS_TOP")) // if top node exist, detete it
                                     fwFsmTree_removeNode("FSM", "RPC_GAS_TOP", 1);
  fwFsmTree_addNode("FSM", "RPC_GAS_TOP", "RPC_TOPGAS", 1);
   fwFsmTree_setNodeLabel("RPC_GAS_TOP","RPC Gas System");
  dyn_string children = makeDynString("Barrel", "Endcap", "Infrastructure");
  for(int i=1; i<=dynlen(children); i++){
   fwFsmTree_addNode("RPC_GAS_TOP",RPCGasGetSysName()+children[i],"RPCGasStatusNode",0); 
    }
  linkGGM();
  fwFsmTree_generateAll();                                     
  fwFsmTree_refreshTree();  
}
void linkGGM(){
    
   dyn_string sysnum,exInfo;
   fwInstallation_getApplicationSystem("CMS_RPCfwGGM",sysnum);
   if(dynlen(sysnum)>0)
   { 
   dyn_string chldren;
   fwTree_getChildren(sysnum[1]+"FSM",chldren,exInfo);
   
    if(dynlen(chldren)==1)
    {
      fwFsmTree_importType("RPC_GGMDevice",strrtrim(sysnum[1],":"));
      fwFsmTree_addNode("RPC_GAS_TOP",sysnum[1]+chldren[1],"RPC_GGMDevice",1);
    }     
  }else
    RPCDebug("Gas Link not found");
}

