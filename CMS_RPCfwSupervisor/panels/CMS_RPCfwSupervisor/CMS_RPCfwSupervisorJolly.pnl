V 10
1
LANG:1 8 (NoName)
PANEL,-1 -1 530 643 N "_3DFace" 0
E E E E E 1 0 0 0  200 100
""0  1
E E 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
13 0
"Button1"
""
1 30 22 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 28 20 146 70

T 
1
LANG:1 12 Crea Logical
"main()
{
dyn_string exInfo;
fwNode_initialize();
fwNode_createLogical(\"RPCBarrel\",\"\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);

fwNode_createLogical(\"HV\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"LV\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"LBB_LV\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"Crates\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"T\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"Boards\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"BCs\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"MAO\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
/* Il +1s10 
*/
// HV(numero canale, branch, crate, 1)
 completaHV(\"RPC_WP2_S01\",1,0,0,1);
 completaHV(\"RPC_WP2_S02\",9,0,0,1);
 completaHV(\"RPC_WP2_S03\",17,0,0,1);
 completaHV(\"RPC_WP2_S04\",25,0,0,1);
 completaHV(\"RPC_WP2_S05\",35,0,0,1);
 
 completaHV(\"RPC_WP2_S06\",1,1,2,1);
 completaHV(\"RPC_WP2_S07\",9,1,2,1);
 completaHV(\"RPC_WP2_S08\",17,1,2,1);
 completaHV(\"RPC_WP2_S09\",25,1,2,1);//Ricorda di aggiun
 completaHV(\"RPC_WP2_S10\",32,1,2,1);
 
 completaHV(\"RPC_WP2_S11\",1,0,1,1);
 completaHV(\"RPC_WP2_S12\",8,0,1,1);
 
 completaLV(\"RPC_WP2_S01\",1,0,3);
 completaLV(\"RPC_WP2_S02\",13,0,3);
 completaLV(\"RPC_WP2_S03\",25,0,3);
 completaLV(\"RPC_WP2_S04\",37,0,3);
 completaLV(\"RPC_WP2_S05\",49,0,3);
 
 completaLV(\"RPC_WP2_S06\",1,0,2);
 completaLV(\"RPC_WP2_S07\",13,0,2);
 
 completaLV(\"RPC_WP2_S08\",1,1,1);
 completaLV(\"RPC_WP2_S09\",13,1,1);
 completaLV(\"RPC_WP2_S10\",25,1,1);
 completaLV(\"RPC_WP2_S11\",37,1,1);
 completaLV(\"RPC_WP2_S12\",49,1,1);
 
 
 completaLVLBB(\"RPC_WP2_S01\",1,1,4);
 completaLVLBB(\"RPC_WP2_S02\",5,1,4);
 completaLVLBB(\"RPC_WP2_S03\",9,1,4);
 completaLVLBB(\"RPC_WP2_S10\",13,1,4);
 completaLVLBB(\"RPC_WP2_S11\",17,1,4);
 completaLVLBB(\"RPC_WP2_S12\",21,1,4);
 
 completaLVLBB(\"RPC_WP2_S04\",25,1,4);
 completaLVLBB(\"RPC_WP2_S05\",29,1,4);
 completaLVLBB(\"RPC_WP2_S06\",33,1,4);
 completaLVLBB(\"RPC_WP2_S07\",37,1,4);
 completaLVLBB(\"RPC_WP2_S08\",41,1,4);
 completaLVLBB(\"RPC_WP2_S09\",45,1,4);



//completaT(\"RPC_WP1_S10\",32,1,0,6);//2 LV + 1 pl = 30ch.

completaT(\"RPC_WP2_S01\",1,1,0,5);
completaT(\"RPC_WP2_S02\",6,1,0,5);
completaT(\"RPC_WP2_S03\",11,1,0,5);
completaT(\"RPC_WP2_S10\",16,1,0,6);
completaT(\"RPC_WP2_S11\",22,1,0,5);
completaT(\"RPC_WP2_S12\",27,1,0,5);
completaT(\"RPC_WP2_S04\",32,1,0,6);
completaT(\"RPC_WP2_S05\",38,1,0,5);
completaT(\"RPC_WP2_S06\",43,1,0,5);
completaT(\"RPC_WP2_S07\",48,1,0,5);
completaT(\"RPC_WP2_S08\",53,1,0,5);
completaT(\"RPC_WP2_S09\",58,1,0,5);



 completaBoard(\"RPC_WP2_X1N\",1,0);
 completaBoard(\"RPC_WP2_X2N\",1,1);
 completaBoard(\"RPC_WP2_X3N\",1,2);
 completaBoard(\"RPC_WP2_X1F\",1,3);
 completaBoard(\"RPC_WP2_X2F\",1,4);
 completaBoard(\"RPC_WP2_X3F\",1,5);
 
 
 completaMAO(\"RPC_WP2_X2N\",1,5);
 //completaMAO(\"RPC_WP2_X2F\",1,4);
 
 completaBC();
 
 completaCrate();



}

void completaBC(){
dyn_string bc = dpNames(\"*\",\"FwCaenBoardSY1527A1676\");
dyn_string names = makeDynString(\"SCX\",\"BAL_WP2\",\"BAL_P1\",\"BAL_P0\");
for (int i=1;i<=dynlen(bc);i++)
	{
	//dyn_string name = strsplit(sys[i],\"/\");
	dpSetAlias (bc[i]+\".\",\"RPCBarrel/BCs/RPC_\"+names[i]+\"_BC\");
	}



}

void completaCrate(){

dyn_string sys = dpNames(\"*\",\"FwCaenCrateSY1527\");
for (int i=1;i<=dynlen(sys);i++)
	{
	//dyn_string name = strsplit(sys[i],\"/\");
	dpSetAlias (sys[i]+\".\",\"RPCBarrel/Crates/RPCSY1527Barrel\");
	}

}

void completaMAO(string name, int br, int cr) { 
dyn_string nodes,anodes,exInfo; 

dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/pow*\",\"FwCaenChannel\"); 
int j=1; 

for(int i=1;i<=dynlen(deviceList);i++) {
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/MAO/\"+name+\"MAOch0\"+i);
	j++;
	
	}
DebugN(\"Fine MAO\");
}


void completaBoard(string name, int br, int cr) { 
dyn_string nodes,anodes,exInfo; 
string nome;
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenBoardEasy\"); 
int j=1; 

for(int i=1;i<=dynlen(deviceList);i++) {
	if(i==5)
		nome = \"_MAO\";
	else
		nome = \"_B0\"+i;		
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/Boards/\"+name+nome);
	j++;
	
	}
DebugN(\"Fine Board\");
}


void completaLVLBB(string name, int num,int br, int cr) { 
dyn_string nodes,anodes,exInfo; 
dyn_string cham=makeDynString(\"_LBB25_1\",\"_LBB33_1\",\"_LBB25_11\",\"_LBB33_11\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);

for (int i=1;i<=dynlen(cham);i++)
	{
	nodes[i]= name+cham[i]+\"_LV\";
	}
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\"); 
int j=num; 

for(int i=1;i<=dynlen(nodes);i++) {
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LBB_LV/\"+nodes[i]);
	j++;
	
	}
DebugN(\"Fine LBB\");
}





void completaHV(string name, int num,int br, int cr, int nHV) {


dyn_string nodes,anodes,exInfo;
dyn_string
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",     
\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);
if((strpos(name,\"S11\")>1)||(strpos(name,\"S09\")>1))
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4\",
                                \"_RB4minusminus\",\"_RB4plusplus\");
int dim = dynlen(cham)-2;
if(strpos(name,\"S04\")>1)
	dim = dynlen(cham);
	

for (int i=1;i<=dim;i++)
	{
	nodes[i]=name+cham[i]+\"_HV\";
	}

dyn_string
deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\");
dynAppend(deviceList,dpNames(\"*\"+br+\"/easyCrate\"+(cr+1)+\"/*\",\"FwCaenChannel\"));
int j = num;
for(int i=1;i<=dynlen(nodes);i++)
	{
	if(nHV == 1)
		{
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]);
		j++;
		}
	else if(nHV==2)
		{
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]+\"_UP\");
		j++;
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]+\"_DOWN\");
		j++;
		}
	//DebugN(re);
	}
DebugN(\"Fine HV\");
}

void completaLV(string name, int num,int br, int cr) { dyn_string
nodes,anodes,exInfo; dyn_string
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3\",\"_RB3\",\"_RB4\",
                                \"_RB4\",\"_RB4minusminus\",\"_RB4plusplus\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);

for (int i=1;i<=(dynlen(cham)-2);i++)
{
nodes[i]= name+cham[i]+\"_LV\";
}
dyn_string
deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\");
int j=num;
for(int i=1;i<=dynlen(nodes);i++)
{
if(i!=6&&i!=8)
{
//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+nodes[i]+\"_ANA\");
j++;
//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"2\");
dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+nodes[i]+\"_DIG\");
j++;
}
//DebugN(re);
}
DebugN(\"Fine LV\");
}
void completaT(string name, int num,int br, int cr, int tot)
{

dyn_string cham=makeDynString(\"_RB1in_T\",\"_RB1out_T\",\"_RB2_T\",\"_RB3_T\",\"_RB4minus_T\",\"_RB4plus_T\");
if(tot== 5)
	cham[5]=\"_RB4_T\";
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannelADC\");
int j = num;
DebugN(dynlen(deviceList));
 for(int i = tot;i>=1;i--)
 	{
 	DebugN(\"RPCBarrel/T/\"+name+cham[i]);
 	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/T/\"+name+cham[i]);
 	j++;
 	}
DebugN(\"Fine T\");
}
" 0
 E E E
13 1
"Button2"
""
1 34 128 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 32 126 148 168

T 
1
LANG:1 11 Settavalori
"main()
{

dyn_string list=makeDynString(\".i0\",\".vMaxSoftValue\",\".v0\",
               \".tripTime\",\".rUp\",\".rDwn\");

               
string logName;
float value; 
dyn_string channels = dpNames(\"*\",\"FwCaenChannel\"); 

for(int i = 1; i<=dynlen(channels);i++) 
 { 
  logName = fwDU_getLogicalName(channels[i]);
  //DebugN(logName);
  if(strpos(logName,\"HV\")>1)
  	{
  	HVChann(channels[i]);
    }
   else if((strpos(logName,\"ANA\")>1)||(strpos(logName,\"DIG\")>1))
  	{
  	LVChann(channels[i],logName);
    }
    else if(strpos(logName,\"LBB\")>1)
  	{
  	LBBChann(channels[i],logName);
    }
    //DebugN(channels[i]);  
 } 
DebugN(\"Fin\");
}
HVChann(string dpe)
{
dyn_string list=makeDynString(\".i0\",\".vMaxSoftValue\",\".v0\",
               \".tripTime\",\".rUp\",\".rDwn\");

dyn_string value=makeDynString(\"50\",\"12000\",\"100\",\"5\",\"50\",\"100\");         
for(int j=1;j<=dynlen(list);j++)
   		{
    	//dpGet(channels[i]+\".readBackSettings\"+list[j],value); 
      //  DebugN(channels[i],value); 
        dpSet(dpe+\".settings\"+list[j],value[j]); 
        dpSet(dpe+\".readBackSettings\"+list[j],value[j]); 
    	}

}
LVChann(string dpe,string logName)
{
dyn_string list=makeDynString(\".i0\",\".vMaxSoftValue\",\".v0\");
                              
dyn_string value=makeDynString(\"2\",\"8\",\"7\");
	if(strpos(logName,\"DIG\")>1)
   			value[1] = 3;
   else
   	 value[1] = 2;
// DebugN(dpe,value);         
for(int j=1;j<=dynlen(list);j++)
   		{
   	
    	//dpGet(channels[i]+\".readBackSettings\"+list[j],value); 
        DebugN(logName,\"sas\",value); 
        dpSet(dpe+\".settings\"+list[j],value[j]);
        dpSet(dpe+\".readBackSettings\"+list[j],value[j]);  
    	}
    	

}
LBBChann(string dpe,string logName)
{
dyn_string list=makeDynString(\".i0\",\".vMaxSoftValue\",\".v0\");
                              
dyn_string value=makeDynString(\"6.5\",\"3\",\"2.5\");

          
for(int j=1;j<=dynlen(list);j++)
   		{
   		if(strpos(logName,\"33\")>1)
   			{
   			value[3] = 3.3;
   			value[2] = 4;
   			value[1] = 8;
   			}
    	//dpGet(channels[i]+\".readBackSettings\"+list[j],value); 
        DebugN(dpe,value); 
        dpSet(dpe+\".settings\"+list[j],value[j]); 
        dpSet(dpe+\".readBackSettings\"+list[j],value[j]); 
    	}
 dynClear(value);

}" 0
 E E E
13 2
"Button3"
""
1 322 24 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 320 22 432 66

T 
1
LANG:1 10 copia read
"main()
{
 
dyn_string list=makeDynString(\".i0\",\".vMaxSoftValue\",\".v0\",
               \".tripTime\",\".rUp\",\".rDwn\");

float value; 
dyn_string channels = dpNames(\"*\",\"FwCaenChannel\"); 
DebugN(channels); 
for(int i = 1; i<=dynlen(channels);i++) 
 { 
  for(int j=1;j<=dynlen(list);j++)
   {
    dpGet(channels[i]+\".readBackSettings\"+list[j],value); 
        DebugN(channels[i],value); 
        dpSet(channels[i]+\".settings\"+list[j],value); 
    } 
 }

}" 0
 E E E
13 3
"Button4"
""
1 178 132 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 176 130 286 170

T 
1
LANG:1 10 Alarm e DB
"main()
{
  SetdbforFsm();
//SetAlarmDevice();
//SetDeviceConditionDB();
}
void SetdbforFsm()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;
bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //Archive's name
int archiveType=DPATTR_ARCH_PROC_SIMPLESM,count=1,value,l;
int smoothProcedure=DPATTR_VALUE_REL_SMOOTH ,pos;//set old/new comparition 
float deadband=2;
float timeInterval=0; 
bool isActive; 
dyn_string exceptionInfo,channels,boards;

              bool exists,isAct;
              string  aClassName;
              int  aiType ,aType;
              float dband, attime;

fwTree_getAllTreeNodes(\"CMS_RPC\",nodes,exInfo);
//DebugN(nodes);
//fwFsmTree_getChildrenRec(\"\",parents);
//DebugN(\"-->\",parents);
string element;
dynAppend(nodes,\"CMS_RPC\");
 for (int i = 1; i<=dynlen(nodes); i++)
 	{
                //fwCU_getType(nodes[i],type);
                // fwFsmTree_getChildrenRec(parent,parents);
 		//DebugN(\"-->\",parents,parent,nodes[i]);
  		//if((type == \"RPC_Chamber\")||(type == \"RPC_Sector\")) 	  
        
               if(!(strpos(nodes[i],\"&\")>-1))
               {
               fwCU_getDevDp(nodes[i],type);
               element = type + \".fsm.currentState\";
               //DebugN(nodes[i],\"-->\",element);
               
              // fwArchive_set(element , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH ,deadband, 10000,exceptionInfo);
               //DebugN(element,\"-->\", exceptionInfo);
               dynClear(exceptionInfo);
 	
               }
               else
               {
                 string new;
                 fwCU_getDevDp(nodes[i],type);
                 int pos = strpos(type,\"|rpc\");
                 //DebugN(pos,\"ss\");
                 if (pos >0)
                 { 
                 new = substr(type,pos +1,9);
                 strreplace(type,new,\"\");
                 }
                 element = type + \".fsm.currentState\";
                
                 //DebugN(element,\"-a-a\",exceptionInfo);
               }
              
              fwArchive_get(element,exists,aClassName,aType,aiType ,dband, attime,isAct,exceptionInfo); 
              
              if(!exists)
                 fwArchive_set(element , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH ,deadband, 10000,exceptionInfo);
//                else
//                  DebugN(\"Gia esiste\");
               }


}

void SetAlarmDevice(){

float diff1,diff2,value;
dyn_string exceptionInfo,split,splitt,summary;
string channelName,channel;
dyn_string boolAlarms = makeDynString(\".actual.Trip\",\".actual.OvC\",\".actual.OvV\",
                   \".actual.UnV\",\".actual.UnC\",\".actual.overHvMax\");
dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));
for (int i=1;i<=dynlen(deviceList);i++)
 {
 dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\"),
       aTexts = makeDynString(\"OK\", \"Bad\") ;
 dyn_float limits; 
 dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\"),
       aClasses = makeDynString(\"\", \"_fwErrorAck.\");
  string alertPanel; dyn_string alertPanelParameters; string alertHelp;
 
 deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
 dpGet(deviceList[i]+\".settings.i0\", value);
 if(value != 0)
 {
 diff1=value*0.1;//primo limite al 10%
 diff2=value*0.2;//secondo limite al 20%
 
  
///Set  Alarm channel for Imon
 channel= deviceList[i]+\".actual.iMon\";
 
 dynAppend(summary,channel);
 fwAlertConfig_deactivate(channel,exceptionInfo);  
  limits = makeDynFloat( value-diff2,value-diff1 );
  DebugN(channel);
 fwAlertConfig_set(channel,DPCONFIG_ALERT_NONBINARYSIGNAL ,alertTexts,limits, alertClasses,summary,alertPanel,alertPanelParameters,
             alertHelp,exceptionInfo);
             if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
 fwAlertConfig_activate(channel,exceptionInfo);
 }
 //Set Digital alarm for channel
 for(int j =1;j<=dynlen(boolAlarms);j++)
  {
  
  fwAlertConfig_deactivate(deviceList[i]+boolAlarms[j],exceptionInfo); 
  
  fwAlertConfig_set(deviceList[i]+boolAlarms[j], DPCONFIG_ALERT_BINARYSIGNAL, aTexts, 
      limits, aClasses, summary,  alertPanel, alertPanelParameters, alertHelp,  exceptionInfo);
  
  
    
    fwAlertConfig_activate(deviceList[i]+boolAlarms[j],exceptionInfo); 
    dynAppend(summary, deviceList[i]+boolAlarms[j]) ;            
    }
  
  fwAlertConfig_deactivate(deviceList[i]+\".\",exceptionInfo); 
  fwAlertConfig_set(deviceList[i]+\".\",DPCONFIG_SUM_ALERT , aTexts, 
      limits, aClasses, summary,  alertPanel, alertPanelParameters, alertHelp,  exceptionInfo); 
 //DebugN(deviceList[i],exceptionInfo,summary);
 fwAlertConfig_activate(deviceList[i]+\".\",exceptionInfo); 
 dynClear(summary);
  
              
 }
 DebugN(\"Set Alarm configuration\");
}

SetDeviceConditionDB(){
// Ricorda che dovrebbe partire anche il manager ed essere settato
dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));
dynAppend(deviceList,dpAliases(\"*/LBB_LV/*\",\"*\"));
bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //Archive's name
int archiveType=DPATTR_ARCH_PROC_SIMPLESM,count=1,value,l;
int smoothProcedure=DPATTR_VALUE_REL_SMOOTH ,pos;//set old/new comparition 
float deadband=2;
float timeInterval=0; 
bool isActive; 
dyn_string exceptionInfo,channels,boards;

for(int i=1;i<=dynlen(deviceList);i++)
{

deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
/*
fwArchive_setMul tiple(deviceList[i]+\".actual.iMon\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".actual.vMon\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.i0\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.v0\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
					
fwArchive_setMultiple(deviceList[i]+\".actual.status\" , archiveClassName,archiveType,DPATTR_COMPARE_OLD_NEW ,
					deadband, timeInterval,exceptionInfo);*/
					
pos = strpos(deviceList[i],\"/chann\");
boards[i] = substr(deviceList[i],0,pos); 
}
dynUnique(boards);
DebugN(\"boar\", boards);


for(int i=1;i<=dynlen(boards);i++)
{

fwArchive_set(boards[i]+\".Temp.Temp1\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
}

dyn_string deviceListT=dpAliases(\"*/T/*\",\"*\");
for(int i=1;i<=dynlen(deviceListT);i++)
{
deviceListT[i]=fwDU_getPhysicalName(deviceListT[i]);
fwArchive_setMultiple(deviceListT[i]+\".actual.temp\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);

}

DebugN(\"Set archiving configuration\");
}" 0
 E E E
13 4
"Button5"
""
1 178 82 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 176 80 288 118

T 
1
LANG:1 9 erase ref
"main()
{
Cancella();
dyn_string exInfo,ciao;
/* = dpNames(\"*RPC_WP1_S10_RB4minus_H*\");
//ciao[2]= dpTypeName(ciao[1]);
DebugN(ciao);
 ciao = dpNames(\"*RPC_WP1_S10_RB4plus_H*\");
*/
//fwDevice_getChildren(\"rpcdcs01:CAEN/SystemOne/branchController02/easyCrate0/easyBoard08\",fwDevice_HARDWARE,ciao,exInfo);

DebugN(ciao);
}




void Cancella()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;
DebugN(\"Finding references...\");
fwTree_getAllNodes(nodes,exInfo);
DebugN(\"Founded \",dynlen(nodes),\" nodes\");
for (int i = 1; i<=dynlen(nodes); i++)
	fwFsmTree_getChildrenRec(nodes[i],parents);
	
for (int i = 1; i<=dynlen(parents); i++)
	if(strpos(parents[i],\"&\")>-1)
		{
		fwTree_getParent(parents[i],parent,exInfo);
		//fwFsmTree_removeNode(parent,parents[i]);
		DebugN(\"Reference: \",parents[i],\" deleted\");
		}
DebugN(\"References completely removed\");
}" 0
 E E E
13 5
"Button6"
""
1 176 24 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 174 22 290 68

T 
1
LANG:1 15 cancella alarmi
"main()
{
string  dpe;
  bool   configExists;
  int   alertConfigType;
  dyn_string   alertTexts;  
  dyn_float   alertLimits;
  dyn_string   alertClasses;
  dyn_string   summaryDpeList;  
  string   alertPanel;
  dyn_string   alertPanelParameters;  
  string   alertHelp;  
  bool  isActive;
  dyn_string   exceptionInfo;


dyn_string dplist= dpNames(\"*\",\"_FwFsmObject\");
dynAppend(dplist,dpNames(\"*\",\"FwCaenChannel\"));
DebugN(\"sadfdf\",dplist);
for(int i = 1; i<=dynlen(dplist);i++)
{
fwAlertConfig_get  (dplist[i]+\".\",configExists,  
  alertConfigType,  
   alertTexts,  
 alertLimits,  
  alertClasses,  
 summaryDpeList,  
 alertPanel,  
  alertPanelParameters,  
  alertHelp,  
 isActive,  
 exceptionInfo 
 );  

if(dynlen(summaryDpeList)==0)
	{
	fwAlertConfig_delete(dplist[i]+\".\",exceptionInfo);  
	DebugN(\"SSS:\",dplist[i]);
	}

}
}" 0
 E E E
13 6
"Button7"
""
1 32 78 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 30 76 148 118

T 
1
LANG:1 8 Crea FSM
"main()
{

//Start Database Connection and recive hardware and Logical schema

//ConfigurationDBRecive();


// Generate the FSM Device Tree
generateTreeforDevice();

// Insert the device node using hardware created
// 
 InsertLV();
 InsertHV();
 InsertT(); 
 InsertLBB(); 
 InsertBoards(); 
InsertBcMaoCrate(); 
// Set Alarm for devices
// SetAlarmDevice();


// Set archive for devices
// SetDeviceConditionDB();

}
void ConfigurationDBRecive()
{
dyn_string exceptionInfo,
            hierarchyType=makeDynString(fwDevice_HARDWARE, fwDevice_LOGICAL);
dyn_dyn_mixed recipeObject;
dyn_string list;
dyn_string topDevice=makeDynString(getSystemName()+\"CAEN\",\"\");
dyn_string recipeName=makeDynString(\"HW030506\",\"LW030506\");
string g_system;

//check if the connection is properly initialized
fwConfigurationDB_checkInit(exceptionInfo);
if (fwConfigurationDB_handleErrors(exceptionInfo)) return;  
dyn_string tmp=strsplit(getSystemName(),\":\");
//download hierarchy from ConfigDB
//first hardware then logical
for(int i=1;i<=2;i++)
	{
	
	if (dynlen(tmp)>1) {
		// means: we have system name embedded
		g_system=tmp[1]+\":\";
	} else {
		// we have no system name...
		if (hierarchyType[i]==fwDevice_LOGICAL)
			g_system=\"\";
		else
			g_system=getSystemName();
	}
	
	
	DebugN(i+\"++++++++++++++++++++++++++\");
	fwConfigurationDB_openProgressDialog(
	makeDynInt(	fwConfigurationDB_OPER_LoadHierachyFromDB,
			fwConfigurationDB_OPER_ApplyHierarchyToSystem),
	makeDynString(	\"Loading Hierarchy from DB\",
			\"Updating hierarchy in system\"));

	fwConfigurationDB_updateDeviceHierarchyFromDB(topDevice[i],hierarchyType[i],exceptionInfo,g_system);
	if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
	DebugN(\"Hierarchy created\");
	fwConfigurationDB_getRecipeFromDB (\"\",list, hierarchyType[i],recipeName[i],  
																			recipeObject,exceptionInfo);
	if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
	DebugN(\"Recipe download created\");
	
	fwConfigurationDB_ApplyRecipe( recipeObject, hierarchyType,exceptionInfo); 
  if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
  DebugN(\"Recipe Applied created\");

	  
	}

//get recipe from ConfigBD and copy it to cache
/*
fwConfigurationDB_getHierarchyFromPVSS(HvRootNode, fwDevice_LOGICAL,  
 																					HvDeviceList,exceptionInfo,\"\",FALSE);  
fwConfigurationDB_getHierarchyFromPVSS(LvRootNode, fwDevice_LOGICAL,  
 																					LvDeviceList,exceptionInfo,\"\",FALSE); 
dynAppend(deviceList,HvDeviceList);
dynAppend(deviceList,LvDeviceList); 	
																		
if (fwConfigurationDB_handleErrors(exceptionInfo)) return;  
	for(int i=1;i<=3;i++)
	{
	if(i==3)list=deviceList;
	else list=HvDeviceList;
	
	fwConfigurationDB_getRecipeFromDB (\"\",list, fwDevice_LOGICAL,recipeName[i],  
																			recipeObject,exceptionInfo);
	fwConfigurationDB_storeRecipeInCache(recipeObject,recipeName[i],fwDevice_LOGICAL,exceptionInfo);
	if (fwConfigurationDB_handleErrors(exceptionInfo)) return;   
	}
*/	
}


void generateTreeforDevice()
{
dyn_string nodes, exInfo;
string chamber_node,ring_node,disc_node, top_node;
int chamberNum;

dyn_string discs=makeDynString(\"_WM2\",\"_WM1\",\"_W00\",\"_WP1\",\"_WP2\");
dyn_string rings=makeDynString(\"_S01\",\"_S02\",\"_S03\",\"_S04\",\"_S05\",\"_S06\",\"_S07\",
				\"_S08\",\"_S09\",\"_S10\",\"_S11\",\"_S12\");
dyn_string cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",
				\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//remove top node if already exists (all children are removed too)
//fwFsmTree_removeNode(\"CMS_RPC\",\"RPC_BARREL\");
//create top node (type DCSNode)
fwTree_getRootNodes(nodes,exInfo);
//DebugN(nodes, exInfo);
top_node=fwFsmTree_addNode(\"FSM\",\"RPC_BARREL_HARDWARE\",\"RPC_Device\",1);
top_node=fwFsmTree_addNode(\"RPC_BARREL_HARDWARE\",\"RPC_HV\",\"RPC_Device\",0);
top_node=fwFsmTree_addNode(\"RPC_BARREL_HARDWARE\",\"RPC_LV\",\"RPC_Device\",0);
top_node=fwFsmTree_addNode(\"RPC_BARREL_HARDWARE\",\"RPC_LBB\",\"RPC_Device\",0);
top_node=fwFsmTree_addNode(\"RPC_BARREL_HARDWARE\",\"RPC_T\",\"RPC_T\",0);
top_node=fwFsmTree_addNode(\"RPC_BARREL_HARDWARE\",\"RPC_Boards\",\"RPC_Device\",0);
top_node=fwFsmTree_addNode(\"RPC_BARREL_HARDWARE\",\"RPC_BCs\",\"RPC_BC\",0);
top_node=fwFsmTree_addNode(\"RPC_BARREL_HARDWARE\",\"RPC_MAO\",\"RPC_Device\",0);
top_node=fwFsmTree_addNode(\"RPC_BARREL_HARDWARE\",\"RPC_Crates\",\"RPC_SY1527\",0);
fwTree_getRootNodes(nodes, exInfo);

//add list of children CU (type DiscNode)

for(int i=1; i<=dynlen(discs);i++)
	{
	//disc_node=fwFsmTree_addNode(top_node,\"RPC\"+discs[i],\"WheelNode\",1);
	if(i==5)
	{
	//add list of children CU(type RingNode)
        chamber_node=fwFsmTree_addNode(\"RPC_MAO\",\"RPC\"+discs[i]+\"_MAO\",\"RPC_MAO\",0);
	chamber_node=fwFsmTree_addNode(\"RPC_Boards\",\"RPC_RB_BAL\"+discs[i]+\"_Boards\",\"RPC_Boards\",0);
	chamber_node=fwFsmTree_addNode(\"RPC_Boards\",\"RPC_RB_SCX\"+discs[i]+\"_Boards\",\"RPC_Boards\",0);
	for(int j=1;j<=dynlen(rings);j++)
		{
		//ring_node=fwFsmTree_addNode(disc_node,\"RPC\"+discs[i]+rings[j],\"SectorNode\",1);
		
		//add list of children CU (type ChamberNode)
		if(j==4) 
			chamberNum=10;
		else if(j==9||j==11)
			{
			chamberNum=7;
			cham[7]=\"_RB4\";
			}
		else
			{
			chamberNum=8;
			cham[7]=\"_RB4minus\";
			}
			
		chamber_node=fwFsmTree_addNode(\"RPC_LBB\",\"RPC\"+discs[i]+rings[j]+\"_LBB\",\"RPC_LBBLV\",0);	
		for(int k=1;k<=chamberNum;k++)
			{
			chamber_node=fwFsmTree_addNode(\"RPC_T\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_T\",\"RPC_T\",0);
			chamber_node=fwFsmTree_addNode(\"RPC_HV\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_HV\",\"RPC_HV\",0);
			chamber_node=fwFsmTree_addNode(\"RPC_LV\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_LV\",\"RPC_LV\",0);
			
			}
		}
	}
	}
	

DebugN(\"Structure ready\");
//generate and refresh tree
fwFsmTree_generateAll();
//fwFsmTree_refreshTree();
}

void InsertDeviceInFSMe()
{
dyn_string exInfo;
int pos;
string names;

//Add Temp

//  dyn_string deviceList=dpAliases(\"*/T/*\",\"*\");
//  for(int i=1;i<=dynlen(deviceList);i++)
//  	{
//          pos =strpos(deviceList[i],\"RPC_W\");
//  	if(pos>-1)
//  	{
//  		names = substr(deviceList[i],pos);
//  		DebugN(\"cHc\",names);
//                  pos1 = strpos(name,\"RB\");
//                  switch(names[pos1+3])
//                  {
//                    case \"2\":
//                      
//                    
//                    }
//                  
//                  
//                  
//  		if (fwTree_isNode(names,exInfo)!=0)
//                    {
//  		   fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelHV\", 0);
//                     DebugN(\"we\",names,deviceList[i] );
//                    }
//  	}
//    
//    
//  	fwFsmTree_addNode(\"RPC_T\",deviceList[i] ,\"FwCaenChannelTemp\", 0);
//  	}
//  
//  DebugN(\"T ready\");
}

string getCU(string name)
{
 int type;
 string parent;
 parent =  fwCU_getParent(type,name);
 DebugN(parent,name);
  if(type==0)
    return getCU(parent);
  else
    return parent;
      
  
}
void InsertHV()
{dyn_string exInfo;

// Add HV

dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
//DebugN(deviceList);
int pos;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		DebugN(\"cHc\",names);
		if (fwTree_isNode(names,exInfo)!=0)
                  {
		  if (fwTree_isNode(deviceList[i],exInfo)==0) 
                  fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelHV\", 0);
                   DebugN(\"we\",names,deviceList[i] );
                  }
	}
}
DebugN(\"HV ready\");

}
void InsertLV()
{
  dyn_string deviceList=dpAliases(\"*/LV/*\",\"*\");
  dyn_string exInfo;
//DebugN(\"cc\",deviceList);
int len;
int pos;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		len = strlen(names);
		names = substr(names,0,len-4);
		DebugN(\"cc\",names);		
	        if (fwTree_isNode(names,exInfo)!=0)
                  {
		  if (fwTree_isNode(deviceList[i],exInfo)==0)
			fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLV\", 0);
              	}
                else if((strpos(names,\"RB3\")>-1)||(strpos(names,\"RB4\")>-1))
                {
                  strreplace(names,\"_LV\",\"plus_LV\");
                  if (fwTree_isNode(names,exInfo)!=0)
                    {
		    if (fwTree_isNode(deviceList[i],exInfo)==0)
                     {
			fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLV\", 0);
                        strreplace(names,\"plus\",\"minus\");
                        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                        DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
                        if(strpos(names,\"S04\")>-1)
                          {
                          strreplace(names,\"minus\",\"minusminus\");
                          fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                          strreplace(names,\"minusminus\",\"plusplus\");
                          fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                                             
                          }
                      }
              	    } 
                  
                }
	}
}

	DebugN(\"LV ready\");
  
  
  }
void InsertT()
{
dyn_string exInfo;
int pos,pos1;
string names;
//Add ADCTemp

dyn_string deviceList=dpAliases(\"*/T/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
{
 pos =strpos(deviceList[i],\"RPC_W\");
 if(pos>-1)
 {
   names = substr(deviceList[i],pos);
   DebugN(\"cHc\",names,names[pos1+2]);
   pos1 = strpos(names,\"RB\");
   
   switch(names[pos1+2])
   {
   case \"1\":
     if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //strreplace(names,\"plus\",\"minus\");
            //fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            DebugN(\"we\",names);
            }
          }  
         
    break;   
   case \"2\":
     strreplace(names,\"_T\",\"in_T\");
     if (fwTree_isNode(names,exInfo)!=0)
     {
	if (fwTree_isNode(deviceList[i],exInfo)==0)
        {
	fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        strreplace(names,\"in\",\"out\");
        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
        }
      }
     break;
    case \"3\":
      strreplace(names,\"_T\",\"plus_T\");
     if (fwTree_isNode(names,exInfo)!=0)
     {
	if (fwTree_isNode(deviceList[i],exInfo)==0)
        {
	fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        strreplace(names,\"plus\",\"minus\");
        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
        }
      }
     break;
     case \"4\":
       if((strpos(names,\"S11\")==-1)&&(strpos(names,\"S09\")==-1)&&(strpos(names,\"S10\")==-1)&&(strpos(names,\"S04\")==-1))
       {
        strreplace(names,\"_T\",\"plus_T\");
         if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            strreplace(names,\"plus\",\"minus\");
            fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          } 
           
        }
       else  if(strpos(names,\"S04\")!=-1)
         {
          if (fwTree_isNode(names,exInfo)!=0)
          {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            if(names[pos1+3]==\"p\")
            strreplace(names,\"plus\",\"plusplus\");
            else
              strreplace(names,\"minus\",\"minusminus\");
            fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          }          
         }
       else
       {
        if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //strreplace(names,\"plus\",\"minus\");
            //fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          }  
         
         }
       break;
     
   }
 }
}                
                 
     
 DebugN(\"T ready\");
  
  
  }
void InsertLBB()
{
dyn_string exInfo; 
dyn_string deviceList=dpAliases(\"*/LBB_LV/*\",\"*\"); 
 int pos,pos1;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		pos1 = strpos(names,\"LBB\");
		names = substr(names,0,pos1+3);
		//DebugN(\"cHc\",names);
		if (fwTree_isNode(deviceList[i],exInfo)==0)
		 fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLBBLV\", 0);
	}
}
DebugN(\"LBB ready\"); }
void InsertBoards()
{
   int pos,pos1;
string names;
  //Add Boards
  dyn_string exInfo;
dyn_string deviceList=dpAliases(\"*/Boards/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	pos =strpos(deviceList[i],\"_X\");
	if(pos>-1)
	{
	names = substr(deviceList[i],pos);
        DebugN(pos,deviceList[i][22],deviceList[i][pos-1]);
		//pos1 = strpos(names,\"LBB\");
		//names = substr(names,0,pos1+3);
	fwFsmTree_addNode(\"RPC_RB_BAL_W\"+deviceList[i][pos-2]+deviceList[i][pos-1]+\"_Boards\",deviceList[i] ,\"FwCaenBoardEasy\", 0);
	}
	}


DebugN(\"BOARDS ready\");
}
void InsertBcMaoCrate()
{
  //Add BC
 int pos,pos1;
string names;
dyn_string exInfo;
dyn_string deviceList=dpAliases(\"*/BCs/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	fwFsmTree_addNode(\"RPC_BCs\",deviceList[i] ,\"FwCaenBoardSY1527A1676\", 0);
	}
DebugN(\"BC ready\");
//Add MAO

dyn_string deviceList=dpAliases(\"*/MAO/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
        pos =strpos(deviceList[i],\"PC_\");
        names = substr(deviceList[i],pos-1);
        DebugN(\"ss\",names,deviceList);
        pos =strpos(names,\"_X\");
        names = substr(names,0,pos);
        DebugN(names,deviceList);
	fwFsmTree_addNode(names+\"_MAO\",deviceList[i] ,\"FwCaenChannelHV\", 0);
	}

DebugN(\"mao ready\");

//Add Crate
dyn_string deviceList=dpAliases(\"*/Crates/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	fwFsmTree_addNode(\"RPC_Crates\",deviceList[i] ,\"FwCaenCrateSY1527Basic\", 0);
	}

DebugN(\"crate ready\");
}

void SetAlarmDevice(){


float diff1,diff2,value;
dyn_string exceptionInfo,split,splitt;
string channelName,channel;

dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));

for (int i=1;i<=dynlen(deviceList);i++)
	{
	deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
	dpGet(deviceList[i]+\".readBackSettings.i0\", value);
	
	diff1=value*0.1;//primo limite al 10%
	diff2=value*0.2;//secondo limite al 20%
	
 	
///Set  Alarm channel for Imon

	channel= deviceList[i]+\".actual.iMon\";
	//DebugN(channel);
	dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\") ;
	dyn_float limits = makeDynFloat( value+diff1,value+diff2 ); 
	dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\");
 	string alertPanel; dyn_string alertPanelParameters; string alertHelp;
	
	fwAlertConfig_setAnalog(channel,alertTexts,limits, alertClasses,alertPanel,alertPanelParameters,
													alertHelp,exceptionInfo);
	fwAlertConfig_activate(channel,exceptionInfo);
	//DebugN(channel,exceptionInfo);												 
	}
}
SetDeviceConditionDB(){
// Ricorda che dovrebbe partire anche il manager ed essere settato
dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));

bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //Archive's name
int archiveType=3,count=1,value,l;
int smoothProcedure=4;//set old/new comparition 
float deadband=0;
float timeInterval=0; 
bool isActive; 
dyn_string exceptionInfo,channels;

for(int i=1;i<=dynlen(deviceList);i++)
{
fwArchive_configMultiple(deviceList[i]+\".actual.iMon\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
fwArchive_configMultiple(deviceList[i]+\".actual.vMon\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
}



}  
" 0
 E E E
30 7
"FRAME1"
""
1 48 247 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
4 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 1 0 0.601731601731602 -8 49.3722943722944 0 E 48 247 255 479
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 3 USC
30 8
"FRAME2"
""
1 48 247 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
6 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 1 0 0.588744588744589 250 55.580086580087 0 E 48 247 255 479
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 3 UXC
13 9
"PUSH_BUTTON1"
""
1 76 223 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 74 221 200 259

T 
1
LANG:1 12 Crea Logical
"main()
{
dyn_string exInfo,nodes;

// HV(numero canale, branch, crate, 1)
 completaHV(\"RPC_WP2_S01\",1,0,0,1);
 completaHV(\"RPC_WP2_S02\",9,0,0,1);
 completaHV(\"RPC_WP2_S03\",17,0,0,1);
 completaHV(\"RPC_WP2_S04\",25,0,0,1);
 completaHV(\"RPC_WP2_S05\",35,0,0,1);
 
 completaHV(\"RPC_WP2_S06\",1,1,2,1);
 completaHV(\"RPC_WP2_S07\",9,1,2,1);
 completaHV(\"RPC_WP2_S08\",17,1,2,1);
 completaHV(\"RPC_WP2_S09\",25,1,2,1);//Ricorda di aggiun
 completaHV(\"RPC_WP2_S10\",32,1,2,1);
 
 completaHV(\"RPC_WP2_S11\",1,0,1,1);
 completaHV(\"RPC_WP2_S12\",8,0,1,1);
 

 completaBoard(\"RPC_WP2_S1H02k\",0,0);
 completaBoard(\"RPC_WP2_S1H02q\",0,1);
 completaBoard(\"RPC_WP2_S1H02e\",1,2);
 
 
 completaMAO(\"RPC_WP2_X2N\",1,5);
 //completaMAO(\"RPC_WP2_X2F\",1,4);
 
 completaBC();
 
 completaCrate();

fwNode_initialize();

fwNode_createLogical(\"RPCBarrel\",\"\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);

fwNode_createLogical(\"HV\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"Crates\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"Boards\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"BCs\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
fwNode_createLogical(\"MAO\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);

}

void completaBC(){
dyn_string bc = dpNames(\"*\",\"FwCaenBoardSY1527A1676\");
dyn_string names = makeDynString(\"USC\",\"BAL_WP2\");
for (int i=1;i<=dynlen(bc);i++)
	{
	//dyn_string name = strsplit(sys[i],\"/\");
	dpSetAlias (bc[i]+\".\",\"RPCBarrel/BCs/RPC_BC0\"+i);
	}



}

void completaCrate(){

dyn_string sys = dpNames(\"*\",\"FwCaenCrateSY1527\");
for (int i=1;i<=dynlen(sys);i++)
	{
	//dyn_string name = strsplit(sys[i],\"/\");
	dpSetAlias (sys[i]+\".\",\"RPCBarrel/Crates/RPCSY1527Barrel\");
	}

}

void completaMAO(string name, int br, int cr) { 
dyn_string nodes,anodes,exInfo; 

dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/pow*\",\"FwCaenChannel\"); 
int j=1; 

for(int i=1;i<=dynlen(deviceList);i++) {
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/MAO/\"+name+\"MAOch0\"+i);
	j++;
	
	}
DebugN(\"Fine MAO\");
}


void completaBoard(string name, int br, int cr) { 
dyn_string nodes,anodes,exInfo; 
string nome;
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenBoardEasy\"); 
int j=1; 

// for(int i=1;i<=dynlen(deviceList);i++) {
// 	if(i==5)
// 		nome = \"_MAO\";
// 	else
// 		nome = \"_B0\"+i;		
// 	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
// 	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/Boards/\"+name+nome);
// 	j++;
// 	
// 	}
for(int i=1;i<=dynlen(deviceList);i++) {
	nome = \"_B0\"+i;		
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/Boards/\"+name+nome);
	j++;
	
	}
DebugN(\"Fine Board\");
}


void completaLVLBB(string name, int num,int br, int cr) { 
dyn_string nodes,anodes,exInfo; 
dyn_string cham=makeDynString(\"_LBB25_1\",\"_LBB33_1\",\"_LBB25_11\",\"_LBB33_11\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);

for (int i=1;i<=dynlen(cham);i++)
	{
	nodes[i]= name+cham[i]+\"_LV\";
	}
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\"); 
int j=num; 

for(int i=1;i<=dynlen(nodes);i++) {
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LBB_LV/\"+nodes[i]);
	j++;
	
	}
DebugN(\"Fine LBB\");
}





void completaHV(string name, int num,int br, int cr, int nHV) {


dyn_string nodes,anodes,exInfo;
dyn_string
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",     
\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);
if((strpos(name,\"S11\")>1)||(strpos(name,\"S09\")>1))
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4\",
                                \"_RB4minusminus\",\"_RB4plusplus\");
int dim = dynlen(cham)-2;
if(strpos(name,\"S04\")>1)
	dim = dynlen(cham);
	

for (int i=1;i<=dim;i++)
	{
	nodes[i]=name+cham[i]+\"_HV\";
	}

dyn_string
deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\");
dynAppend(deviceList,dpNames(\"*\"+br+\"/easyCrate\"+(cr+1)+\"/*\",\"FwCaenChannel\"));
int j = num;
for(int i=1;i<=dynlen(nodes);i++)
	{
	if(nHV == 1)
		{
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]);
		j++;
		}
	else if(nHV==2)
		{
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]+\"_UP\");
		j++;
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]+\"_DOWN\");
		j++;
		}
	//DebugN(re);
	}
DebugN(\"Fine HV\");
}

void completaLV(string name, int num,int br, int cr) { dyn_string
nodes,anodes,exInfo; dyn_string
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3\",\"_RB3\",\"_RB4\",
                                \"_RB4\",\"_RB4minusminus\",\"_RB4plusplus\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);

for (int i=1;i<=(dynlen(cham)-2);i++)
{
nodes[i]= name+cham[i]+\"_LV\";
}
dyn_string
deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\");
int j=num;
for(int i=1;i<=dynlen(nodes);i++)
{
if(i!=6&&i!=8)
{
//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+nodes[i]+\"_ANA\");
j++;
//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"2\");
dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+nodes[i]+\"_DIG\");
j++;
}
//DebugN(re);
}
DebugN(\"Fine LV\");
}
void completaT(string name, int num,int br, int cr, int tot)
{

dyn_string cham=makeDynString(\"_RB1in_T\",\"_RB1out_T\",\"_RB2_T\",\"_RB3_T\",\"_RB4minus_T\",\"_RB4plus_T\");
if(tot== 5)
	cham[5]=\"_RB4_T\";
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannelADC\");
int j = num;
DebugN(dynlen(deviceList));
 for(int i = tot;i>=1;i--)
 	{
 	DebugN(\"RPCBarrel/T/\"+name+cham[i]);
 	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/T/\"+name+cham[i]);
 	j++;
 	}
DebugN(\"Fine T\");
}
" 0
 E E E
13 10
"PUSH_BUTTON2"
""
1 334 224 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 332 222 458 260

T 
1
LANG:1 12 Crea Logical
"main()
{
dyn_string exInfo;

/* Il +1s10 
*/
// HV(numero canale, branch, crate, 1)

 completaLV(\"RPC_WP2_S01\",1,0,3);
 completaLV(\"RPC_WP2_S02\",13,0,3);
 completaLV(\"RPC_WP2_S03\",25,0,3);
 completaLV(\"RPC_WP2_S04\",37,0,3);
 completaLV(\"RPC_WP2_S05\",49,0,3);
 
 completaLV(\"RPC_WP2_S06\",1,0,2);
 completaLV(\"RPC_WP2_S07\",13,0,2);
 
 completaLV(\"RPC_WP2_S08\",1,1,1);
 completaLV(\"RPC_WP2_S09\",13,1,1);
 completaLV(\"RPC_WP2_S10\",25,1,1);
 completaLV(\"RPC_WP2_S11\",37,1,1);
 completaLV(\"RPC_WP2_S12\",49,1,1);
 
 
 completaLVLBB(\"RPC_WP2_S01\",1,1,4);
 completaLVLBB(\"RPC_WP2_S02\",5,1,4);
 completaLVLBB(\"RPC_WP2_S03\",9,1,4);
 completaLVLBB(\"RPC_WP2_S10\",13,1,4);
 completaLVLBB(\"RPC_WP2_S11\",17,1,4);
 completaLVLBB(\"RPC_WP2_S12\",21,1,4);
 
 completaLVLBB(\"RPC_WP2_S04\",25,1,4);
 completaLVLBB(\"RPC_WP2_S05\",29,1,4);
 completaLVLBB(\"RPC_WP2_S06\",33,1,4);
 completaLVLBB(\"RPC_WP2_S07\",37,1,4);
 completaLVLBB(\"RPC_WP2_S08\",41,1,4);
 completaLVLBB(\"RPC_WP2_S09\",45,1,4);



//completaT(\"RPC_WP1_S10\",32,1,0,6);//2 LV + 1 pl = 30ch.

completaT(\"RPC_WP2_S01\",1,1,0,5);
completaT(\"RPC_WP2_S02\",6,1,0,5);
completaT(\"RPC_WP2_S03\",11,1,0,5);
completaT(\"RPC_WP2_S10\",16,1,0,6);
completaT(\"RPC_WP2_S11\",22,1,0,5);
completaT(\"RPC_WP2_S12\",27,1,0,5);
completaT(\"RPC_WP2_S04\",32,1,0,6);
completaT(\"RPC_WP2_S05\",38,1,0,5);
completaT(\"RPC_WP2_S06\",43,1,0,5);
completaT(\"RPC_WP2_S07\",48,1,0,5);
completaT(\"RPC_WP2_S08\",53,1,0,5);
completaT(\"RPC_WP2_S09\",58,1,0,5);



 completaBoard(\"RPC_WP2_X1N\",0,2);
 completaBoard(\"RPC_WP2_X2N\",0,3);
 completaBoard(\"RPC_WP2_X3N\",1,0);
 completaBoard(\"RPC_WP2_X1F\",1,1);
 completaBoard(\"RPC_WP2_X2F\",1,4);
// completaBoard(\"RPC_WP2_X3F\",1,5);
 
 
 completaMAO(\"RPC_WP2_X2N\",1,5);
 //completaMAO(\"RPC_WP2_X2F\",1,4);
 
 completaBC();
 
 completaCrate();

fwNode_initialize();
// 
 fwNode_createLogical(\"RPCBarrel\",\"\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"1\",exInfo);
 fwNode_createLogical(\"LV\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
//DebugN(\"2\",exInfo);
fwNode_createLogical(\"LBB_LV\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
//DebugN(\"3\",exInfo);
 fwNode_createLogical(\"Crates\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"4\",exInfo);
 fwNode_createLogical(\"T\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"5\",exInfo);
 fwNode_createLogical(\"Boards\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"6\",exInfo);
 fwNode_createLogical(\"BCs\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"7\",exInfo);
 fwNode_createLogical(\"MAO\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"8\",exInfo);

}

void completaBC(){
dyn_string bc = dpNames(\"*\",\"FwCaenBoardSY1527A1676\");
dyn_string names = makeDynString(\"SCX\",\"BAL_WP2\");
for (int i=1;i<=dynlen(names);i++)
	{
	//dyn_string name = strsplit(sys[i],\"/\");
	dpSetAlias (bc[i]+\".\",\"RPCBarrel/BCs/RPC_\"+names[i]+\"_BC\");
	}



}

void completaCrate(){

dyn_string sys = dpNames(\"*\",\"FwCaenCrateSY1527\");
for (int i=1;i<=dynlen(sys);i++)
	{
	//dyn_string name = strsplit(sys[i],\"/\");
	dpSetAlias (sys[i]+\".\",\"RPCBarrel/Crates/RPCSY1527Barrel\");
	}

}

void completaMAO(string name, int br, int cr) { 
dyn_string nodes,anodes,exInfo; 

dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/pow*\",\"FwCaenChannel\"); 
int j=1; 

for(int i=1;i<=dynlen(deviceList);i++) {
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/MAO/\"+name+\"MAOch0\"+i);
	j++;
	
	}
DebugN(\"Fine MAO\");
}


void completaBoard(string name, int br, int cr) { 
dyn_string nodes,anodes,exInfo; 
string nome;
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenBoardEasy\"); 
int j=1; 

for(int i=1;i<=dynlen(deviceList);i++) {
	if(i==5)
		nome = \"_MAO\";
	else
		nome = \"_B0\"+i;		
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/Boards/\"+name+nome);
	j++;
	
	}
DebugN(\"Fine Board\");
}


void completaLVLBB(string name, int num,int br, int cr) { 
dyn_string nodes,anodes,exInfo; 
dyn_string cham=makeDynString(\"_LBB25_1\",\"_LBB33_1\",\"_LBB25_11\",\"_LBB33_11\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);

for (int i=1;i<=dynlen(cham);i++)
	{
	nodes[i]= name+cham[i]+\"_LV\";
	}
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\"); 
int j=num; 

for(int i=1;i<=dynlen(nodes);i++) {
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LBB_LV/\"+nodes[i]);
	j++;
	
	}
DebugN(\"Fine LBB\");
}





void completaHV(string name, int num,int br, int cr, int nHV) {


dyn_string nodes,anodes,exInfo;
dyn_string
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",     
\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);
if((strpos(name,\"S11\")>1)||(strpos(name,\"S09\")>1))
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4\",
                                \"_RB4minusminus\",\"_RB4plusplus\");
int dim = dynlen(cham)-2;
if(strpos(name,\"S04\")>1)
	dim = dynlen(cham);
	

for (int i=1;i<=dim;i++)
	{
	nodes[i]=name+cham[i]+\"_HV\";
	}

dyn_string
deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\");
dynAppend(deviceList,dpNames(\"*\"+br+\"/easyCrate\"+(cr+1)+\"/*\",\"FwCaenChannel\"));
int j = num;
for(int i=1;i<=dynlen(nodes);i++)
	{
	if(nHV == 1)
		{
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]);
		j++;
		}
	else if(nHV==2)
		{
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]+\"_UP\");
		j++;
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]+\"_DOWN\");
		j++;
		}
	//DebugN(re);
	}
DebugN(\"Fine HV\");
}

void completaLV(string name, int num,int br, int cr) { dyn_string
nodes,anodes,exInfo; dyn_string
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3\",\"_RB3\",\"_RB4\",
                                \"_RB4\",\"_RB4minusminus\",\"_RB4plusplus\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);

for (int i=1;i<=(dynlen(cham)-2);i++)
{
nodes[i]= name+cham[i]+\"_LV\";
}
dyn_string
deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\");
int j=num;
for(int i=1;i<=dynlen(nodes);i++)
{
if(i!=6&&i!=8)
{
//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+nodes[i]+\"_ANA\");
j++;
//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"2\");
dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+nodes[i]+\"_DIG\");
j++;
}
//DebugN(re);
}
DebugN(\"Fine LV\");
}
void completaT(string name, int num,int br, int cr, int tot)
{

dyn_string cham=makeDynString(\"_RB1in_T\",\"_RB1out_T\",\"_RB2_T\",\"_RB3_T\",\"_RB4minus_T\",\"_RB4plus_T\");
if(tot== 5)
	cham[5]=\"_RB4_T\";
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannelADC\");
int j = num;
DebugN(dynlen(deviceList));
 for(int i = tot;i>=1;i--)
 	{
 	DebugN(\"RPCBarrel/T/\"+name+cham[i]);
 	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/T/\"+name+cham[i]);
 	j++;
 	}
DebugN(\"Fine T\");
}
" 0
 E E E
13 11
"PUSH_BUTTON3"
""
1 78 279 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 76 277 198 325

T 
1
LANG:1 8 Crea FSM
"main()
{
DebugN(\"START\");
//Start Database Connection and recive hardware and Logical schema

//ConfigurationDBRecive();


// Generate the FSM Device Tree
generateTreeforDevice();

// Insert the device node using hardware created
// 
// InsertLV();
 InsertHV();
// InsertT(); 
// InsertLBB(); 
InsertBoards(); 
InsertBcMaoCrate(); 
// Set Alarm for devices
// SetAlarmDevice();

DebugN(\"FINE\");

// Set archive for devices
// SetDeviceConditionDB();

}
void ConfigurationDBRecive()
{
dyn_string exceptionInfo,
            hierarchyType=makeDynString(fwDevice_HARDWARE, fwDevice_LOGICAL);
dyn_dyn_mixed recipeObject;
dyn_string list;
dyn_string topDevice=makeDynString(getSystemName()+\"CAEN\",\"\");
dyn_string recipeName=makeDynString(\"HW030506\",\"LW030506\");
string g_system;

//check if the connection is properly initialized
fwConfigurationDB_checkInit(exceptionInfo);
if (fwConfigurationDB_handleErrors(exceptionInfo)) return;  
dyn_string tmp=strsplit(getSystemName(),\":\");
//download hierarchy from ConfigDB
//first hardware then logical
for(int i=1;i<=2;i++)
	{
	
	if (dynlen(tmp)>1) {
		// means: we have system name embedded
		g_system=tmp[1]+\":\";
	} else {
		// we have no system name...
		if (hierarchyType[i]==fwDevice_LOGICAL)
			g_system=\"\";
		else
			g_system=getSystemName();
	}
	
	
	DebugN(i+\"++++++++++++++++++++++++++\");
	fwConfigurationDB_openProgressDialog(
	makeDynInt(	fwConfigurationDB_OPER_LoadHierachyFromDB,
			fwConfigurationDB_OPER_ApplyHierarchyToSystem),
	makeDynString(	\"Loading Hierarchy from DB\",
			\"Updating hierarchy in system\"));

	fwConfigurationDB_updateDeviceHierarchyFromDB(topDevice[i],hierarchyType[i],exceptionInfo,g_system);
	if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
	DebugN(\"Hierarchy created\");
	fwConfigurationDB_getRecipeFromDB (\"\",list, hierarchyType[i],recipeName[i],  
																			recipeObject,exceptionInfo);
	if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
	DebugN(\"Recipe download created\");
	
	fwConfigurationDB_ApplyRecipe( recipeObject, hierarchyType,exceptionInfo); 
  if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
  DebugN(\"Recipe Applied created\");

	  
	}

//get recipe from ConfigBD and copy it to cache
/*
fwConfigurationDB_getHierarchyFromPVSS(HvRootNode, fwDevice_LOGICAL,  
 																					HvDeviceList,exceptionInfo,\"\",FALSE);  
fwConfigurationDB_getHierarchyFromPVSS(LvRootNode, fwDevice_LOGICAL,  
 																					LvDeviceList,exceptionInfo,\"\",FALSE); 
dynAppend(deviceList,HvDeviceList);
dynAppend(deviceList,LvDeviceList); 	
																		
if (fwConfigurationDB_handleErrors(exceptionInfo)) return;  
	for(int i=1;i<=3;i++)
	{
	if(i==3)list=deviceList;
	else list=HvDeviceList;
	
	fwConfigurationDB_getRecipeFromDB (\"\",list, fwDevice_LOGICAL,recipeName[i],  
																			recipeObject,exceptionInfo);
	fwConfigurationDB_storeRecipeInCache(recipeObject,recipeName[i],fwDevice_LOGICAL,exceptionInfo);
	if (fwConfigurationDB_handleErrors(exceptionInfo)) return;   
	}
*/	
}


void generateTreeforDevice()
{
dyn_string nodes, exInfo;
string chamber_node,ring_node,disc_node, top_node;
int chamberNum;

dyn_string discs=makeDynString(\"_WM2\",\"_WM1\",\"_W00\",\"_WP1\",\"_WP2\");
dyn_string rings=makeDynString(\"_S01\",\"_S02\",\"_S03\",\"_S04\",\"_S05\",\"_S06\",\"_S07\",
				\"_S08\",\"_S09\",\"_S10\",\"_S11\",\"_S12\");
dyn_string cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",
				\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//remove top node if already exists (all children are removed too)
//fwFsmTree_removeNode(\"CMS_RPC\",\"RPC_BARREL\");
//create top node (type DCSNode)
fwTree_getRootNodes(nodes,exInfo);
//DebugN(nodes, exInfo);
if(!fwFsmTree_isNode(\"RPC_BARREL_HW\"))
top_node=fwFsmTree_addNode(\"FSM\",\"RPC_BARREL_HW\",\"RPC_Device\",1);
if(fwFsmTree_isNode(\"RPC_HV\"))
  fwFsmTree_removeNode(\"RPC_BARREL_HW\",\"RPC_HV\");
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_HV\",\"RPC_Device\",0);

if(!fwFsmTree_isNode(\"RPC_Boards\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_Boards\",\"RPC_Device\",0);
if(!fwFsmTree_isNode(\"RPC_BCs\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_BCs\",\"RPC_BC\",0);
if(!fwFsmTree_isNode(\"RPC_MAO\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_MAO\",\"RPC_Device\",0);
if(!fwFsmTree_isNode(\"RPC_Crates\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_Crates\",\"RPC_SY1527\",0);
fwTree_getRootNodes(nodes, exInfo);

//add list of children CU (type DiscNode)

for(int i=1; i<=dynlen(discs);i++)
	{
	//disc_node=fwFsmTree_addNode(top_node,\"RPC\"+discs[i],\"WheelNode\",1);
	if(i==5)
	{
	//add list of children CU(type RingNode)
        //chamber_node=fwFsmTree_addNode(\"RPC_MAO\",\"RPC\"+discs[i]+\"_MAO\",\"RPC_MAO\",0);
	//chamber_node=fwFsmTree_addNode(\"RPC_Boards\",\"RPC_RB_BAL\"+discs[i]+\"_Boards\",\"RPC_Boards\",0);
          if(fwFsmTree_isNode(\"RPC_RB_USC_S1H0\"+(i+1)+discs[i]+\"_Bd\"))
            fwFsmTree_removeNode(\"RPC_Boards\",\"RPC_RB_USC_S1H0\"+(7-i)+discs[i]+\"_Bd\");
	chamber_node=fwFsmTree_addNode(\"RPC_Boards\",\"RPC_RB_USC\"+discs[i]+\"_S1H0\"+(7-i)+\"_Bd\",\"RPC_Boards\",0);
	for(int j=1;j<=dynlen(rings);j++)
		{
		//ring_node=fwFsmTree_addNode(disc_node,\"RPC\"+discs[i]+rings[j],\"SectorNode\",1);
		
		//add list of children CU (type ChamberNode)
		if(j==4) 
			chamberNum=10;
		else if(j==9||j==11)
			{
			chamberNum=7;
			cham[7]=\"_RB4\";
			}
		else
			{
			chamberNum=8;
			cham[7]=\"_RB4minus\";
			}
			
		//chamber_node=fwFsmTree_addNode(\"RPC_LBB\",\"RPC\"+discs[i]+rings[j]+\"_LBB\",\"RPC_LBBLV\",0);	
		for(int k=1;k<=chamberNum;k++)
			{
			//chamber_node=fwFsmTree_addNode(\"RPC_T\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_T\",\"RPC_T\",0);
			chamber_node=fwFsmTree_addNode(\"RPC_HV\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_HV\",\"RPC_HV\",0);
			//chamber_node=fwFsmTree_addNode(\"RPC_LV\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_LV\",\"RPC_LV\",0);
			
			}
		}
	}
	}
	

DebugN(\"Structure ready\");
//generate and refresh tree
fwFsmTree_generateAll();
//fwFsmTree_refreshTree();
}


string getCU(string name)
{
 int type;
 string parent;
 parent =  fwCU_getParent(type,name);
 DebugN(parent,name);
  if(type==0)
    return getCU(parent);
  else
    return parent;
      
  
}
void InsertHV()
{dyn_string exInfo;

// Add HV

dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
//DebugN(deviceList);
int pos;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		//DebugN(\"cHc\",names);
		if (fwTree_isNode(names,exInfo)!=0)
                  {
		  if (fwTree_isNode(deviceList[i],exInfo)==0) 
                  fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelHV\", 0);
                   DebugN(\"we\",names,deviceList[i] );
                  }
	}
}
DebugN(\"HV ready\");

}
void InsertLV()
{
  dyn_string deviceList=dpAliases(\"*/LV/*\",\"*\");
  dyn_string exInfo;
//DebugN(\"cc\",deviceList);
int len;
int pos;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		len = strlen(names);
		names = substr(names,0,len-4);
		DebugN(\"cc\",names);		
	        if (fwTree_isNode(names,exInfo)!=0)
                  {
		  if (fwTree_isNode(deviceList[i],exInfo)==0)
			fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLV\", 0);
              	}
                else if((strpos(names,\"RB3\")>-1)||(strpos(names,\"RB4\")>-1))
                {
                  strreplace(names,\"_LV\",\"plus_LV\");
                  if (fwTree_isNode(names,exInfo)!=0)
                    {
		    if (fwTree_isNode(deviceList[i],exInfo)==0)
                     {
			fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLV\", 0);
                        strreplace(names,\"plus\",\"minus\");
                        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                        DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
                        if(strpos(names,\"S04\")>-1)
                          {
                          strreplace(names,\"minus\",\"minusminus\");
                          fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                          strreplace(names,\"minusminus\",\"plusplus\");
                          fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                                             
                          }
                      }
              	    } 
                  
                }
	}
}

	DebugN(\"LV ready\");
  
  
  }
void InsertT()
{
dyn_string exInfo;
int pos,pos1;
string names;
//Add ADCTemp

dyn_string deviceList=dpAliases(\"*/T/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
{
 pos =strpos(deviceList[i],\"RPC_W\");
 if(pos>-1)
 {
   names = substr(deviceList[i],pos);
   DebugN(\"cHc\",names,names[pos1+2]);
   pos1 = strpos(names,\"RB\");
   
   switch(names[pos1+2])
   {
   case \"1\":
     if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //strreplace(names,\"plus\",\"minus\");
            //fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            DebugN(\"we\",names);
            }
          }  
         
    break;   
   case \"2\":
     strreplace(names,\"_T\",\"in_T\");
     if (fwTree_isNode(names,exInfo)!=0)
     {
	if (fwTree_isNode(deviceList[i],exInfo)==0)
        {
	fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        strreplace(names,\"in\",\"out\");
        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
        }
      }
     break;
    case \"3\":
      strreplace(names,\"_T\",\"plus_T\");
     if (fwTree_isNode(names,exInfo)!=0)
     {
	if (fwTree_isNode(deviceList[i],exInfo)==0)
        {
	fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        strreplace(names,\"plus\",\"minus\");
        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
        }
      }
     break;
     case \"4\":
       if((strpos(names,\"S11\")==-1)&&(strpos(names,\"S09\")==-1)&&(strpos(names,\"S10\")==-1)&&(strpos(names,\"S04\")==-1))
       {
        strreplace(names,\"_T\",\"plus_T\");
         if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            strreplace(names,\"plus\",\"minus\");
            fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          } 
           
        }
       else  if(strpos(names,\"S04\")!=-1)
         {
          if (fwTree_isNode(names,exInfo)!=0)
          {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            if(names[pos1+3]==\"p\")
            strreplace(names,\"plus\",\"plusplus\");
            else
              strreplace(names,\"minus\",\"minusminus\");
            fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          }          
         }
       else
       {
        if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //strreplace(names,\"plus\",\"minus\");
            //fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          }  
         
         }
       break;
     
   }
 }
}                
                 
     
 DebugN(\"T ready\");
  
  
  }
void InsertLBB()
{
dyn_string exInfo; 
dyn_string deviceList=dpAliases(\"*/LBB_LV/*\",\"*\"); 
 int pos,pos1;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		pos1 = strpos(names,\"LBB\");
		names = substr(names,0,pos1+3);
		//DebugN(\"cHc\",names);
		if (fwTree_isNode(deviceList[i],exInfo)==0)
		 fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLBBLV\", 0);
	}
}
DebugN(\"LBB ready\"); }
void InsertBoards()
{
   int pos,pos1;
string names;
  //Add Boards
  dyn_string exInfo;
dyn_string deviceList=dpAliases(\"*/Boards/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	pos =strpos(deviceList[i],\"_S1H\");
	if(pos>-1)
	{
	names = substr(deviceList[i],pos-3,9);
        DebugN(\"RPC_RB_USC_\"+names+\"_Bd\",deviceList[i] );
		//pos1 = strpos(names,\"LBB\");
		//names = substr(names,0,pos1+3);
	fwFsmTree_addNode(\"RPC_RB_USC_\"+names+\"_Bd\",deviceList[i] ,\"FwCaenBoardEasy\", 0);
	}
	}


DebugN(\"BOARDS ready\");
}
void InsertBcMaoCrate()
{
  //Add BC
 int pos,pos1;
string names;
dyn_string exInfo;
dyn_string deviceList=dpAliases(\"*/BCs/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	fwFsmTree_addNode(\"RPC_BCs\",deviceList[i] ,\"FwCaenBoardSY1527A1676\", 0);
	}
DebugN(\"BC ready\");
//Add MAO

dyn_string deviceList=dpAliases(\"*/MAO/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
        pos =strpos(deviceList[i],\"PC_\");
        names = substr(deviceList[i],pos-1);
        DebugN(\"ss\",names,deviceList);
        pos =strpos(names,\"_X\");
        names = substr(names,0,pos);
        DebugN(names,deviceList);
	fwFsmTree_addNode(names+\"_MAO\",deviceList[i] ,\"FwCaenChannelHV\", 0);
	}

DebugN(\"mao ready\");

//Add Crate
dyn_string deviceList=dpAliases(\"*/Crates/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	fwFsmTree_addNode(\"RPC_Crates\",deviceList[i] ,\"FwCaenCrateSY1527Basic\", 0);
	}

DebugN(\"crate ready\");
}

void SetAlarmDevice(){


float diff1,diff2,value;
dyn_string exceptionInfo,split,splitt;
string channelName,channel;

dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));

for (int i=1;i<=dynlen(deviceList);i++)
	{
	deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
	dpGet(deviceList[i]+\".readBackSettings.i0\", value);
	
	diff1=value*0.1;//primo limite al 10%
	diff2=value*0.2;//secondo limite al 20%
	
 	
///Set  Alarm channel for Imon

	channel= deviceList[i]+\".actual.iMon\";
	//DebugN(channel);
	dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\") ;
	dyn_float limits = makeDynFloat( value+diff1,value+diff2 ); 
	dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\");
 	string alertPanel; dyn_string alertPanelParameters; string alertHelp;
	
	fwAlertConfig_setAnalog(channel,alertTexts,limits, alertClasses,alertPanel,alertPanelParameters,
													alertHelp,exceptionInfo);
	fwAlertConfig_activate(channel,exceptionInfo);
	//DebugN(channel,exceptionInfo);												 
	}
}
SetDeviceConditionDB(){
// Ricorda che dovrebbe partire anche il manager ed essere settato
dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));

bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //Archive's name
int archiveType=3,count=1,value,l;
int smoothProcedure=4;//set old/new comparition 
float deadband=0;
float timeInterval=0; 
bool isActive; 
dyn_string exceptionInfo,channels;

for(int i=1;i<=dynlen(deviceList);i++)
{
fwArchive_configMultiple(deviceList[i]+\".actual.iMon\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
fwArchive_configMultiple(deviceList[i]+\".actual.vMon\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
}



}  
" 0
 E E E
13 12
"PUSH_BUTTON4"
""
1 334 277 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
14 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 332 275 454 323

T 
1
LANG:1 8 Crea FSM
"main()
{
DebugN(\"START\");
//Start Database Connection and recive hardware and Logical schema

//ConfigurationDBRecive();


// Generate the FSM Device Tree
generateTreeforDevice();

// Insert the device node using hardware created
// 
  InsertLV();
 
  InsertT(); 
  InsertLBB(); 
  InsertBoards(); 
InsertBcMaoCrate(); 
// Set Alarm for devices
// SetAlarmDevice();

DebugN(\"FINE\");
// Set archive for devices
// SetDeviceConditionDB();

}
void ConfigurationDBRecive()
{
dyn_string exceptionInfo,
            hierarchyType=makeDynString(fwDevice_HARDWARE, fwDevice_LOGICAL);
dyn_dyn_mixed recipeObject;
dyn_string list;
dyn_string topDevice=makeDynString(getSystemName()+\"CAEN\",\"\");
dyn_string recipeName=makeDynString(\"HW030506\",\"LW030506\");
string g_system;

//check if the connection is properly initialized
fwConfigurationDB_checkInit(exceptionInfo);
if (fwConfigurationDB_handleErrors(exceptionInfo)) return;  
dyn_string tmp=strsplit(getSystemName(),\":\");
//download hierarchy from ConfigDB
//first hardware then logical
for(int i=1;i<=2;i++)
	{
	
	if (dynlen(tmp)>1) {
		// means: we have system name embedded
		g_system=tmp[1]+\":\";
	} else {
		// we have no system name...
		if (hierarchyType[i]==fwDevice_LOGICAL)
			g_system=\"\";
		else
			g_system=getSystemName();
	}
	
	
	//DebugN(i+\"++++++++++++++++++++++++++\");
	fwConfigurationDB_openProgressDialog(
	makeDynInt(	fwConfigurationDB_OPER_LoadHierachyFromDB,
			fwConfigurationDB_OPER_ApplyHierarchyToSystem),
	makeDynString(	\"Loading Hierarchy from DB\",
			\"Updating hierarchy in system\"));

	fwConfigurationDB_updateDeviceHierarchyFromDB(topDevice[i],hierarchyType[i],exceptionInfo,g_system);
	if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
	DebugN(\"Hierarchy created\");
	fwConfigurationDB_getRecipeFromDB (\"\",list, hierarchyType[i],recipeName[i],  
																			recipeObject,exceptionInfo);
	if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
	DebugN(\"Recipe download created\");
	
	fwConfigurationDB_ApplyRecipe( recipeObject, hierarchyType,exceptionInfo); 
  if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
  DebugN(\"Recipe Applied created\");

	  
	}

//get recipe from ConfigBD and copy it to cache
/*
fwConfigurationDB_getHierarchyFromPVSS(HvRootNode, fwDevice_LOGICAL,  
 																					HvDeviceList,exceptionInfo,\"\",FALSE);  
fwConfigurationDB_getHierarchyFromPVSS(LvRootNode, fwDevice_LOGICAL,  
 																					LvDeviceList,exceptionInfo,\"\",FALSE); 
dynAppend(deviceList,HvDeviceList);
dynAppend(deviceList,LvDeviceList); 	
																		
if (fwConfigurationDB_handleErrors(exceptionInfo)) return;  
	for(int i=1;i<=3;i++)
	{
	if(i==3)list=deviceList;
	else list=HvDeviceList;
	
	fwConfigurationDB_getRecipeFromDB (\"\",list, fwDevice_LOGICAL,recipeName[i],  
																			recipeObject,exceptionInfo);
	fwConfigurationDB_storeRecipeInCache(recipeObject,recipeName[i],fwDevice_LOGICAL,exceptionInfo);
	if (fwConfigurationDB_handleErrors(exceptionInfo)) return;   
	}
*/	
}


void generateTreeforDevice()
{
dyn_string nodes, exInfo;
string chamber_node,ring_node,disc_node, top_node;
int chamberNum;

dyn_string discs=makeDynString(\"_WM2\",\"_WM1\",\"_W00\",\"_WP1\",\"_WP2\");
dyn_string rings=makeDynString(\"_S01\",\"_S02\",\"_S03\",\"_S04\",\"_S05\",\"_S06\",\"_S07\",
				\"_S08\",\"_S09\",\"_S10\",\"_S11\",\"_S12\");
dyn_string cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",
				\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//remove top node if already exists (all children are removed too)
//fwFsmTree_removeNode(\"CMS_RPC\",\"RPC_BARREL\");
//create top node (type DCSNode)
fwTree_getRootNodes(nodes,exInfo);
//DebugN(nodes, exInfo);
top_node=fwFsmTree_addNode(\"FSM\",\"RPC_BARREL_HW\",\"RPC_Device\",1);
if(fwFsmTree_isNode(\"RPC_LV\"))
  fwFsmTree_removeNode(\"RPC_BARREL_HW\",\"RPC_LV\");
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_LV\",\"RPC_Device\",0);
if(fwFsmTree_isNode(\"RPC_LBB\"))
  fwFsmTree_removeNode(\"RPC_BARREL_HW\",\"RPC_LBB\");
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_LBB\",\"RPC_Device\",0);
if(fwFsmTree_isNode(\"RPC_T\"))
  fwFsmTree_removeNode(\"RPC_BARREL_HW\",\"RPC_T\");
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_T\",\"RPC_T\",0);
if(!fwFsmTree_isNode(\"RPC_Boards\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_Boards\",\"RPC_Device\",0);
if(!fwFsmTree_isNode(\"RPC_BCs\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_BCs\",\"RPC_BC\",0);
if(!fwFsmTree_isNode(\"RPC_MAO\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_MAO\",\"RPC_Device\",0);
if(!fwFsmTree_isNode(\"RPC_Crates\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_Crates\",\"RPC_SY1527\",0);
fwTree_getRootNodes(nodes, exInfo);

//add list of children CU (type DiscNode)

for(int i=1; i<=dynlen(discs);i++)
	{
	//disc_node=fwFsmTree_addNode(top_node,\"RPC\"+discs[i],\"WheelNode\",1);
	if(i==5)
	{
	//add list of children CU(type RingNode)
        chamber_node=fwFsmTree_addNode(\"RPC_MAO\",\"RPC\"+discs[i]+\"_MAO\",\"RPC_MAO\",0);
	chamber_node=fwFsmTree_addNode(\"RPC_Boards\",\"RPC_RB_UXC\"+discs[i]+\"_Bd\",\"RPC_Boards\",0);
	//chamber_node=fwFsmTree_addNode(\"RPC_Boards\",\"RPC_RB_SCX\"+discs[i]+\"_Boards\",\"RPC_Boards\",0);
	for(int j=1;j<=dynlen(rings);j++)
		{
		//ring_node=fwFsmTree_addNode(disc_node,\"RPC\"+discs[i]+rings[j],\"SectorNode\",1);
		
		//add list of children CU (type ChamberNode)
		if(j==4) 
			chamberNum=10;
		else if(j==9||j==11)
			{
			chamberNum=7;
			cham[7]=\"_RB4\";
			}
		else
			{
			chamberNum=8;
			cham[7]=\"_RB4minus\";
			}
			
		chamber_node=fwFsmTree_addNode(\"RPC_LBB\",\"RPC\"+discs[i]+rings[j]+\"_LBB\",\"RPC_LBBLV\",0);	
		for(int k=1;k<=chamberNum;k++)
			{
			chamber_node=fwFsmTree_addNode(\"RPC_T\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_T\",\"RPC_T\",0);
			//chamber_node=fwFsmTree_addNode(\"RPC_HV\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_HV\",\"RPC_HV\",0);
			chamber_node=fwFsmTree_addNode(\"RPC_LV\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_LV\",\"RPC_LV\",0);
			
			}
		}
	}
	}
	

DebugN(\"Structure ready\");
//generate and refresh tree
fwFsmTree_generateAll();
//fwFsmTree_refreshTree();
}

void InsertDeviceInFSMe()
{
dyn_string exInfo;
int pos;
string names;

//Add Temp

//  dyn_string deviceList=dpAliases(\"*/T/*\",\"*\");
//  for(int i=1;i<=dynlen(deviceList);i++)
//  	{
//          pos =strpos(deviceList[i],\"RPC_W\");
//  	if(pos>-1)
//  	{
//  		names = substr(deviceList[i],pos);
//  		DebugN(\"cHc\",names);
//                  pos1 = strpos(name,\"RB\");
//                  switch(names[pos1+3])
//                  {
//                    case \"2\":
//                      
//                    
//                    }
//                  
//                  
//                  
//  		if (fwTree_isNode(names,exInfo)!=0)
//                    {
//  		   fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelHV\", 0);
//                     DebugN(\"we\",names,deviceList[i] );
//                    }
//  	}
//    
//    
//  	fwFsmTree_addNode(\"RPC_T\",deviceList[i] ,\"FwCaenChannelTemp\", 0);
//  	}
//  
//  DebugN(\"T ready\");
}

string getCU(string name)
{
 int type;
 string parent;
 parent =  fwCU_getParent(type,name);
 //DebugN(parent,name);
  if(type==0)
    return getCU(parent);
  else
    return parent;
      
  
}
void InsertHV()
{dyn_string exInfo;

// Add HV

dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
//DebugN(deviceList);
int pos;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		//DebugN(\"cHc\",names);
		if (fwTree_isNode(names,exInfo)!=0)
                  {
		  if (fwTree_isNode(deviceList[i],exInfo)==0) 
                  fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelHV\", 0);
                   //DebugN(\"we\",names,deviceList[i] );
                  }
	}
}
DebugN(\"HV ready\");

}
void InsertLV()
{
  dyn_string deviceList=dpAliases(\"*/LV/*\",\"*\");
  dyn_string exInfo;
//DebugN(\"cc\",deviceList);
int len;
int pos;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		len = strlen(names);
		names = substr(names,0,len-4);
		//DebugN(\"cc\",names);		
	        if (fwTree_isNode(names,exInfo)!=0)
                  {
		  if (fwTree_isNode(deviceList[i],exInfo)==0)
			fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLV\", 0);
              	}
                else if((strpos(names,\"RB3\")>-1)||(strpos(names,\"RB4\")>-1))
                {
                  strreplace(names,\"_LV\",\"plus_LV\");
                  if (fwTree_isNode(names,exInfo)!=0)
                    {
		    if (fwTree_isNode(deviceList[i],exInfo)==0)
                     {
			fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLV\", 0);
                        strreplace(names,\"plus\",\"minus\");
                        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                        //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
                        if(strpos(names,\"S04\")>-1)
                          {
                          strreplace(names,\"minus\",\"minusminus\");
                          fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                          strreplace(names,\"minusminus\",\"plusplus\");
                          fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                                             
                          }
                      }
              	    } 
                  
                }
	}
}

	DebugN(\"LV ready\");
  
  
  }
void InsertT()
{
dyn_string exInfo;
int pos,pos1;
string names;
//Add ADCTemp

dyn_string deviceList=dpAliases(\"*/T/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
{
 pos =strpos(deviceList[i],\"RPC_W\");
 if(pos>-1)
 {
   names = substr(deviceList[i],pos);
   //DebugN(\"cHc\",names,names[pos1+2]);
   pos1 = strpos(names,\"RB\");
   
   switch(names[pos1+2])
   {
   case \"1\":
     if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //strreplace(names,\"plus\",\"minus\");
            //fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //DebugN(\"we\",names);
            }
          }  
         
    break;   
   case \"2\":
     strreplace(names,\"_T\",\"in_T\");
     if (fwTree_isNode(names,exInfo)!=0)
     {
	if (fwTree_isNode(deviceList[i],exInfo)==0)
        {
	fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        strreplace(names,\"in\",\"out\");
        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
        }
      }
     break;
    case \"3\":
      strreplace(names,\"_T\",\"plus_T\");
     if (fwTree_isNode(names,exInfo)!=0)
     {
	if (fwTree_isNode(deviceList[i],exInfo)==0)
        {
	fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        strreplace(names,\"plus\",\"minus\");
        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
        }
      }
     break;
     case \"4\":
       
       if((strpos(names,\"S11\")==-1)&&(strpos(names,\"S09\")==-1)&&(strpos(names,\"S10\")==-1)&&(strpos(names,\"S04\")==-1))
       {
         DebugN(\"case 1: -->\",names);
        strreplace(names,\"_T\",\"plus_T\");
         if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            strreplace(names,\"plus\",\"minus\");
            fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
           // DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          } 
           
        }
       else  if(strpos(names,\"S04\")!=-1)
         {
         DebugN(\"case 2: -->\",names);
          if (fwTree_isNode(names,exInfo)!=0)
          {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            if(names[pos1+3]==\"p\")
            strreplace(names,\"plus\",\"plusplus\");
            else
              strreplace(names,\"minus\",\"minusminus\");
            fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          }          
         }
       else
       {
         DebugN(\"case 3: -->\",names);
        if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //strreplace(names,\"plus\",\"minus\");
            //fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
           // DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          }  
         
         }
       break;
     
   }
 }
}                
                 
     
 DebugN(\"T ready\");
  
  
  }
void InsertLBB()
{
dyn_string exInfo; 
dyn_string deviceList=dpAliases(\"*/LBB_LV/*\",\"*\"); 
 int pos,pos1;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		pos1 = strpos(names,\"LBB\");
		names = substr(names,0,pos1+3);
		//DebugN(\"cHc\",names);
		if (fwTree_isNode(deviceList[i],exInfo)==0)
		 fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLBBLV\", 0);
	}
}
DebugN(\"LBB ready\"); }
void InsertBoards()
{
   int pos,pos1;
string names;
  //Add Boards
  dyn_string exInfo;
dyn_string deviceList=dpAliases(\"*/Boards/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	pos =strpos(deviceList[i],\"_X\");
	if(pos>-1)
	{
	names = substr(deviceList[i],pos);
        //DebugN(pos,deviceList[i][22],deviceList[i][pos-1]);
		//pos1 = strpos(names,\"LBB\");
		//names = substr(names,0,pos1+3);
	fwFsmTree_addNode(\"RPC_RB_UXC_W\"+deviceList[i][pos-2]+deviceList[i][pos-1]+\"_Bd\",deviceList[i] ,\"FwCaenBoardEasy\", 0);
	}
	}


DebugN(\"BOARDS ready\");
}
void InsertBcMaoCrate()
{
  //Add BC
 int pos,pos1;
string names;
dyn_string exInfo;
dyn_string deviceList=dpAliases(\"*/BCs/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	fwFsmTree_addNode(\"RPC_BCs\",deviceList[i] ,\"FwCaenBoardSY1527A1676\", 0);
	}
DebugN(\"BC ready\");
//Add MAO

dyn_string deviceList=dpAliases(\"*/MAO/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
        if(fwFsm_isLogicalDeviceName(deviceList[i]))
          DebugN(\"SIIIIIII\");
        
        pos =strpos(deviceList[i],\"PC_\");
        names = substr(deviceList[i],pos-1);
        //DebugN(\"ss\",names,deviceList);
        pos =strpos(names,\"_X\");
        names = substr(names,0,pos);
       DebugN(names,deviceList);
	fwFsmTree_addNode(names+\"_MAO\",deviceList[i] ,\"FwCaenChannelHV\", 0);
	}

DebugN(\"mao ready\");

//Add Crate
dyn_string deviceList=dpAliases(\"*/Crates/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	fwFsmTree_addNode(\"RPC_Crates\",deviceList[i] ,\"FwCaenCrateSY1527Basic\", 0);
	}

DebugN(\"crate ready\");
}

void SetAlarmDevice(){


float diff1,diff2,value;
dyn_string exceptionInfo,split,splitt;
string channelName,channel;

dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));

for (int i=1;i<=dynlen(deviceList);i++)
	{
	deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
	dpGet(deviceList[i]+\".readBackSettings.i0\", value);
	
	diff1=value*0.1;//primo limite al 10%
	diff2=value*0.2;//secondo limite al 20%
	
 	
///Set  Alarm channel for Imon

	channel= deviceList[i]+\".actual.iMon\";
	//DebugN(channel);
	dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\") ;
	dyn_float limits = makeDynFloat( value+diff1,value+diff2 ); 
	dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\");
 	string alertPanel; dyn_string alertPanelParameters; string alertHelp;
	
	fwAlertConfig_setAnalog(channel,alertTexts,limits, alertClasses,alertPanel,alertPanelParameters,
													alertHelp,exceptionInfo);
	fwAlertConfig_activate(channel,exceptionInfo);
	//DebugN(channel,exceptionInfo);												 
	}
}
SetDeviceConditionDB(){
// Ricorda che dovrebbe partire anche il manager ed essere settato
dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));

bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //Archive's name
int archiveType=3,count=1,value,l;
int smoothProcedure=4;//set old/new comparition 
float deadband=0;
float timeInterval=0; 
bool isActive; 
dyn_string exceptionInfo,channels;

for(int i=1;i<=dynlen(deviceList);i++)
{
fwArchive_configMultiple(deviceList[i]+\".actual.iMon\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
fwArchive_configMultiple(deviceList[i]+\".actual.vMon\" , archiveClassName,archiveType,smoothProcedure,
					deadband, timeInterval,exceptionInfo);
}



}  
" 0
 E E E
13 14
"PUSH_BUTTON5"
""
1 74 386 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
17 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 72 384 226 428

T 
1
LANG:1 10 CreateTree
"main()
{
  ImportConfig();
  string panel;
  dpGet(getSystemName()+\"CMS_RPCfwSupervisor.Status.panels\",panel);
  if(panel==\"OK\")
  {
  DebugN(\"Starting tree\");
  createBarrel();
  createEndcap();
  createHardware();
  }
DebugN(\"Tree completed\");
fwFsmTree_generateTreeNode(\"CMS_RPC\");
//fwInstallation_appendManager(TRUE, \"Searching components\", \"PVSS00ctrl\", \"manual\", 30, 2, 2, \"CMS_RPCfwSupervisor/CMS_RPCfwSupervisorStartupScript.ctl\");
fwFsmTree_refreshTree();

}
string findPath()
{
  dyn_dyn_string comp;
  fwInstallation_getInstalledComponents(comp);
  for(int i =1;i<=dynlen(comp);i++)
    if(comp[i][1]==\"fwCore\")
      return comp[i][3];  
  }
void ImportConfig(){
string path;
 
path = findPath(); 
 

  string fname=path+\"/CMS_RPCfwSupervisor/CMS_RPCfwSupervisorConfig.csv\",st;
//DebugN(fname); 
file f;
int i = 1; 
string dummy;
dyn_dyn_string elenco;
f=fopen(fname,\"r\");//
//DebugN(i);
while (feof(f)==0) // so long as it is not at the end
{
 
fgets(dummy,40,f);  // reads from the file in dummy
elenco[i]=strsplit(dummy,\",\"); 
//DebugN(dummy);
i = i+1;
}
 
fclose(f);
// DebugN(elenco);
for(int j = 1; j<=dynlen(elenco);j++)
{
  DebugN(elenco[j]);
  if(elenco[j]!=\"\")
  dpSet(getSystemName()+\"CMS_RPCfwSupervisor.\"+elenco[j][1],elenco[j][2]);
  
  }
}

void createBarrel(){

dyn_string nodes, expInfo;
string chamber_node,ring_node,disc_node, top_node;
int chamberNum;

if(fwFsmTree_isNode(\"CMS_RPC\"))
	{
	DebugN(\"Removing old tree...\");
	fwFsmTree_removeNode(\"FSM\", \"CMS_RPC\");
	deleteRef();
	DebugN(\"Old Barrel Tree completely removed\");
	}
	

dyn_string discs=makeDynString(\"_WM2\",\"_WM1\",\"_W00\",\"_WP1\",\"_WP2\");
dyn_string rings=makeDynString(\"_S01\",\"_S02\",\"_S03\",\"_S04\",\"_S05\",\"_S06\",\"_S07\",
				\"_S08\",\"_S09\",\"_S10\",\"_S11\",\"_S12\");
dyn_string cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",
				\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//remove top node if already exists (all children are removed too)

fwFsmTree_addNode(\"FSM\",\"CMS_RPC\",\"RPC_TOP\",1);
//create top node (type DCSNode)
top_node=fwFsmTree_addNode(\"CMS_RPC\",\"RPC_BARREL\",\"RPC_Barrel\",1);
fwFsmTree_setNodeLabel(\"RPC_BARREL\", \"Barrel\");

//add list of children CU (type DiscNode)
for(int i=1; i<=dynlen(discs);i++)
	{
	if(i==5)
	{
	disc_node=fwFsmTree_addNode(top_node,\"RPC\"+discs[i],\"RPC_Wheel\",1);
        fwFsmTree_setNodeLabel(\"RPC\"+discs[i], \"Wheel \"+strltrim(discs[i],\"_W\"));
	DebugN(\"Creating \"+ discs[i]);
	//add list of children CU(type RingNode)
	for(int j=1;j<=dynlen(rings);j++)
		{
		ring_node=fwFsmTree_addNode(disc_node,\"RPC\"+discs[i]+rings[j],\"RPC_Sector\",0);
		fwFsmTree_setNodeLabel(\"RPC\"+discs[i]+rings[j], \"Sector \"+strltrim(rings[j],\"_S\"));
		//add list of children CU (type ChamberNode)
		if(j==4) 
			chamberNum=10;
		else if(j==9||j==11)
			{
			chamberNum=7;
			cham[7]=\"_RB4\";
			}
		else
			{
			chamberNum=8;
			cham[7]=\"_RB4minus\";
			}
			
			
		for(int k=1;k<=chamberNum;k++)
			{
			
			chamber_node=fwFsmTree_addNode(ring_node,\"RPC\"+discs[i]+rings[j]+cham[k],\"RPC_Chamber\",0);
			fwFsmTree_setNodeLabel(\"RPC\"+discs[i]+rings[j]+cham[k], strltrim(cham[k],\"_\"));
			
			}
		}
	}
	}

//generate and refresh tree
DebugN(\"Barrel Tree completed\");
}

void createEndcap()
{
string disc,ring,chamber,chamberNum;
dyn_string DiscNum;
int chamberNumMax;

DiscNum=makeDynString(\"P1\",\"P2\",\"P3\",\"P4\",\"M1\",\"M2\",\"M3\",\"M4\");


if(fwFsmTree_isNode(\"RPC_ENDCAP\"))
	{
	DebugN(\"Removing old tree...\");
	fwFsmTree_removeNode(\"FSM\",\"RPC_ENDCAP\");
	DebugN(\"Old Endcap Tree completely removed\");
	}


DebugN(\"Creating top node\");
fwFsmTree_addNode(\"CMS_RPC\",\"RPC_ENDCAP\",\"RPC_Endcap\",1);
fwFsmTree_setNodeLabel(\"RPC_ENDCAP\", \"Endcap\");
//create tree
for(int i=1;i<=dynlen(DiscNum);i++)
	{
	if(i==1)
	{	
	disc=fwFsmTree_addNode(\"RPC_ENDCAP\",\"RPC_D\"+DiscNum[i],\"RPC_Disk\",1);
        fwFsmTree_setNodeLabel(\"RPC_D\"+DiscNum[i], \"Disk \"+DiscNum[i]);
	DebugN(\"Adding \"+disc+\" to FSM tree\");
	for(int j=1;j<=3;j++)
		{
		ring=fwFsmTree_addNode(disc,\"RPC_D\"+DiscNum[i]+\"_R\"+j,\"RPC_Ring\",0);
                fwFsmTree_setNodeLabel(\"RPC_D\"+DiscNum[i]+\"_R\"+j, \"Ring \"+j);
		//DebugN(\"Adding \"+ring+\" to FSM tree\");
		if(j==1&&i!=1&&i!=5) chamberNumMax=18;
		else chamberNumMax=36;
		//DebugN(\"Adding chambers to FSM tree\");
		for(int k=1;k<=chamberNumMax;k++)
			{
			sprintf(chamberNum,\"%02d\",k);
			chamber=fwFsmTree_addNode(ring,\"RPC_D\"+DiscNum[i]+\"_R\"+j+\"_RE\"+chamberNum,\"RPC_Chamber\",0);
			fwFsmTree_setNodeLabel(\"RPC_D\"+DiscNum[i]+\"_R\"+j+\"_RE\"+chamberNum, \"RE\"+chamberNum);
			//DebugN(chamber);
			}
		}
	}
	}
DebugN(\"Endcap Tree completed\");
}


void deleteRef()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;
DebugN(\"Finding references...\");
fwTree_getAllNodes(nodes,exInfo);
DebugN(\"Founded \",dynlen(nodes),\" nodes\");
for (int i = 1; i<=dynlen(nodes); i++)
	fwFsmTree_getChildrenRec(nodes[i],parents);
	
for (int i = 1; i<=dynlen(parents); i++)
	if(strpos(parents[i],\"&\")>-1)
		{
		fwTree_getParent(parents[i],parent,exInfo);
		fwFsmTree_removeNode(parent,parents[i]);
		DebugN(\"Reference: \",parents[i],\" deleted\");
		}
DebugN(\"References completely removed\");
}



void createHardware(){

dyn_string nodes, expInfo;
string chamber_node,ring_node,disc_node, top_node;
int chamberNum;

dyn_string component=makeDynString(\"RPC_RB_UXC\",\"RPC_RB_USC\",\"RPC_RE_UXC\",\"RPC_RE_USC\");	
dyn_string componentName=makeDynString(\"Barrel UXC\",\"Barrel USC\",\"Endcap UXC\",\"Endcap USC\");
dyn_dyn_string wheel;
// wheel[1]=makeDynString(\"_WM2\",\"_WM1\",\"_W00\",\"_WP1\",\"_WP2\");
// 
// wheel[3]=makeDynString(\"_YEM3\",\"_YEM2\",\"_YEM1\",\"_YEP1\",\"_YEP2\",\"_YEP3\");

//remove top node if already exists (all children are removed too)

fwFsmTree_addNode(\"CMS_RPC\",\"RPC_HARDWARE\",\"RPC_HW\",1);
fwFsmTree_setNodeLabel(\"RPC_HARDWARE\", \"Hardware View\");

//create top node (type DCSNode)
for (int i= 1; i<=dynlen(component);i++)
	{
	fwFsmTree_addNode(\"RPC_HARDWARE\",component[i],\"RPC_SubHW\",0);
        fwFsmTree_setNodeLabel(component[i], componentName[i]);
// 	if(i % 2 == 1)
// 		for(int j=1;j<=dynlen(wheel[i]);j++)
// 			fwFsmTree_addNode(component[i],component[i]+wheel[i][j],\"RPC_Hardware\",0);
	
	
	}



//generate and refresh tree
DebugN(\"Hardware Tree completed\");
}

" 0
 E E E
13 15
"Link"
""
1 264 376 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
19 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 262 374 376 404

T 
1
LANG:1 14 Link Hardware

"#uses \"CMS_RPCfwSupervisor/CMS_RPCfwSupervisor.ctl\"

main()
{
DebugN(\"Start Linking...\");
string panel;
  dpGet(getSystemName()+\"CMS_RPCfwSupervisor.Status.library\",panel);
  panel = \"DELBUXCBUSC\";
  if(strpos(panel,\"DEL\")>-1)
  {
   Cancella();
    }
  

  if(strpos(panel,\"BUSC\")>-1)
  {
    if(RPCfwSupervisor_getComponent(\"BarrelHV\")!=\"\")
    {
    LinkHV(\"BarrelHV\",\"_W\");
    LinkHardware(\"BarrelHV\",\"US\");    
    DebugN(\"USC component Linked\");
    }
    else
      DebugN(\"USC component not found\");
  }
  if(strpos(panel,\"BUXC\")>-1)
  {
  if(RPCfwSupervisor_getComponent(\"BarrelLV\")!=\"\")
    {
//  LinkHV(\"BarrelHV\",\"_W\");
   LinkLV(\"BarrelLV\",\"_W\");
    LinkLBB(\"BarrelLV\",\"_W\");
    LinkT(\"BarrelT\",\"_W\");  
    LinkHardware(\"BarrelLV\",\"UX\");
  DebugN(\"UXC component Linked\");
  }
  else
    DebugN(\"UXC component not found\");
  } 
dpSet(getSystemName()+\"CMS_RPCfwSupervisor.Status.library\",\"BUXC\");  
 DebugN(\"FINE\");
}
void Cancella()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;

fwTree_getAllTreeNodes(\"CMS_RPC\",nodes,exInfo);
//DebugN(nodes);
//fwFsmTree_getChildrenRec(\"\",parents);
//DebugN(\"-->\",parents);

 for (int i = 1; i<=dynlen(nodes); i++)
 	{
 	        if(strpos(nodes[i],\"&\")>-1)
                  {
                 fwTree_getParent(nodes[i],parent,exInfo);
 	        //rent = strrtrim(nodes[i],\"_\"+name);
 		fwCU_getType(parent,type);
                // fwFsmTree_getChildrenRec(parent,parents);
 		//DebugN(\"-->\",parents,parent,nodes[i]);
  		//if((type == \"RPC_Chamber\")||(type == \"RPC_Sector\"))
  		  fwTree_removeNode(parent,nodes[i],exInfo);//DebugN(parent,nodes[i]);
               	}
 	}


}
void StartFSMforMTCC()
{
fwFsmTree_startTreeNode(\"CMS_RPC\", 0);
fwFsmTree_startTreeNode(\"RPC_BARREL\", 0);
fwFsmTree_startTreeNode(\"RPC_WP1\",1);
fwFsmTree_startTreeNode(\"RPC_WP2\",1);

}

string getCU(string sys,string name)
{
//int type;
dyn_string exInfo;
 string parent;
 fwTree_getCUName(sys+name,parent,exInfo); 
    return parent;  

 }

void getNodesOfType(string sys,string topnode, string name, dyn_string & nodes,string boe)
{
  dyn_string exInfo,children;
  string type;
  //dyn_string device,tipo;
  //device = strsplit(name,\"_\");
  //bool flag= true;
  fwTree_getChildren(sys+topnode,children,exInfo);
  //DebugN(\"cas\",children);
  if(dynlen(children)!=0)
  {
    for(int i = 1;i<=dynlen(children);i++)
      {

        fwCU_getType(children[i],type);
//         if(strpos(children[i],\"/\")==-1)
//            DebugN(type,name,sys+getCU(sys,children[i])+\"::\"+children[i]);
        if((strpos(children[i],\"/\")==-1)&&(strpos(children[i],boe)>-1)&&(strpos(children[i],name)>-1))
        {
          //DebugN(\"OLE\",children[i]);
           dynAppend(nodes,children[i]);
         }
        getNodesOfType(sys,children[i],name,nodes,boe);
        }
    }
}

void LinkHV(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"Error\")
   {
   
   fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"_HV\",nodes,boe);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_HV\"));
        label = substr(parent,strpos(nodes[i],\"_RB\"));
	DebugN(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
 	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
        {
 	  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_HV\",0);
          fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
          }		
		
    }
DebugN(\"HV Hardware Component Imported\");
}
else
	DebugN(\"HV Hardware Component not founded\");
    
}
void LinkLV(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName);
   
  if(sys!= \"Error\")
   {
   fwFsmTree_importType(\"RPC_LV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"_LV\",nodes,boe);
   DebugN(nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_LV\"));
        label = substr(parent,strpos(nodes[i],\"_RB\"));
	//DebugN(parent,\"---->\",nodes[i]);
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
          	{  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_LV\",0);
         fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
       } 		
		
    }
DebugN(\"LV Hardware Component Imported\");
}
else
	DebugN(\"LV Hardware Component not founded\");
    
}
void LinkLBB(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"Error\")
   {
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"LBB\",nodes,boe);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	if(boe==\"_W\")
           parent = substr(nodes[i],0,strpos(nodes[i],\"_LBB\"));
        else
	  parent = substr(nodes[i],0,strpos(nodes[i],\"_RE\"))+\"_R3\";
        label = substr(parent,strpos(nodes[i],\"_S\"));
        DebugN(nodes[i],getCU(sys,nodes[i])+\"::\"+nodes[i],parent);
 	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
          	 { fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_LBBLV\",0);
        fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
      }	
           //DebugN(\"Inserting...\",parent,getCU(sys,nodes[i])+\"::\"+nodes[i]);	
		
    }
DebugN(\"LBB Hardware Component Imported\");
}
else
	DebugN(\"LBB Hardware Component not founded\");
    
}    
void LinkT(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"Error\")
   {
   fwFsmTree_importType(\"RPC_T\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"_T\",nodes,boe);
   DebugN(nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_T\"));
	label = substr(parent,strpos(nodes[i],\"_RB\"));
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
        {
	  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_T\",0);
        fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
          }		
		
    }
DebugN(\"t Hardware Component Imported\");
}
else
	DebugN(\"t Hardware Component not founded\");
    
}    
void LinkHardware(string compName,string pos)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"Error\")
   {
   string boe,wod;
   if(compName[0]==\"B\")
   {
     boe = \"RB\";
     wod = \"_W\";   
   }
   else
   {
     wod = \"_D\";
     boe = \"RE\";
   }
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
  
   ////////////// INSERT BOARD
   
    getNodesOfType(sys,\"FSM\",\"Bd\",nodes,boe);
   fwFsmTree_importType(\"RPC_Boards\",strrtrim(sys,\":\"));
   parent = \"RPC_\"+boe+\"_\"+pos+\"C\";
     for (int i = 1; i<=dynlen(nodes); i++)
     {
 	//parent = substr(nodes[i],0,strpos(nodes[i],wod));
 	//DebugN(\"questo\",parent);
         label = \"Boards\" + i;
  	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(sys,nodes[i])+\"::\"+nodes[i])))
           {
           DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
           if(strpos(nodes[i],pos)>-1)
           fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_Boards\",0);
          //  fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);		
           }
     }
   dynClear(nodes);
   
    ////////////// INSERT CRATE
   
    getNodesOfType(sys,\"FSM\",\"Crate\",nodes,\"PC\");
    // fwFsmTree_importType(\"RPC_Boards\",strrtrim(sys,\":\"));
   //DebugN(nodes);
     for (int i = 1; i<=dynlen(nodes); i++)
     {
 	//parent = substr(nodes[i],0,strpos(nodes[i],wod));
 	//DebugN(\"questo\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
  	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(sys,nodes[i])+\"::\"+nodes[i])))
           {
        //    label = \"Crate\" + i;
           DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
           fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_Boards\",0);
      //      fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);		
           }
     }
   dynClear(nodes);
   
 ////////////// INSERT BC   

getNodesOfType(sys,\"FSM\",\"_BC\",nodes,pos);
fwFsmTree_importType(\"RPC_BC\",strrtrim(sys,\":\")); 
for (int i = 1; i<=dynlen(nodes); i++)
    {
// 	parent = substr(nodes[i],0,strpos(nodes[i],\"_BC\"));
// 	DebugN(\"i\",nodes,parent);
//         parent = strreplace(parent,\"BA\",\"RB_BA\");
//         DebugN(\"o\",nodes,parent);
  //parent = \"RPC_HARDWARE\";
  if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(sys,nodes[i])+\"::\"+nodes[i])))
    {
    DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
    if(strpos(nodes[i],pos)>-1)
    fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_BC\",0);
    // fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
    }		
   }
  dynClear(nodes);
 
 
  
   if(pos[1]==\"X\")
  {
  
      ////////////// INSERT MAO
     
     getNodesOfType(sys,\"FSM\",\"_MAO\",nodes,wod);
  //DebugN(nodes);
  for (int i = 1; i<=dynlen(nodes); i++)
    {
	//parent = substr(nodes[i],0,strpos(nodes[i],\"_Boards\"));
        
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
        {
          DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
	  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_BC\",0);
           fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);    
          }
      }
  }
  
  DebugN(\"Hardware Component Imported\");
  }
else
	DebugN(\"Hardware Component not founded\");    

}



//////////////////////OLD  
void LinkComponent()
{

// Link HV channels
  
  string sys = RPCfwSupervisor_getComponent(\"HV\");
  
//   string HARDWARE_COMPONENT = \"CMS_RPCfw_HardwareBarrel\",
// 				ENDCAP_COMPONENT = \"CMS_RPCfwSupervisorEndcap\",
// 			 parent,type;
// dyn_string systemName,nodes,exInfo;
DebugN(\"Starting....\");
fwInstallation_getApplicationSystem(HARDWARE_COMPONENT,systemName);
if(sys!= \"Error\")
{
  
fwFsmTree_importType(\"HVChannelNode\",strrtrim(systemName[1],\":\"));
// fwFsmTree_importType(\"LVChannelNode\",strrtrim(systemName[1],\":\"));
// fwFsmTree_importType(\"PowerNode\",strrtrim(systemName[1],\":\"));
// fwFsmTree_importType(\"LinkBoardsBoxNode\",strrtrim(systemName[1],\":\"));

fwTree_getAllTreeNodes(systemName[1]+\"FSM\",nodes,exInfo);
//DebugN(\"nodes: \",nodes);
for (int i = 1; i<=dynlen(nodes); i++)
	{
	fwCU_getType(nodes[i],type);
	DebugN(\"nodes: \",nodes[i],type);
	if(type == \"HVChannelNode\")
		{
		parent = substr(nodes[i],0,strpos(nodes[i],\"_HV\"));
		
		if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(\"RPC_HVDevice::\"+nodes[i])))
			fwFsmTree_addNode(parent, \"RPC_HVDevice::\"+nodes[i],\"HVChannelNode\",0);		
		}
	else if(type == \"LVChannelNode\")
		{
		parent = substr(nodes[i],0,strpos(nodes[i],\"_LV\"));
		
		if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(\"RPC_LVDevice::\"+nodes[i])))
			fwFsmTree_addNode(parent, \"RPC_LVDevice::\"+nodes[i],\"LVChannelNode\",0);		
		}
	else if(type == \"PowerNode\")
		{
		parent = \"RPC_BARREL\";
		if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(nodes[i]+\"::\"+nodes[i])))
		fwFsmTree_addNode(parent, nodes[i]+\"::\"+nodes[i],\"PowerNode\",0);
		}
	else if(type == \"LinkBoardsBoxNode\")
		{
		parent = substr(nodes[i],0,strpos(nodes[i],\"_LBB\"));
            DebugN(parent);
		if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(\"RPC_LBB::\"+nodes[i])))
		fwFsmTree_addNode(parent, \"RPC_LBB::\"+nodes[i],\"LinkBoardsBoxNode\",0);
		}
	}
DebugN(\"Hardware Component Imported\");
}
else
	DebugN(\"Hardware Component not founded\");
	
fwInstallation_getApplicationSystem(ENDCAP_COMPONENT,systemName);
if(dynlen(systemName)>0)
	{
	strrtrim(systemName[1],\":\");
	fwFsmTree_importType(\"EndcapNode\",systemName[1]);
	if(!fwFsmTree_isNode(\"RPC_ENDCAP::RPC_ENDCAP\"))
		fwFsmTree_addNode(\"CMS_RPC\", \"RPC_ENDCAP::RPC_ENDCAP\",\"EndcapNode\",1);
	DebugN(\"Endcap Component Imported\");
	}
else
	DebugN(\"Endcap Component not founded\");
fwFsmTree_generateAll();
}
" 0
 E E E
13 16
"PUSH_BUTTON6"
""
1 266 409 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
21 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 264 407 378 437

T 
1
LANG:1 16 Unlink Hardware

"#uses \"CMS_RPCfwSupervisor/CMS_RPCfwSupervisor.ctl\"

main()
{
  Cancella();
//      LinkT();  
//      LinkLBB();
//       LinkHV();
//       LinkLV();
//   LinkHardware();
//LinkComponent();
//Cancella(\"RPC_WP2_S0\");
//StartFSMforMTCC();
 DebugN(\"FINE\");
}
void StartFSMforMTCC()
{
fwFsmTree_startTreeNode(\"CMS_RPC\", 0);
fwFsmTree_startTreeNode(\"RPC_BARREL\", 0);
fwFsmTree_startTreeNode(\"RPC_WP1\",1);
fwFsmTree_startTreeNode(\"RPC_WP2\",1);

}
void Cancella()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;

fwTree_getAllTreeNodes(\"CMS_RPC\",nodes,exInfo);
//DebugN(nodes);
//fwFsmTree_getChildrenRec(\"\",parents);
//DebugN(\"-->\",parents);

 for (int i = 1; i<=dynlen(nodes); i++)
 	{
 	        if(strpos(nodes[i],\"&\")>-1)
                  {
                 fwTree_getParent(nodes[i],parent,exInfo);
 	        //rent = strrtrim(nodes[i],\"_\"+name);
 		fwCU_getType(parent,type);
                // fwFsmTree_getChildrenRec(parent,parents);
 		//DebugN(\"-->\",parents,parent,nodes[i]);
  		//if((type == \"RPC_Chamber\")||(type == \"RPC_Sector\"))
  		  fwTree_removeNode(parent,nodes[i],exInfo);//DebugN(parent,nodes[i]);
               	}
 	}


}
string getCU(string name)
{
int type;
 string parent;
 parent =  fwCU_getParent(type,name);
 DebugN(parent,name);
  if(type==0)
    return getCU(parent);
  else
    return parent;  
  
 }

void getNodesOfType(string sys,string topnode, string name, dyn_string & nodes)
{
  dyn_string exInfo,children;
  string type;
  //bool flag= true;
  fwTree_getChildren(sys+topnode,children,exInfo);
  //DebugN(children);
  if(dynlen(children)!=0)
  {
    for(int i = 1;i<=dynlen(children);i++)
      {
        fwCU_getType(children[i],type);
        if(type == name)
           dynAppend(nodes,children[i]);
        getNodesOfType(sys,children[i],name,nodes);
        }
    }
}
void LinkHV()
{
 dyn_string nodes,exInfo;
 string parent,type;
  string sys = RPCfwSupervisor_getComponent(\"BarrelHV\"); 
  if(sys!= \"Error\")
   {
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"RPC_HV\",nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_HV\"));
	
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(nodes[i])+\"::\"+nodes[i])))
	  fwFsmTree_addNode(parent,sys+getCU(nodes[i])+\"::\"+nodes[i],\"RPC_HV\",0);		
		
    }
DebugN(\"HV Hardware Component Imported\");
}
else
	DebugN(\"HV Hardware Component not founded\");
    
}
void LinkLV()
{
 dyn_string nodes,exInfo;
 string parent,type;
  string sys = RPCfwSupervisor_getComponent(\"BarrelLV\"); 
  if(sys!= \"Error\")
   {
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"RPC_LV\",nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_LV\"));
	
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(nodes[i])+\"::\"+nodes[i])))
	  fwFsmTree_addNode(parent,sys+getCU(nodes[i])+\"::\"+nodes[i],\"RPC_LV\",0);		
		
    }
DebugN(\"LV Hardware Component Imported\");
}
else
	DebugN(\"LV Hardware Component not founded\");
    
}
void LinkLBB()
{
 dyn_string nodes,exInfo;
 string parent,type;
  string sys = RPCfwSupervisor_getComponent(\"BarrelLV\"); 
  if(sys!= \"Error\")
   {
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"RPC_LBBLV\",nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_LBB\"));
	
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(nodes[i])+\"::\"+nodes[i])))
	  fwFsmTree_addNode(parent,sys+getCU(nodes[i])+\"::\"+nodes[i],\"RPC_LBBLV\",0);		
		
    }
DebugN(\"LBB Hardware Component Imported\");
}
else
	DebugN(\"LBB Hardware Component not founded\");
    
}    
void LinkT()
{
 dyn_string nodes,exInfo;
 string parent,type;
  string sys = RPCfwSupervisor_getComponent(\"BarrelLV\"); 
  if(sys!= \"Error\")
   {
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"RPC_T\",nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_T\"));
	
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(nodes[i])+\"::\"+nodes[i])))
	  fwFsmTree_addNode(parent,sys+getCU(nodes[i])+\"::\"+nodes[i],\"RPC_T\",0);		
		
    }
DebugN(\"t Hardware Component Imported\");
}
else
	DebugN(\"t Hardware Component not founded\");
    
}    
void LinkHardware()
{
 dyn_string nodes,exInfo;
 string parent,type;
  string sys = RPCfwSupervisor_getComponent(\"BarrelLV\"); 
  if(sys!= \"Error\")
   {
  
    //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"RPC_Boards\",nodes);
   
  
     for (int i = 1; i<=dynlen(nodes); i++)
     {
 	parent = substr(nodes[i],0,strpos(nodes[i],\"_W\"));
 	DebugN(\"questo\",parent);
  	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(nodes[i])+\"::\"+nodes[i])))
         	  {
           DebugN(parent,sys+getCU(nodes[i])+\"::\"+nodes[i]);
           fwFsmTree_addNode(parent,sys+getCU(nodes[i])+\"::\"+nodes[i],\"RPC_Boards\",0);		
         		}
     }
   dynClear(nodes);

getNodesOfType(sys,\"FSM\",\"RPC_BC\",nodes);
 DebugN(nodes); 
for (int i = 1; i<=dynlen(nodes); i++)
    {
// 	parent = substr(nodes[i],0,strpos(nodes[i],\"_BC\"));
// 	DebugN(\"i\",nodes,parent);
//         parent = strreplace(parent,\"BA\",\"RB_BA\");
//         DebugN(\"o\",nodes,parent);
  parent = \"RPC_HARDWARE\";
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(nodes[i])+\"::\"+nodes[i])))
  	  {
          DebugN(parent,sys+getCU(nodes[i])+\"::\"+nodes[i]);
          fwFsmTree_addNode(parent,sys+getCU(nodes[i])+\"::\"+nodes[i],\"RPC_BC\",0);
        }		
    }
  dynClear(nodes);

  getNodesOfType(sys,\"FSM\",\"RPC_MAO\",nodes);
  DebugN(nodes);
  for (int i = 1; i<=dynlen(nodes); i++)
    {
	//parent = substr(nodes[i],0,strpos(nodes[i],\"_Boards\"));
        if(strpos(nodes[i],\"_W\")>-1)
          parent= \"RPC_RB_UXC\";
        else
          parent = \"RPC_RB_USC\";
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(nodes[i])+\"::\"+nodes[i])))
        {
          DebugN(parent,sys+getCU(nodes[i])+\"::\"+nodes[i]);
	  fwFsmTree_addNode(parent,sys+getCU(nodes[i])+\"::\"+nodes[i],\"RPC_BC\",0);		
    
          }
      }
  DebugN(\"Hardware Component Imported\");
  }
else
	DebugN(\"Hardware Component not founded\");    

  }





//////////////////////OLD  
void LinkComponent()
{

// Link HV channels
  
  string sys = RPCfwSupervisor_getComponent(\"HV\");
  
//   string HARDWARE_COMPONENT = \"CMS_RPCfw_HardwareBarrel\",
// 				ENDCAP_COMPONENT = \"CMS_RPCfwSupervisorEndcap\",
// 			 parent,type;
// dyn_string systemName,nodes,exInfo;
DebugN(\"Starting....\");
fwInstallation_getApplicationSystem(HARDWARE_COMPONENT,systemName);
if(sys!= \"Error\")
{
  
fwFsmTree_importType(\"HVChannelNode\",strrtrim(systemName[1],\":\"));
// fwFsmTree_importType(\"LVChannelNode\",strrtrim(systemName[1],\":\"));
// fwFsmTree_importType(\"PowerNode\",strrtrim(systemName[1],\":\"));
// fwFsmTree_importType(\"LinkBoardsBoxNode\",strrtrim(systemName[1],\":\"));

fwTree_getAllTreeNodes(systemName[1]+\"FSM\",nodes,exInfo);
//DebugN(\"nodes: \",nodes);
for (int i = 1; i<=dynlen(nodes); i++)
	{
	fwCU_getType(nodes[i],type);
	DebugN(\"nodes: \",nodes[i],type);
	if(type == \"HVChannelNode\")
		{
		parent = substr(nodes[i],0,strpos(nodes[i],\"_HV\"));
		
		if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(\"RPC_HVDevice::\"+nodes[i])))
			fwFsmTree_addNode(parent, \"RPC_HVDevice::\"+nodes[i],\"HVChannelNode\",0);		
		}
	else if(type == \"LVChannelNode\")
		{
		parent = substr(nodes[i],0,strpos(nodes[i],\"_LV\"));
		
		if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(\"RPC_LVDevice::\"+nodes[i])))
			fwFsmTree_addNode(parent, \"RPC_LVDevice::\"+nodes[i],\"LVChannelNode\",0);		
		}
	else if(type == \"PowerNode\")
		{
		parent = \"RPC_BARREL\";
		if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(nodes[i]+\"::\"+nodes[i])))
		fwFsmTree_addNode(parent, nodes[i]+\"::\"+nodes[i],\"PowerNode\",0);
		}
	else if(type == \"LinkBoardsBoxNode\")
		{
		parent = substr(nodes[i],0,strpos(nodes[i],\"_LBB\"));
            DebugN(parent);
		if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(\"RPC_LBB::\"+nodes[i])))
		fwFsmTree_addNode(parent, \"RPC_LBB::\"+nodes[i],\"LinkBoardsBoxNode\",0);
		}
	}
DebugN(\"Hardware Component Imported\");
}
else
	DebugN(\"Hardware Component not founded\");
	
fwInstallation_getApplicationSystem(ENDCAP_COMPONENT,systemName);
if(dynlen(systemName)>0)
	{
	strrtrim(systemName[1],\":\");
	fwFsmTree_importType(\"EndcapNode\",systemName[1]);
	if(!fwFsmTree_isNode(\"RPC_ENDCAP::RPC_ENDCAP\"))
		fwFsmTree_addNode(\"CMS_RPC\", \"RPC_ENDCAP::RPC_ENDCAP\",\"EndcapNode\",1);
	DebugN(\"Endcap Component Imported\");
	}
else
	DebugN(\"Endcap Component not founded\");
fwFsmTree_generateAll();
}
" 0
 E E E
30 17
"FRAME4"
""
1 40 221 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
22 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 0.975510204081633 0 1 -7.0204081632653 -49 0 E 40 221 531 397
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
1
LANG:1 6 Barrel
13 25
"PUSH_BUTTON11"
""
1 324 86 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
37 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 322 84 426 122

T 
1
LANG:1 13 leggi da file
"main()
{
string path;
 
path = getPath(CONFIG_REL_PATH); 
 

  string fname=path+\"/CMS_RPCfwSupervisor/CMS_RPCfwSupervisorConfig.csv\",st;
//DebugN(fname); 
file f;
int i = 1; 
string dummy;
dyn_dyn_string elenco;
f=fopen(fname,\"r\");//
//DebugN(i);
while (feof(f)==0) // so long as it is not at the end
{
 
fgets(dummy,40,f);  // reads from the file in dummy
elenco[i]=strsplit(dummy,\",\"); 
//DebugN(dummy);
i = i+1;
}
 
fclose(f);
// DebugN(elenco);
for(int j = 1; j<=dynlen(elenco);j++)
{
  DebugN(elenco[j]);
  if(elenco[j]!=\"\")
  dpSet(getSystemName()+\"CMS_RPCfwSupervisor.\"+elenco[j][1],elenco[j][2]);
  
  }

}" 0
 E E E
13 27
"PUSH_BUTTON13"
""
1 74 472 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
39 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 72 470 228 512

T 
1
LANG:1 5 Init

"/*
* Created by Giovanni Polese (Lappeenranta University of Technology
*	date:08/03/2007
*	LastChange:05/05/2007
*

*/
#uses \"CMS_RPCfwSupervisor/CMS_RPCfwSupervisor.ctl\"
main()
{
  ImportConfig();
  string panel;
  dpGet(getSystemName()+\"CMS_RPCfwSupervisor.Status.panels\",panel);
	DebugN(panel,\"<---\");
  if(panel==\"OK\")
  {
  DebugN(\"Starting tree\");
  createBarrel();
  createEndcap();
  createHardware();
  }
DebugN(\"Tree completed\");
fwFsmTree_generateTreeNode(\"CMS_RPC\");
fwInstallation_appendManager(TRUE, \"Searching components\", \"PVSS00ctrl\", \"manual\", 30, 2, 2, \"CMS_RPCfwSupervisor/CMS_RPCfwSupervisorStartupScript.ctl\");
fwFsmTree_refreshTree();
LinkAll();
fwFsmTree_generateTreeNode(\"CMS_RPC\");
SetdbforFsm();
DebugN(\"--------------- Supervisor successfully installed.\");
}

void SetdbforFsm()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;
bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //Archive's name
int archiveType=DPATTR_ARCH_PROC_SIMPLESM,count=1,value,l;
int smoothProcedure=DPATTR_VALUE_REL_SMOOTH ,pos;//set old/new comparition 
float deadband=2;
float timeInterval=0; 
bool isActive; 
dyn_string exceptionInfo,channels,boards;


fwTree_getAllTreeNodes(\"CMS_RPC\",nodes,exInfo);
//DebugN(nodes);
//fwFsmTree_getChildrenRec(\"\",parents);
//DebugN(\"-->\",parents);
string element;
dynAppend(nodes,\"CMS_RPC\");
 for (int i = 1; i<=dynlen(nodes); i++)
 	{
                //fwCU_getType(nodes[i],type);
                // fwFsmTree_getChildrenRec(parent,parents);
 		//DebugN(\"-->\",parents,parent,nodes[i]);
  		//if((type == \"RPC_Chamber\")||(type == \"RPC_Sector\")) 	  
        
               if(!(strpos(nodes[i],\"&\")>-1))
               {
               fwCU_getDevDp(nodes[i],type);
               element = type + \".fsm.currentState\";
               //DebugN(nodes[i],\"-->\",element);
   
               fwArchive_set(element , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH ,deadband, 10000,exceptionInfo);
               //DebugN(element,\"-->\", exceptionInfo);
               dynClear(exceptionInfo);
 	
               }
               else
               {
                 string new;
                 fwCU_getDevDp(nodes[i],type);
                 int pos = strpos(type,\"|rpc\");
                 //DebugN(pos,\"ss\");
                 if (pos >0)
                 { 
                 new = substr(type,pos +1,9);
                 strreplace(type,new,\"\");
                 }
                 element = type + \".fsm.currentState\";
                 fwArchive_set(element , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH ,deadband, 10000,exceptionInfo);
                 //DebugN(element,\"-a-a\",exceptionInfo);
               }
             }


}
string findPath()
{
  dyn_dyn_string comp;
  fwInstallation_getInstalledComponents(comp);
  for(int i =1;i<=dynlen(comp);i++)
    if(comp[i][1]==\"fwCore\")
      return comp[i][3];  
  }
void ImportConfig(){
 string path;

 string paths = findPath();
 //fwInstallation_getProjPaths(paths);
 // DebugN(\"proj paths \", paths);
 string fname=\"/config/CMS_RPCfwSupervisor/CMS_RPCfwSupervisorConfig.csv\",st;
 bool is = false;
     //DebugN(paths[i] + fname);
    if ((access(paths + fname, F_OK) == 0)) {
    fname = paths + fname;
    is = true;
    }

 if(is)
 {
//DebugN(sps,fname); 
file f;
int i = 1; 
string dummy;
dyn_dyn_string elenco;
f=fopen(fname,\"r\");//
//DebugN(i);
while (feof(f)==0) // so long as it is not at the end
{
 
fgets(dummy,100,f);  // reads from the file in dummy
elenco[i]=strsplit(dummy,\",\"); 
//DebugN(dummy);
i = i+1;
}
 
fclose(f);
// DebugN(elenco);
for(int j = 1; j<=dynlen(elenco);j++)
{
  DebugN(elenco[j]);
  if(elenco[j]!=\"\")
  dpSet(getSystemName()+\"CMS_RPCfwSupervisor.\"+elenco[j][1],elenco[j][2]);
  
  }
}
 else
 {
   DebugN(\"Configuration File not found, Installation aborted\");
   }
}

void createBarrel(){

dyn_string nodes, expInfo;
string chamber_node,ring_node,disc_node, top_node;
int chamberNum;

if(fwFsmTree_isNode(\"CMS_RPC\"))
	{
	DebugN(\"Removing old tree...\");
	fwFsmTree_removeNode(\"FSM\", \"CMS_RPC\");
	deleteRef();
	DebugN(\"Old Barrel Tree completely removed\");
	}
	

dyn_string discs=makeDynString(\"_WM2\",\"_WM1\",\"_W00\",\"_WP1\",\"_WP2\");
dyn_string rings=makeDynString(\"_S01\",\"_S02\",\"_S03\",\"_S04\",\"_S05\",\"_S06\",\"_S07\",
				\"_S08\",\"_S09\",\"_S10\",\"_S11\",\"_S12\");
dyn_string cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",
				\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//remove top node if already exists (all children are removed too)

fwFsmTree_addNode(\"FSM\",\"CMS_RPC\",\"RPC_TOP\",1);
//create top node (type DCSNode)
top_node=fwFsmTree_addNode(\"CMS_RPC\",\"RPC_BARREL\",\"RPC_Barrel\",1);
fwFsmTree_setNodeLabel(\"RPC_BARREL\", \"Barrel\");

//add list of children CU (type DiscNode)
for(int i=1; i<=dynlen(discs);i++)
	{
	if(i==5)
	{
	disc_node=fwFsmTree_addNode(top_node,\"RPC\"+discs[i],\"RPC_Wheel\",1);
        fwFsmTree_setNodeLabel(\"RPC\"+discs[i], \"Wheel \"+strltrim(discs[i],\"_W\"));
	DebugN(\"Creating \"+ discs[i]);
	//add list of children CU(type RingNode)
	for(int j=1;j<=dynlen(rings);j++)
		{
		ring_node=fwFsmTree_addNode(disc_node,\"RPC\"+discs[i]+rings[j],\"RPC_Sector\",0);
		fwFsmTree_setNodeLabel(\"RPC\"+discs[i]+rings[j], \"Sector \"+strltrim(rings[j],\"_S\"));
		//add list of children CU (type ChamberNode)
		if(j==4) 
			chamberNum=10;
		else if(j==9||j==11)
			{
			chamberNum=7;
			cham[7]=\"_RB4\";
			}
		else
			{
			chamberNum=8;
			cham[7]=\"_RB4minus\";
			}
			
			
		for(int k=1;k<=chamberNum;k++)
			{
			
			chamber_node=fwFsmTree_addNode(ring_node,\"RPC\"+discs[i]+rings[j]+cham[k],\"RPC_Chamber\",0);
			fwFsmTree_setNodeLabel(\"RPC\"+discs[i]+rings[j]+cham[k], strltrim(cham[k],\"_\"));
			
			}
		}
	}
	}

//generate and refresh tree
DebugN(\"Barrel Tree completed\");
}

void createEndcap()
{
string disc,ring,chamber,chamberNum;
dyn_string DiscNum;
int chamberNumMax;

DiscNum=makeDynString(\"P1\",\"P2\",\"P3\",\"P4\",\"M1\",\"M2\",\"M3\",\"M4\");


if(fwFsmTree_isNode(\"RPC_ENDCAP\"))
	{
	DebugN(\"Removing old tree...\");
	fwFsmTree_removeNode(\"FSM\",\"RPC_ENDCAP\");
	DebugN(\"Old Endcap Tree completely removed\");
	}


DebugN(\"Creating top node\");
fwFsmTree_addNode(\"CMS_RPC\",\"RPC_ENDCAP\",\"RPC_Endcap\",1);
fwFsmTree_setNodeLabel(\"RPC_ENDCAP\", \"Endcap\");
//create tree
for(int i=1;i<=dynlen(DiscNum);i++)
	{
	if(i==1)
	{	
	disc=fwFsmTree_addNode(\"RPC_ENDCAP\",\"RPC_D\"+DiscNum[i],\"RPC_Disk\",1);
        fwFsmTree_setNodeLabel(\"RPC_D\"+DiscNum[i], \"Disk \"+DiscNum[i]);
	DebugN(\"Adding \"+disc+\" to FSM tree\");
	for(int j=1;j<=3;j++)
		{
		ring=fwFsmTree_addNode(disc,\"RPC_D\"+DiscNum[i]+\"_R\"+j,\"RPC_Ring\",0);
                fwFsmTree_setNodeLabel(\"RPC_D\"+DiscNum[i]+\"_R\"+j, \"Ring \"+j);
		//DebugN(\"Adding \"+ring+\" to FSM tree\");
		if(j==1&&i!=1&&i!=5) chamberNumMax=18;
		else chamberNumMax=36;
		//DebugN(\"Adding chambers to FSM tree\");
		for(int k=1;k<=chamberNumMax;k++)
			{
			sprintf(chamberNum,\"%02d\",k);
			chamber=fwFsmTree_addNode(ring,\"RPC_D\"+DiscNum[i]+\"_R\"+j+\"_RE\"+chamberNum,\"RPC_Chamber\",0);
			fwFsmTree_setNodeLabel(\"RPC_D\"+DiscNum[i]+\"_R\"+j+\"_RE\"+chamberNum, \"RE\"+chamberNum);
			//DebugN(chamber);
			}
		}
	}
	}
DebugN(\"Endcap Tree completed\");
}


void deleteRef()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;
DebugN(\"Finding references...\");
fwTree_getAllNodes(nodes,exInfo);
DebugN(\"Founded \",dynlen(nodes),\" nodes\");
for (int i = 1; i<=dynlen(nodes); i++)
	fwFsmTree_getChildrenRec(nodes[i],parents);
	
for (int i = 1; i<=dynlen(parents); i++)
	if(strpos(parents[i],\"&\")>-1)
		{
		fwTree_getParent(parents[i],parent,exInfo);
		fwFsmTree_removeNode(parent,parents[i]);
		DebugN(\"Reference: \",parents[i],\" deleted\");
		}
DebugN(\"References completely removed\");
}



void createHardware(){

dyn_string nodes, expInfo;
string chamber_node,ring_node,disc_node, top_node;
int chamberNum;

dyn_string component=makeDynString(\"RPC_RB_UXC\",\"RPC_RB_USC\",\"RPC_RE_UXC\",\"RPC_RE_USC\");	
dyn_string componentName=makeDynString(\"Barrel UXC\",\"Barrel USC\",\"Endcap UXC\",\"Endcap USC\");
dyn_dyn_string wheel;
// wheel[1]=makeDynString(\"_WM2\",\"_WM1\",\"_W00\",\"_WP1\",\"_WP2\");
// 
// wheel[3]=makeDynString(\"_YEM3\",\"_YEM2\",\"_YEM1\",\"_YEP1\",\"_YEP2\",\"_YEP3\");

//remove top node if already exists (all children are removed too)

fwFsmTree_addNode(\"CMS_RPC\",\"RPC_HARDWARE\",\"RPC_HW\",1);
fwFsmTree_setNodeLabel(\"RPC_HARDWARE\", \"Hardware View\");

//create top node (type DCSNode)
for (int i= 1; i<=dynlen(component);i++)
	{
	fwFsmTree_addNode(\"RPC_HARDWARE\",component[i],\"RPC_SubHW\",0);
        fwFsmTree_setNodeLabel(component[i], componentName[i]);
// 	if(i % 2 == 1)
// 		for(int j=1;j<=dynlen(wheel[i]);j++)
// 			fwFsmTree_addNode(component[i],component[i]+wheel[i][j],\"RPC_Hardware\",0);
	
	
	}



//generate and refresh tree
DebugN(\"Hardware Tree completed\");
}

void LinkAll()
{
DebugN(\"Start Linking...\");
string panel;
  dpGet(getSystemName()+\"CMS_RPCfwSupervisor.Status.library\",panel);
  panel = \"DELBUXCBUSC\";
  if(strpos(panel,\"DEL\")>-1)
  {
   Cancella();
    }
  
 string ok = \"OK\";

  if(strpos(panel,\"BUSC\")>-1)
  {
    if(RPCfwSupervisor_getComponent(\"BarrelHV\")!=\"\")
    {
    LinkHV(\"BarrelHV\",\"_W\");
    LinkHardware(\"BarrelHV\",\"US\");    
    DebugN(\"USC component Linked\");
    }
    else
    { ok = ok + \"BUSC\";
      DebugN(\"USC component not found, please restart the project\");
    }
  }
  if(strpos(panel,\"BUXC\")>-1)
  {
  if(RPCfwSupervisor_getComponent(\"BarrelLV\")!=\"\")
    {
//  LinkHV(\"BarrelHV\",\"_W\");
   LinkLV(\"BarrelLV\",\"_W\");
    LinkLBB(\"BarrelLV\",\"_W\");
    LinkT(\"BarrelT\",\"_W\");  
    LinkHardware(\"BarrelLV\",\"UX\");
  DebugN(\"UXC component Linked\");
  }
  else
  {
    ok = ok + \"BUXC\";
    DebugN(\"UXC component not found, please restart the project\");
  }
} 
   dpSet(getSystemName()+\"CMS_RPCfwSupervisor.Status.library\",ok);  
 DebugN(\"Linking Complete\");
}
void Cancella()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;

fwTree_getAllTreeNodes(\"CMS_RPC\",nodes,exInfo);
//DebugN(nodes);
//fwFsmTree_getChildrenRec(\"\",parents);
//DebugN(\"-->\",parents);

 for (int i = 1; i<=dynlen(nodes); i++)
 	{
 	        if(strpos(nodes[i],\"&\")>-1)
                  {
                 fwTree_getParent(nodes[i],parent,exInfo);
 	        //rent = strrtrim(nodes[i],\"_\"+name);
 		fwCU_getType(parent,type);
                // fwFsmTree_getChildrenRec(parent,parents);
 		//DebugN(\"-->\",parents,parent,nodes[i]);
  		//if((type == \"RPC_Chamber\")||(type == \"RPC_Sector\"))
  		  fwTree_removeNode(parent,nodes[i],exInfo);//DebugN(parent,nodes[i]);
               	}
 	}


}
void StartFSMforMTCC()
{
fwFsmTree_startTreeNode(\"CMS_RPC\", 0);
fwFsmTree_startTreeNode(\"RPC_BARREL\", 0);
fwFsmTree_startTreeNode(\"RPC_WP1\",1);
fwFsmTree_startTreeNode(\"RPC_WP2\",1);

}

string getCU(string sys,string name)
{
//int type;
dyn_string exInfo;
 string parent;
 fwTree_getCUName(sys+name,parent,exInfo); 
    return parent;  

 }

void getNodesOfType(string sys,string topnode, string name, dyn_string & nodes,string boe)
{
  dyn_string exInfo,children;
  string type;
  //dyn_string device,tipo;
  //device = strsplit(name,\"_\");
  //bool flag= true;
  fwTree_getChildren(sys+topnode,children,exInfo);
  //DebugN(\"cas\",children);
  if(dynlen(children)!=0)
  {
    for(int i = 1;i<=dynlen(children);i++)
      {

        fwCU_getType(children[i],type);
//         if(strpos(children[i],\"/\")==-1)
//            DebugN(type,name,sys+getCU(sys,children[i])+\"::\"+children[i]);
        if((strpos(children[i],\"/\")==-1)&&(strpos(children[i],boe)>-1)&&(strpos(children[i],name)>-1))
        {
          //DebugN(\"OLE\",children[i]);
           dynAppend(nodes,children[i]);
         }
        getNodesOfType(sys,children[i],name,nodes,boe);
        }
    }
}

void LinkHV(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"\")
   {
   
   fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"_HV\",nodes,boe);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_HV\"));
        label = substr(parent,strpos(nodes[i],\"_RB\"));
	DebugN(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
 	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
        {
 	  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_HV\",0);
          fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
          }		
		
    }
DebugN(\"HV Hardware Component Imported\");
}
else
	DebugN(\"HV Hardware Component not founded\");
    
}
void LinkLV(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName);
   
  if(sys!= \"\")
   {
   fwFsmTree_importType(\"RPC_LV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"_LV\",nodes,boe);
   DebugN(nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_LV\"));
        label = substr(parent,strpos(nodes[i],\"_RB\"));
	//DebugN(parent,\"---->\",nodes[i]);
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
          	{  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_LV\",0);
         fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
       } 		
		
    }
DebugN(\"LV Hardware Component Imported\");
}
else
	DebugN(\"LV Hardware Component not founded\");
    
}
void LinkLBB(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"\")
   {
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"LBB\",nodes,boe);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	if(boe==\"_W\")
           parent = substr(nodes[i],0,strpos(nodes[i],\"_LBB\"));
        else
	  parent = substr(nodes[i],0,strpos(nodes[i],\"_RE\"))+\"_R3\";
        label = substr(parent,strpos(nodes[i],\"_S\"));
        DebugN(nodes[i],getCU(sys,nodes[i])+\"::\"+nodes[i],parent);
 	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
          	 { fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_LBBLV\",0);
        fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
      }	
           //DebugN(\"Inserting...\",parent,getCU(sys,nodes[i])+\"::\"+nodes[i]);	
		
    }
DebugN(\"LBB Hardware Component Imported\");
}
else
	DebugN(\"LBB Hardware Component not founded\");
    
}    
void LinkT(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"\")
   {
   fwFsmTree_importType(\"RPC_T\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"_T\",nodes,boe);
   DebugN(nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_T\"));
	label = substr(parent,strpos(nodes[i],\"_RB\"));
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
        {
	  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_T\",0);
        fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
          }		
		
    }
DebugN(\"t Hardware Component Imported\");
}
else
	DebugN(\"t Hardware Component not founded\");
    
}    
void LinkHardware(string compName,string pos)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"\")
   {
   string boe,wod;
   if(compName[0]==\"B\")
   {
     boe = \"RB\";
     wod = \"_W\";   
   }
   else
   {
     wod = \"_D\";
     boe = \"RE\";
   }
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
  
   ////////////// INSERT BOARD
   
    getNodesOfType(sys,\"FSM\",\"Bd\",nodes,boe);
   fwFsmTree_importType(\"RPC_Boards\",strrtrim(sys,\":\"));
   parent = \"RPC_\"+boe+\"_\"+pos+\"C\";
     for (int i = 1; i<=dynlen(nodes); i++)
     {
 	//parent = substr(nodes[i],0,strpos(nodes[i],wod));
 	//DebugN(\"questo\",parent);
         label = \"Boards\" + i;
  	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(sys,nodes[i])+\"::\"+nodes[i])))
           {
           DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
           if(strpos(nodes[i],pos)>-1)
           fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_Boards\",0);
          //  fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);		
           }
     }
   dynClear(nodes);
   
    ////////////// INSERT CRATE
   
    getNodesOfType(sys,\"FSM\",\"Crate\",nodes,\"PC\");
    // fwFsmTree_importType(\"RPC_Boards\",strrtrim(sys,\":\"));
   //DebugN(nodes);
     for (int i = 1; i<=dynlen(nodes); i++)
     {
 	//parent = substr(nodes[i],0,strpos(nodes[i],wod));
 	//DebugN(\"questo\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
  	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(sys,nodes[i])+\"::\"+nodes[i])))
           {
        //    label = \"Crate\" + i;
           DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
           fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_Boards\",0);
      //      fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);		
           }
     }
   dynClear(nodes);
   
 ////////////// INSERT BC   

getNodesOfType(sys,\"FSM\",\"_BC\",nodes,pos);
fwFsmTree_importType(\"RPC_BC\",strrtrim(sys,\":\")); 
for (int i = 1; i<=dynlen(nodes); i++)
    {
// 	parent = substr(nodes[i],0,strpos(nodes[i],\"_BC\"));
// 	DebugN(\"i\",nodes,parent);
//         parent = strreplace(parent,\"BA\",\"RB_BA\");
//         DebugN(\"o\",nodes,parent);
  //parent = \"RPC_HARDWARE\";
  if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(sys,nodes[i])+\"::\"+nodes[i])))
    {
    DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
    if(strpos(nodes[i],pos)>-1)
    fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_BC\",0);
    // fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
    }		
   }
  dynClear(nodes);
 
 
  
   if(pos[1]==\"X\")
  {
  
      ////////////// INSERT MAO
     
     getNodesOfType(sys,\"FSM\",\"_MAO\",nodes,wod);
  //DebugN(nodes);
  for (int i = 1; i<=dynlen(nodes); i++)
    {
	//parent = substr(nodes[i],0,strpos(nodes[i],\"_Boards\"));
        
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
        {
          DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
	  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_BC\",0);
           fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);    
          }
      }
  }
  
  DebugN(\"Hardware Component Imported\");
  }
else
	DebugN(\"Hardware Component not founded\");    

}
" 0
 E E E
13 28
"PUSH_BUTTON14"
""
1 264 472 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
41 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 262 470 418 512

T 
1
LANG:1 6 delete
"/*
* Created by Giovanni Polese (Lappeenranta University of Technology
*	date:08/05/2007
*	LastChange:03/06/2007
*
*
*/
main()
{
 DebugN(\"Starting deleting ....\");
  RemoveLink();
  DeleteFSM();
  //DeleteHW();
  //DeleteDps();
  DebugN(\"FSM Supervisor component successfully deleted\");
}

void RemoveLink()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;

fwTree_getAllTreeNodes(\"CMS_RPC\",nodes,exInfo);
//DebugN(nodes);
//fwFsmTree_getChildrenRec(\"\",parents);
//DebugN(\"-->\",parents);

 for (int i = 1; i<=dynlen(nodes); i++)
 	{
 	        if(strpos(nodes[i],\"&\")>-1)
                  {
                 fwTree_getParent(nodes[i],parent,exInfo);
 	        //rent = strrtrim(nodes[i],\"_\"+name);
 		fwCU_getType(parent,type);
                // fwFsmTree_getChildrenRec(parent,parents);
 		//DebugN(\"-->\",parents,parent,nodes[i]);
  		//if((type == \"RPC_Chamber\")||(type == \"RPC_Sector\"))
  		  fwTree_removeNode(parent,nodes[i],exInfo);//DebugN(parent,nodes[i]);
               	}
 	}


}

void DeleteFSM()
{
  dyn_string nodes,nnodes,exInfo,type = makeDynString(\"HV\",\"USC\"),nodesTypes;
  fwTree_getChildren(\"FSM\",nodes,exInfo);
  for(int i = 1;i<=dynlen(nodes);i++)
  {
    if(nodes[i]==\"CMS_RPC\")
          fwFsmTree_removeNode(\"FSM\",nodes[i]);  
  }
}

" 0
 E E E
13 29
"PUSH_BUTTON15"
""
1 124 542 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
42 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 122 540 272 590

T 
1
LANG:1 7 startUp
"/*
* Created by Giovanni Polese (Lappeenranta University of Technology
*	date:08/03/2007
*	LastChange:03/06/2007
*
*
*/
#uses \"CMS_RPCfwSupervisor/CMS_RPCfwSupervisor.ctl\"
main()
{
fwFsmTree_refreshTree();
LinkAll();
fwFsmTree_generateTreeNode(\"CMS_RPC\");
fwFsmTree_startTree();
}
string findPath()
{
  dyn_dyn_string comp;
  fwInstallation_getInstalledComponents(comp);
  for(int i =1;i<=dynlen(comp);i++)
    if(comp[i][1]==\"fwCore\")
      return comp[i][3];  
  }
void ImportConfig(){
 string path;

 string paths = findPath();
 //fwInstallation_getProjPaths(paths);
 // DebugN(\"proj paths \", paths);
 string fname=\"/config/CMS_RPCfwSupervisor/CMS_RPCfwSupervisorConfig.csv\",st;
 bool is = false;
     //DebugN(paths[i] + fname);
    if ((access(paths + fname, F_OK) == 0)) {
    fname = paths + fname;
    is = true;
    }

 if(is)
 {
//DebugN(sps,fname); 
file f;
int i = 1; 
string dummy;
dyn_dyn_string elenco;
f=fopen(fname,\"r\");//
//DebugN(i);
while (feof(f)==0) // so long as it is not at the end
{
 
fgets(dummy,100,f);  // reads from the file in dummy
elenco[i]=strsplit(dummy,\",\"); 
//DebugN(dummy);
i = i+1;
}
 
fclose(f);
// DebugN(elenco);
for(int j = 1; j<=dynlen(elenco);j++)
{
  //DebugN(elenco[j]);
  if(elenco[j]!=\"\")
  dpSet(getSystemName()+\"CMS_RPCfwSupervisor.\"+elenco[j][1],elenco[j][2]);
  
  }
}
 else
 {
   DebugN(\"Configuration File not found, Installation aborted\");
   }
}



void deleteRef()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;
DebugN(\"Finding references...\");
fwTree_getAllNodes(nodes,exInfo);
DebugN(\"Founded \",dynlen(nodes),\" nodes\");
for (int i = 1; i<=dynlen(nodes); i++)
	fwFsmTree_getChildrenRec(nodes[i],parents);
	
for (int i = 1; i<=dynlen(parents); i++)
	if(strpos(parents[i],\"&\")>-1)
		{
		fwTree_getParent(parents[i],parent,exInfo);
		fwFsmTree_removeNode(parent,parents[i]);
		DebugN(\"Reference: \",parents[i],\" deleted\");
		}
DebugN(\"References completely removed\");
}


void SetdbforFsm()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;
bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //Archive's name
int archiveType=DPATTR_ARCH_PROC_SIMPLESM,count=1,value,l;
int smoothProcedure=DPATTR_VALUE_REL_SMOOTH ,pos;//set old/new comparition 
float deadband=2;
float timeInterval=0; 
bool isActive; 
dyn_string exceptionInfo,channels,boards;

              bool exists,isAct;
              string  aClassName;
              int  aiType ,aType;
              float dband, attime;

fwTree_getAllTreeNodes(\"CMS_RPC\",nodes,exInfo);
//DebugN(nodes);
//fwFsmTree_getChildrenRec(\"\",parents);
//DebugN(\"-->\",parents);
string element;
dynAppend(nodes,\"CMS_RPC\");
 for (int i = 1; i<=dynlen(nodes); i++)
 	{  
        
               if(!(strpos(nodes[i],\"&\")>-1))
               {
               fwCU_getDevDp(nodes[i],type);
               element = type + \".fsm.currentState\";
                   	
               }
               else
               {
                 string new;
                 fwCU_getDevDp(nodes[i],type);
                 int pos = strpos(type,\"|rpc\");
                 //DebugN(pos,\"ss\");
                 if (pos >0)
                 { 
                 new = substr(type,pos +1,9);
                 strreplace(type,new,\"\");
                 }
                 element = type + \".fsm.currentState\";
                
                 //DebugN(element,\"-a-a\",exceptionInfo);
               }
              
              fwArchive_get(element,exists,aClassName,aType,aiType ,dband, attime,isAct,exceptionInfo); 
              
              if(!exists)
                 fwArchive_set(element , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH ,deadband, 10000,exceptionInfo);
//                else
//                  DebugN(\"Gia esiste\");
               }


}
void LinkAll()
{
  bool newLink = false;
DebugN(\"Start Linking...\");
string panel;
  dpGet(getSystemName()+\"CMS_RPCfwSupervisor.Status.library\",panel);
  //panel = \"DELBUXCBUSC\";
  if(strpos(panel,\"DEL\")>-1)
  {
   Cancella();
   newLink = true;
    }
  
 string ok = \"OK\";

  if(strpos(panel,\"BUSC\")>-1)
  {
    if(RPCfwSupervisor_getComponent(\"BarrelHV\")!=\"\")
    {
    LinkHV(\"BarrelHV\",\"_W\");
    LinkHardware(\"BarrelHV\",\"US\");    
    DebugN(\"USC component Linked\");
    }
    else
    { ok = ok + \"BUSC\";
      DebugN(\"USC component not found, please restart the project\");
    }
  newLink = true;
    }
  if(strpos(panel,\"BUXC\")>-1)
  {
  if(RPCfwSupervisor_getComponent(\"BarrelLV\")!=\"\")
    {
//  LinkHV(\"BarrelHV\",\"_W\");
   LinkLV(\"BarrelLV\",\"_W\");
    LinkLBB(\"BarrelLV\",\"_W\");
    LinkT(\"BarrelT\",\"_W\");  
    LinkHardware(\"BarrelLV\",\"UX\");
  DebugN(\"UXC component Linked\");
  }
  else
  {
    ok = ok + \"BUXC\";
    DebugN(\"UXC component not found, please restart the project\");
  }
  newLink = true;
  } 
   dpSet(getSystemName()+\"CMS_RPCfwSupervisor.Status.library\",ok);  
 DebugN(\"Linking Complete\");
 if(newLink)
 {
   DebugN(\"Refreshing db ....\");
   SetdbforFsm();
   DebugN(\"DB ready\");
   
   }
}
void Cancella()
{
string parent,type;
dyn_string systemName,parents,nodes,exInfo;

fwTree_getAllTreeNodes(\"CMS_RPC\",nodes,exInfo);
//DebugN(nodes);
//fwFsmTree_getChildrenRec(\"\",parents);
//DebugN(\"-->\",parents);

 for (int i = 1; i<=dynlen(nodes); i++)
 	{
 	        if(strpos(nodes[i],\"&\")>-1)
                  {
                 fwTree_getParent(nodes[i],parent,exInfo);
 	        //rent = strrtrim(nodes[i],\"_\"+name);
 		fwCU_getType(parent,type);
                // fwFsmTree_getChildrenRec(parent,parents);
 		//DebugN(\"-->\",parents,parent,nodes[i]);
  		//if((type == \"RPC_Chamber\")||(type == \"RPC_Sector\"))
  		  fwTree_removeNode(parent,nodes[i],exInfo);//DebugN(parent,nodes[i]);
               	}
 	}


}
void StartFSMforMTCC()
{
fwFsmTree_startTreeNode(\"CMS_RPC\", 0);
fwFsmTree_startTreeNode(\"RPC_BARREL\", 0);
fwFsmTree_startTreeNode(\"RPC_WP1\",1);
fwFsmTree_startTreeNode(\"RPC_WP2\",1);

}

string getCU(string sys,string name)
{
//int type;
dyn_string exInfo;
 string parent;
 fwTree_getCUName(sys+name,parent,exInfo); 
    return parent;  

 }

void getNodesOfType(string sys,string topnode, string name, dyn_string & nodes,string boe)
{
  dyn_string exInfo,children;
  string type;
  //dyn_string device,tipo;
  //device = strsplit(name,\"_\");
  //bool flag= true;
  fwTree_getChildren(sys+topnode,children,exInfo);
  //DebugN(\"cas\",children);
  if(dynlen(children)!=0)
  {
    for(int i = 1;i<=dynlen(children);i++)
      {

        fwCU_getType(children[i],type);
//         if(strpos(children[i],\"/\")==-1)
//            DebugN(type,name,sys+getCU(sys,children[i])+\"::\"+children[i]);
        if((strpos(children[i],\"/\")==-1)&&(strpos(children[i],boe)>-1)&&(strpos(children[i],name)>-1))
        {
          //DebugN(\"OLE\",children[i]);
           dynAppend(nodes,children[i]);
         }
        getNodesOfType(sys,children[i],name,nodes,boe);
        }
    }
}

void LinkHV(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"\")
   {
   
   fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"_HV\",nodes,boe);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_HV\"));
        label = substr(parent,strpos(nodes[i],\"_RB\"));
	DebugN(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
 	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
        {
 	  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_HV\",0);
          fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
          }		
		
    }
DebugN(\"HV Hardware Component Imported\");
}
else
	DebugN(\"HV Hardware Component not founded\");
    
}
void LinkLV(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName);
   
  if(sys!= \"\")
   {
   fwFsmTree_importType(\"RPC_LV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"_LV\",nodes,boe);
   DebugN(nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_LV\"));
        label = substr(parent,strpos(nodes[i],\"_RB\"));
	//DebugN(parent,\"---->\",nodes[i]);
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
          	{  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_LV\",0);
         fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
       } 		
		
    }
DebugN(\"LV Hardware Component Imported\");
}
else
	DebugN(\"LV Hardware Component not founded\");
    
}
void LinkLBB(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"\")
   {
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"LBB\",nodes,boe);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	if(boe==\"_W\")
           parent = substr(nodes[i],0,strpos(nodes[i],\"_LBB\"));
        else
	  parent = substr(nodes[i],0,strpos(nodes[i],\"_RE\"))+\"_R3\";
        label = substr(parent,strpos(nodes[i],\"_S\"));
        DebugN(nodes[i],getCU(sys,nodes[i])+\"::\"+nodes[i],parent);
 	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
          	 { fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_LBBLV\",0);
        fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
      }	
           //DebugN(\"Inserting...\",parent,getCU(sys,nodes[i])+\"::\"+nodes[i]);	
		
    }
DebugN(\"LBB Hardware Component Imported\");
}
else
	DebugN(\"LBB Hardware Component not founded\");
    
}    
void LinkT(string compName,string boe)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"\")
   {
   fwFsmTree_importType(\"RPC_T\",strrtrim(sys,\":\"));
   getNodesOfType(sys,\"FSM\",\"_T\",nodes,boe);
   DebugN(nodes);
   for (int i = 1; i<=dynlen(nodes); i++)
    {
	parent = substr(nodes[i],0,strpos(nodes[i],\"_T\"));
	label = substr(parent,strpos(nodes[i],\"_RB\"));
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
        {
	  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_T\",0);
        fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
          }		
		
    }
DebugN(\"t Hardware Component Imported\");
}
else
	DebugN(\"t Hardware Component not founded\");
    
}    
void LinkHardware(string compName,string pos)
{
 dyn_string nodes,exInfo;
 string parent,type,label;
  string sys = RPCfwSupervisor_getComponent(compName); 
  if(sys!= \"\")
   {
   string boe,wod;
   if(compName[0]==\"B\")
   {
     boe = \"RB\";
     wod = \"_W\";   
   }
   else
   {
     wod = \"_D\";
     boe = \"RE\";
   }
   //fwFsmTree_importType(\"RPC_HV\",strrtrim(sys,\":\"));
  
   ////////////// INSERT BOARD
   
    getNodesOfType(sys,\"FSM\",\"Bd\",nodes,boe);
   fwFsmTree_importType(\"RPC_Boards\",strrtrim(sys,\":\"));
   parent = \"RPC_\"+boe+\"_\"+pos+\"C\";
     for (int i = 1; i<=dynlen(nodes); i++)
     {
 	//parent = substr(nodes[i],0,strpos(nodes[i],wod));
 	//DebugN(\"questo\",parent);
         label = \"Boards\" + i;
  	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(sys,nodes[i])+\"::\"+nodes[i])))
           {
           DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
           if(strpos(nodes[i],pos)>-1)
           fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_Boards\",0);
          //  fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);		
           }
     }
   dynClear(nodes);
   
    ////////////// INSERT CRATE
   
    getNodesOfType(sys,\"FSM\",\"Crate\",nodes,\"PC\");
    // fwFsmTree_importType(\"RPC_Boards\",strrtrim(sys,\":\"));
   //DebugN(nodes);
     for (int i = 1; i<=dynlen(nodes); i++)
     {
 	//parent = substr(nodes[i],0,strpos(nodes[i],wod));
 	//DebugN(\"questo\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
  	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(sys,nodes[i])+\"::\"+nodes[i])))
           {
        //    label = \"Crate\" + i;
           DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
           fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_Boards\",0);
      //      fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);		
           }
     }
   dynClear(nodes);
   
 ////////////// INSERT BC   

getNodesOfType(sys,\"FSM\",\"_BC\",nodes,pos);
fwFsmTree_importType(\"RPC_BC\",strrtrim(sys,\":\")); 
for (int i = 1; i<=dynlen(nodes); i++)
    {
// 	parent = substr(nodes[i],0,strpos(nodes[i],\"_BC\"));
// 	DebugN(\"i\",nodes,parent);
//         parent = strreplace(parent,\"BA\",\"RB_BA\");
//         DebugN(\"o\",nodes,parent);
  //parent = \"RPC_HARDWARE\";
  if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(sys+getCU(sys,nodes[i])+\"::\"+nodes[i])))
    {
    DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
    if(strpos(nodes[i],pos)>-1)
    fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_BC\",0);
    // fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);
    }		
   }
  dynClear(nodes);
 
 
  
   if(pos[1]==\"X\")
  {
  
      ////////////// INSERT MAO
     
     getNodesOfType(sys,\"FSM\",\"_MAO\",nodes,wod);
  //DebugN(nodes);
  for (int i = 1; i<=dynlen(nodes); i++)
    {
	//parent = substr(nodes[i],0,strpos(nodes[i],\"_Boards\"));
        
	if((fwFsmTree_isNode(parent))&&(!fwFsmTree_isNode(getCU(sys,nodes[i])+\"::\"+nodes[i])))
        {
          DebugN(\"Insert...\",parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i]);
	  fwFsmTree_addNode(parent,sys+getCU(sys,nodes[i])+\"::\"+nodes[i],\"RPC_BC\",0);
           fwFsmTree_setNodeLabel(sys+getCU(sys,nodes[i])+\"::\"+nodes[i],label);    
          }
      }
  }
  
  DebugN(\"Hardware Component Imported\");
  }
else
	DebugN(\"Hardware Component not founded\");    

}
" 0
 E E E
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0