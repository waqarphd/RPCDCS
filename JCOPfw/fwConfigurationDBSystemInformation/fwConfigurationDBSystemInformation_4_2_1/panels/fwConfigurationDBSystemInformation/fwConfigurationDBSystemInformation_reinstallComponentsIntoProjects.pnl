V 11
1
LANG:1 18 tfComponentPattern
PANEL,-1 -1 1179 648 N "_3DFace" 5
"$fsm"
"$hostname"
"$item"
"$project"
"$type"
"main()
{
  dyn_string projectNames;
  dyn_string groupNames;
  dyn_string hostnames; 
  //ILDE
  dyn_string componentNames; 
  string componentPattern = tfComponentPattern.text;
  //ILDE
  dyn_string ips;
  dyn_string macs;
  dyn_string ips2;
  dyn_string macs2;
  dyn_string bmc_ips;
  dyn_string bmc_ips2;
  dyn_string ds;  
  
  dynClear(projectNames);
  dynClear(hostnames);
  dynClear(groupNames);
  
  

  tbProjectsGroups.deleteAllLines();
  if(fwInstallationDB_connect() != 0)
  {
    ChildPanelOnCentral(\"vision/MessageInfo1\", \"ERROR: DB Connection failed\", makeDynString(\"$1:DB Connection failed.\\nPlease check DB connection parameters\"));
  }
  
  if(fwInstallationDB_getComponentGroups(groupNames) != 0)
  {
    ChildPanelOnCentral(\"vision/MessageInfo1\", \"DB ERROR\", makeDynString(\"$1:Could not read list of FW Component Groups from DB\"));
    return;
  }

  //Build the computer-project matrix for filtering:
  if($fsm)
  {
    hostnames = strsplit($hostname, \"|\");
    projectNames = strsplit($project, \"|\");
    for(int i = 1; i <= dynlen(hostnames); i++)
    {
      strreplace(hostnames[i], \" \", \"\");
      strreplace(projectNames[i], \" \", \"\");
      computerProjects[i][1] = hostnames[i];
      computerProjects[i][2] = projectNames[i];
      tfComputerPattern.text = dynlen(hostnames)>1?\"Multiple selection\":hostnames[1];
      tfComputerPattern.enabled = false;
      tfProjectPattern.text = dynlen(projectNames)>1?\"Multiple selection\":projectNames[1];
      tfProjectPattern.enabled = false;
    }
  }
  else
  {
    switch($type)
    {
      case FW_INST_SYSTEM_TYPE: 
        if(fwInstallationDB_getHosts(hostnames, ips, macs, ips2, macs2, bmc_ips, bmc_ips2) != 0){
          ChildPanelOnCentral(\"vision/MessageInfo1\", \"DB ERROR\", makeDynString(\"$1:Could not read list of computers from DB\"));
          return;
        }  
      break; //end of system
    
      case FW_INST_COMPUTER_TYPE: dynAppend(hostnames, $item);
        tfComputerPattern.text = $item;
        tfComputerPattern.enabled = false;
        break; //end of computer
    
      case FW_INST_PROJECT_TYPE: ds = strsplit($item, FW_SYS_STAT_SEPARATOR);
        dynAppend(hostnames, ds[1]);
        dynAppend(projectNames, ds[2]);
        tfComputerPattern.text = ds[1];
        tfComputerPattern.enabled = false;
        tfProjectPattern.text = ds[2];
        tfProjectPattern.enabled = false;
      
        computerProjects[1][1] = ds[1];
        computerProjects[1][2] = ds[2];
      

        break; //end of project
    
      default: return;
             
    }//end of switch

  
    for(int i = 1 ; i <= dynlen(hostnames); i++)
    {
      computerProjects[i][1] = hostnames[i];    

      dynClear(projectNames);
    
      if($type != FW_INST_PROJECT_TYPE)
      {
        if(fwInstallationDB_getPvssProjects(projectNames, computerProjects[i][1]) != 0){
          ChildPanelOnCentral(\"vision/MessageInfo1\", \"DB ERROR\", makeDynString(\"$1:Could not read list of project from DB\"));
          return;
        }
      }    
      for(int j = 2; j <= (dynlen(projectNames) + 1); j++)
      {
        computerProjects[i][j] = projectNames[j-1];
      }//end of loop over j    
    }
  }
//  DebugN(\"computerProjects: \", computerProjects);
  search();
  //Access Control:
  dyn_string ex;
  fwAccessControl_setupPanel(\"applyComponentReinstallationAcCB\", ex);
  if(dynlen(ex))
    fwExceptionHandling_display(ex);
}



" 0
 E E E E 1 -1 -1 0  80 56
""0  1
E "#uses \"fwInstallationDB.ctl\"
#uses \"fwSystemOverview/fwSystemOverview.ctl\"
    
dyn_dyn_string computerProjects;    
string computerPattern;
string projectPattern;
//ILDE
string componentPattern;

search()
{
  computerPattern = tfComputerPattern.text;
  projectPattern = tfProjectPattern.text;
  //ILDE
  componentPattern = tfComponentPattern.text;
  updatePanel(computerPattern, projectPattern, componentPattern);
  
}


void applyComponentReinstallationAcCB(string s1, string s2)
{
  disableAllInComponentReinstallationPanel();
  
  dyn_string exceptionInfo;
  bool hasExpertPrivilege=FALSE;
  if (!fwInstallation_checkInstalledComponent(\"fwSystemOverview\"))
  {
    string expertPrivilege = fwSysOverview_getExpertPrivilege(2);
    if (expertPrivilege == \"\")
    {
      DebugN(\"No expert privilege defined!\");
      return;
    }
 
    for(int i = 1; i <= dynlen(computerProjects); i++)
    {
      string projectDp;
      fwSysOverview_getProjectDp(computerProjects[i][1], computerProjects[i][2], projectDp, exceptionInfo);
      string domain;
      if (projectDp == \"\" || dynlen(exceptionInfo) >0 || !dpExists(projectDp))
      {
        fwSysOverview_getACDomain(domain);  
      }
      else
        fwSysOverview_getACDomain(domain, projectDp);
   
      if(domain == \"\") //AC not yet configured. Enable access 
      {
        hasExpertPrivilege = true;
        break;
      }
      else
      {
        fwAccessControl_isGranted(domain + \":\" + expertPrivilege, hasExpertPrivilege, exceptionInfo);
        // check and handle exceptions that might have been thrown by the function above
        if (dynlen(exceptionInfo)) {fwAccessControl_displayException(exceptionInfo);return;};
        if (!hasExpertPrivilege)
          break;
      }
    }
  }
  else
  {
    hasExpertPrivilege = true;
  }
  // enable UI elements, depending on the access rights:
  if (hasExpertPrivilege)
  {
    btOk.enabled = true;
    btApply.enabled = true;
    cbRestartProject.enabled = true;
    cbOverwrite.enabled = true;
  }
}

void disableAllInComponentReinstallationPanel()
{
  btOk.enabled = false;
  btApply.enabled = false;
  cbRestartProject.enabled = false;
  cbOverwrite.enabled = false;
}    



int isComponentInstalled(string component, string project, string host, bool &isOk)
{
  dyn_dyn_mixed componentsInfo;
  fwInstallationDB_getCurrentProjectComponents(componentsInfo, project, host);
  isOk = true;
  
  for(int i = 1; i <= dynlen(componentsInfo); i++ )
  {
    if(component == componentsInfo[i][1] + \"_\" + componentsInfo[i][2])
    {
      if(componentsInfo[i][FW_INSTALLATION_DB_COMPONENT_INSTALLATION_NOT_OK_IDX] == \"1\")
        isOk = false;
      
      return 1;
    }
  }
  return 0;
}

void updatePanel(string computerPattern,string projectPattern,string componentPattern)
{
   //ILDE
  int row = 0;
  string group;
  dyn_string groupNames;
  dyn_int groupIds;
  string header;
  dyn_dyn_mixed reinstallationsInfo;
 
  for(int i = 1; i <= tbProjectsGroups.columnCount(); i++)
  {
    getValue(\"tbProjectsGroups\", \"columnHeader\", i-1, header);
    if(header == \"\")
      break;
    else
    {
      tbProjectsGroups.deleteAllLines();
    }
    getValue(\"tbProjectsGroups\", \"columnHeader\", i-1, header);
  }
  //ILDE: delete column headers
  int columnCount = tbProjectsGroups.columnCount();
  for(int i = 1; i <= columnCount; i++ )
  {
    getValue(\"tbProjectsGroups\", \"columnHeader\", 0, header);
    //Debug(i, \"Header deleted: \", header, tbProjectsGroups.columnCount());
     tbProjectsGroups.deleteColumn(0);
  }
  //ILDE end
  //ILDE: column labels with unique name_version and matching the component pattern
  //ILDE is labeling the table columns
   dyn_dyn_mixed componentsInfo; //array to store components information of a project
   dyn_string componentsUniques; //array to store unique componen of our distributed system
   int componentColumn = 1; 
   string component;
   for(int i = 1; i <= dynlen(computerProjects); i++ )
   {
     for(int j = 2; j <= dynlen(computerProjects[i]); j++)
     {
       dynClear(componentsInfo);
       fwInstallationDB_getProjectComponents(componentsInfo, computerProjects[i][j], computerProjects[i][1]);
       for(int k = 1; k <= dynlen(componentsInfo); k++)
       {
         //DebugN(componentsInfo[k]);
 
         component = componentsInfo[k][1] + \"_\" + componentsInfo[k][2];
         if(dynContains (componentsUniques, component) == 0 &&
            patternMatch(\"*\" + componentPattern + \"*\", component))
         {
           dynAppend(componentsUniques, component);
           //tbProjectsGroups.insertColumn(componentColumn-1);
           //tbProjectsGroups.columnName(componentColumn-1, \"#\" + componentColumn);
           //tbProjectsGroups.columnWidth(componentColumn-1, 192);
           //tbProjectsGroups.columnHeader(componentColumn-1, component);    
           //tbProjectsGroups.columnVisibility(componentColumn-1, true);
           //componentColumn++;
         }
       }
     }
   }
   //sorting the column headers
   dynSortAsc(componentsUniques);
   for(int k = 1; k <= dynlen(componentsUniques); k++)
   {
     //DebugN(componentsInfo[k]);
     tbProjectsGroups.insertColumn(k-1);
     tbProjectsGroups.columnName(k-1, \"#\" + k);
     tbProjectsGroups.columnWidth(k-1, 192);
     tbProjectsGroups.columnHeader(k-1, componentsUniques[k]);    
     tbProjectsGroups.columnVisibility(k-1, true);
   }
  //ILDE end
  //ILDE 
  for(int i = 1; i <= dynlen(computerProjects); i++ )
  {
    for(int j = 2; j <= dynlen(computerProjects[i]); j++)
    {
      dynClear(reinstallationsInfo);
      fwInstallationDB_getProjectPendingReinstallations(computerProjects[i][1], computerProjects[i][j], reinstallationsInfo);
      
//      if(patternMatch(\"*\" + computerPattern + \"*\", computerProjects[i][1]) &&
//         patternMatch(\"*\" + projectPattern + \"*\", computerProjects[i][j]))  
      if((computerPattern == \"Multiple selection\" && 
         projectPattern == \"Multiple selection\") || 
         (patternMatch(\"*\" + computerPattern + \"*\", computerProjects[i][1]) &&
         patternMatch(\"*\" + projectPattern + \"*\", computerProjects[i][j])))  
      {
        tbProjectsGroups.appendLines(1);
        tbProjectsGroups.rowHeader(row, computerProjects[i][j] + \"@\" + computerProjects[i][1]);
                      
        int columnCount = tbProjectsGroups.columnCount();
        for(int z = 0; z <= columnCount; ++z )
        {
          string component;
          getValue(\"tbProjectsGroups\", \"columnHeader\", z, component);
          dyn_string ds = strsplit(component, \"_\");
          bool isOk = false;
          if(isComponentInstalled(component, computerProjects[i][j], computerProjects[i][1], isOk) == 1)
          {
            //check if component is pending of reinstallation:
            string text = \"INSTALLED\";
            string color = \"_Window\";
            
            if(!isOk)
              color = \"FwAlarmWarnAck\";
                            
            for(int k = 1; k <= dynlen(reinstallationsInfo); k++)
            {
              //DebugN(\"Comparing\", componentName, reinstallationsInfo[k][1], componentVersion, reinstallationsInfo[k][2]);
              if(ds[1] == reinstallationsInfo[k][1] && ds[2] == reinstallationsInfo[k][2])
              {
                text = \"PENDING\";
                break;
              }
            }
            
            tbProjectsGroups.cellValueRC(row, \"#\" + (z+1), text);
            tbProjectsGroups.cellBackColRC(row, \"#\" + (z+1), color);
          }
        }
        row++;;
      }
    } 
  }
 
}


registerComponentsReinstallationInProjects(bool updatePanel = true)
{
  bool overwrite;
  int restartProject = 0;
  string project;
  string computer;
  string computerProject;
  dyn_string ds;
  string tag;
  string component;
  string version;
  string descFile;
  string componentVersion;
  dyn_dyn_mixed componentsInfo;
  
  overwrite = cbOverwrite.state(0); 
  
  if(cbRestartProject.state(0))
    restartProject = 1;
  
   string description = myPanelName() +\": Registering reinstallations.\" ;
   //loop for every project@host  
   for(int i = 1; i <= tbProjectsGroups.lineCount(); i++) //scan full table looking for actions to be performed.
   {
     //get project and computer names 
     project = \"\";
     computer = \"\";
     getValue(\"tbProjectsGroups\", \"rowHeader\", i-1, computerProject);
     if(computerProject == \"\")
       return;
    
     ds = strsplit(computerProject, \"@\");
    
     if(dynlen(ds) < 2)
     {
       ChildPanelOnCentral(\"vision/MessageInfo1\", \"ERROR\", makeDynString(\"$1:Invalid project/computer names\"));
       return;
     }
     project = ds[1];
     computer = ds[2];
    
     if(project == \"\" || computer == \"\")
       continue; 
     
     //Clean any pending reinstallation in the DB
     fwInstallationDB_unregisterProjectReinstallations(computer, project);
     
     for(int j = 1; j <= tbProjectsGroups.columnCount(); j++)
     {
       tag = \"\";
       getMultiValue(\"tbProjectsGroups\", \"cellValueRC\", i-1, \"#\"+j, tag,
                    \"tbProjectsGroups\", \"columnHeader\", j-1, componentVersion);
       if(tag == \"REINSTALL\")
       {
         ds = strsplit(componentVersion, \"_\");
         component = ds[1];
         version = ds[2];
         //getting descFile
         dynClear(componentsInfo);
         fwInstallationDB_getProjectComponents(componentsInfo, project, computer);
         descFile = \"\";
         for(int k = 1; k <= dynlen(componentsInfo); k++)
         {
           if(componentVersion == componentsInfo[k][1] + \"_\" + componentsInfo[k][2])
           {
             descFile = componentsInfo[k][4];
             break;
           }
         }
         if(descFile == \"\")
         {
           DebugN(\"component: \" + componentVersion + \" can not be reinstalled because it is not yet installed for project: \" + project );
           return;
         }
         description += \" Computer: \" +computer + \" Project: \" + project + \" Component:\"+component + \"Version:\" + version;
         //Register 
         fwInstallationDB_registerReinstallation(computer, project, component, version, descFile, restartProject, overwrite);
       }
     }
   }
   fwConfigurationDBSystemInformation_logAction(description);
 }

registerGroupsInProjects(bool updatePanel = true)
{
  string project;
  string group;
  string tag;
  string computer;
  int error = 0;
  //int col;
  bool silent, force, overwrite;
  string computerProject;
  dyn_dyn_mixed componentsInfo;
  dyn_dyn_mixed groupComponentsInfo;
  string conflictingComponentsNames;
  string conflictingComponentsVersions;
  string conflictingComponentsFiles;
  string conflictingExistingComponentsVersions;
  string conflictingExistingComponentsFiles;
  dyn_string ds;
  dyn_float df;
  bool visible = true;
  int restartProject = 1;
  
  silent = cbSilent.state(0);
  force = cbForce.state(0);
  overwrite = cbOverwrite.state(0);
  
  if(cbRestartProject.state(0))
    restartProject = 0;
  
  //DebugN(\"Total number of columns: \", tbProjectsGroups.columnCount());
  
  for(int i = 1; i <= tbProjectsGroups.lineCount(); i++) //scan full table looking for actions to be performed.
  {
    project = \"\";
    computer = \"\";
    
    getValue(\"tbProjectsGroups\", \"rowHeader\", i-1, computerProject);
    if(computerProject == \"\")
      return;
    
    ds = strsplit(computerProject, \"@\");
    
    if(dynlen(ds) < 2)
    {
      ChildPanelOnCentral(\"vision/MessageInfo1\", \"ERROR\", makeDynString(\"$1:Invalid project/computer names\"));
      return;
    }
    project = ds[1];
    computer = ds[2];
    
    if(project == \"\" || computer == \"\")
      continue;

//    fwInstallationDB_getProjectComponents(componentsInfo, project, computer);

        
    for(int j = 1; j <= tbProjectsGroups.columnCount(); j++){
      
      //col = j - 1;
      tag = \"\";
      
      getMultiValue(\"tbProjectsGroups\", \"cellValueRC\", i-1, \"#\"+j, tag,
                    \"tbProjectsGroups\", \"columnHeader\", j-1, group,
                    \"tbProjectsGroups\", \"columnVisibility\", j-1, visible);
      
      if(!visible)
        break;  //do not iterate over columns that are not shown
      
//      DebugN(\"project, computer, group, tag\", project, computer, group, tag);
      
      if(tag == \"Register\"){
         dynClear(componentsInfo);
         fwInstallationDB_getProjectComponents(componentsInfo, project, computer); //Get list of components already assigned to this project

        //DebugN(\"Adding new group \" + group + \" to project \" + project + \" computer \" + computer);
        //Check if there are conflicts at the component level for each of the projects:
        fwInstallationDB_getGroupComponents(group, groupComponentsInfo);  
        conflictingComponentsNames = \"\";  
        conflictingComponentsVersions = \"\";
        conflictingComponentsFiles = \"\";
        conflictingExistingComponentsVersions = \"\";  
        conflictingExistingComponentsFiles = \"\";  
        
        for(int k = 1 ; k <= dynlen(groupComponentsInfo); k++)
        {
          for(int l = 1; l <= dynlen(componentsInfo); l++)
          {
//             if(groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX ] == componentsInfo[l][FW_INSTALLATION_DB_COMPONENT_NAME_IDX ] &&
//                groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX ] != componentsInfo[l][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX ])
             if(groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX ] == componentsInfo[l][FW_INSTALLATION_DB_COMPONENT_NAME_IDX ])
             {
               //if we are dealing with the same component name, we impose that version and xml file are the same.
               if(groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX ] != componentsInfo[l][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX ] ||
                  groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_DESC_FILE_IDX ] != componentsInfo[l][FW_INSTALLATION_DB_COMPONENT_DESC_FILE_IDX]) 
              {
                conflictingComponentsNames += groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX ] + \"|\";
                conflictingComponentsVersions += groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX ] + \"|\"; 
                conflictingComponentsFiles += groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_DESC_FILE_IDX ] + \"|\"; 
                conflictingExistingComponentsVersions += componentsInfo[l][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX ] + \"|\"; 
                conflictingExistingComponentsFiles += componentsInfo[l][FW_INSTALLATION_DB_COMPONENT_DESC_FILE_IDX ] + \"|\"; 
              }
             }
          }
        }
        
        //DebugN(\"This are so far the conflicts: \", conflictingComponentsNames);
        
        if(conflictingComponentsNames != \"\")
        {
          DebugN(\"WARNING: Group: \"+ group +\" conflict for project: \" + project + \". There are conflicts at the component level: \" + conflictingComponentsNames);
          ChildPanelOnCentralModalReturn(\"fwConfigurationDBSystemInformation/fwConfigurationDBSystemInformation_showConflicts.pnl\", \"Group conflicts\", makeDynString(\"$project:\"+ project,\"$group:\" + group, \"$components:\" + conflictingComponentsNames, \"$versions:\" + conflictingComponentsVersions, \"$existingVersions:\" + conflictingExistingComponentsVersions, \"$files:\" + conflictingComponentsFiles, \"$existingFiles:\" + + conflictingExistingComponentsFiles), df, ds);
          if(dynlen(df) && df[1] < 1.)
            return;
          else if(dynlen(df) && df[1] < 2.) //Skip
            continue;
          
        }
          
        //DebugN(\"registering \",group, overwrite, force, silent, \"\", project, computer, restartProject);
        
        if(fwInstallationDB_registerGroupInProject(group, overwrite, force, silent, restartProject, \"\", project, computer) == 0)
        {
          setValue(\"tbProjectsGroups\", \"cellValueRC\", i-1, \"#\"+j, \"Registered\");      
        }else{
          ChildPanelOnCentralModal(\"vision/MessageInfo1\", \"DB registration error\", makeDynString(\"$1: Could not register group of FW Components\\n\" + group + \" in project: \" + project + \"\\ncomputer: \" + computer));
        }
      }
      else if(tag == \"Unregister\"){
        if(fwInstallationDB_unregisterProjectGroup(group, project, computer) == 0)
        {
          setValue(\"tbProjectsGroups\", \"cellValueRC\", i-1, \"#\"+j, \"\");      
        }
        else
        {
          ChildPanelOnCentralModal(\"vision/MessageInfo1\", \"DB unregistration error\", makeDynString(\"$1: Could not unregister group of FW Components\\n\" + group + \" from project: \" + project + \" computer: \" + computer));
        }
      }
    }//end of loop over j => groups  
    
  }//Loop over all projects
  
}//end of function


clearTableValues()
{
   for(int i = 1; i <= this.lineCount(); i++)
    for(int j = 1; j <= this.columnCount(); j++)
      this.cellValueRC(i-1, \"#\" + j, \"\");
 }










" 0
 2
"CBRef" "1"
"EClose" E
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
25 5
"tbProjectsGroups"
""
1 12 292 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main(int row, string column)
{
  int ret;
  
  dyn_string menu = makeDynString(\"PUSH_BUTTON, Select All, 1, 1\",
                                  \"PUSH_BUTTON, Unselect All, 2, 1\"
                                 ); 
  popupMenu(menu, ret);
  
  if(ret == 1)
  {
    for(int i = 1; i <= tbProjectsGroups.lineCount(); i++)
    {
      string cellContent;
      getValue(\"tbProjectsGroups\", \"cellValueRC\", i-1, column, cellContent);
      if(cellContent == \"INSTALLED\")
        setValue(\"tbProjectsGroups\", \"cellValueRC\", i-1, column, \"REINSTALL\");
    }
  }
  else if(ret == 2)
  {
    for(int i = 1; i <= tbProjectsGroups.lineCount(); i++)
    {
      string cellContent;
      getValue(\"tbProjectsGroups\", \"cellValueRC\", i-1, column, cellContent);
      if(cellContent == \"REINSTALL\")
        setValue(\"tbProjectsGroups\", \"cellValueRC\", i-1, column, \"INSTALLED\");
    }
  }  
}" 0
 E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0  10 290 1172 595
"main()
{
  this.tableMode(TABLE_SELECT_MULTIPLE);
  this.selectByClick(TABLE_SELECT_LINE_COLUMN);

}" 0
"main(int row, string column, string value)
{
  string project;
  string host;
  string hostProject;
  dyn_string ds;
  getValue(\"\", \"rowHeader\", row, hostProject);
  
  ds = strsplit(hostProject, \"@\");
  if(dynlen(ds) < 2)
  {
    ChildPanelOnCentral(\"vision/MessageInfo1\", \"ERROR\", makeDynString(\"$1:Invalid project/computer names\"));
    return; 
  }
  project = ds[1];
  host = ds[2];
  
  if (project == \"\" || host == \"\")
     return;
  
  //Check access control:
  dyn_string exceptionInfo;
  bool hasExpertPrivilege=FALSE;
  if (!fwInstallation_checkInstalledComponent(\"fwSystemOverview\"))
  {
    string domain;
    string projectDp;
    fwSysOverview_getProjectDp(host, project, projectDp, exceptionInfo);
    if (projectDp == \"\" || dynlen(exceptionInfo) > 0 || !dpExists(projectDp))
    {
      fwSysOverview_getACDomain(domain);
    }
    else
      fwSysOverview_getACDomain(domain, projectDp);
  
    if(domain == \"\") //AC not yet configured. Enable access 
      hasExpertPrivilege = true;
    else
    {
      string expertPrivilege = fwSysOverview_getExpertPrivilege(2);
      // check the current  privilege level 
      if (expertPrivilege == \"\")
      {
        DebugN(\"No expert privilege defined!\");
        return;
      }
      fwAccessControl_isGranted(domain + \":\" +expertPrivilege, hasExpertPrivilege, exceptionInfo);
    
      // check and handle exceptions that might have been thrown by the function above
      if (dynlen(exceptionInfo)) {fwAccessControl_displayException(exceptionInfo);return;};
    }
  }
  else
    hasExpertPrivilege = true;
  
  // enable UI elements, depending on the access rights:
  if (!hasExpertPrivilege)
    return;

 
  
  if(value == \"INSTALLED\")
    this.cellValueRC(row, column, \"REINSTALL\");
  else if(value == \"REINSTALL\")
    this.cellValueRC(row, column, \"INSTALLED\");

}




" 0
 1 1 1 0 1 
20 20 "" 1 1
LANG:1 2 #1
10 128
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
13 6
"btApply"
""
1 992 612 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  990 610 1076 640

T 
1
LANG:1 5 Apply
"main()
{
  //ILDE: 
  registerComponentsReinstallationInProjects();
  updatePanel(computerPattern, projectPattern, componentPattern);
}" 0
 E E E
13 7
"PUSH_BUTTON2"
""
1 1088 612 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  1086 610 1172 640

T 
1
LANG:1 6 Cancel
"main()
{
  PanelOffReturn(makeDynFloat(0.), makeDynString(\"\"));
}" 0
 E E E
13 8
"btOk"
""
1 902 612 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  900 610 986 640

T 
1
LANG:1 2 OK
"main()
{
  registerComponentsReinstallationInProjects(false);
  PanelOffReturn(makeDynFloat(1.), makeDynString(\"OK\"));
}" 0
 E E E
2 9
"PRIMITIVE_TEXT1"
""
1 12 32 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 12 12 266 27
0 2 2 "0s" 0 0 0 192 0 0  12 12 1
1
LANG:1 25 Arial,8,-1,5,75,0,0,0,0,0
0 1
LANG:1 42 Assign Groups of FW Components to Projects
20 10
"cbRestartProject"
""
1 32 212 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
13 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  30 210 214 234
1
T 
1
LANG:1 15 Restart Project

0 
1
LANG:1 0 
E E
0 0 0 0 0
1
E E
EE20 11
"cbOverwrite"
""
1 32 238.768292682927 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  30 237 214 261
1
T 
1
LANG:1 15 Overwrite Files

0 
1
LANG:1 0 
E E
0 0 0 0 0
1
E E
EE30 13
"FRAME1"
""
1 10 33 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
19 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 1 0 0.771615353120886 2 156.536693347011 0 E 10 33 401 151
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 19 Reinstallation Mode
2 14
"PRIMITIVE_TEXT2"
""
1 -74 92.2812649884501 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 0.962962962962963 -8 5.77777777777778 1 E 30 50 190 70
0 2 2 "0s" 0 0 0 64 0 0  30 50 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 24 Computer search pattern:
2 15
"PRIMITIVE_TEXT3"
""
1 -46 104.5274185875307 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
22 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 0.959048479373683 -6 7.19421860885275 1 E 30 80 190 100
0 2 2 "0s" 0 0 0 64 0 0  30 80 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 23 Project search pattern:
14 16
"tfComputerPattern"
""
1 162 52 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
23 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  160 50 284 73
3 "0s" 0 0 0 0 0 -1  E "main()
{
  this.text = \"\";
}" 0
 E
14 17
"tfProjectPattern"
""
1 162 82 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
25 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  160 80 284 103
3 "0s" 0 0 0 0 0 -1  E "main()
{
  this.text = \"\";
}" 0
 E
13 18
"PUSH_BUTTON4"
""
1 312 142 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
26 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  310 140 404 174

T 
1
LANG:1 6 Search
"main()
{
  search();
}
" 0
 E E E
2 19
"PRIMITIVE_TEXT4"
""
1 312 76 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
28 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 312 82 472 102
0 2 2 "0s" 0 0 0 64 0 0  312 82 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 30 Do NOT use wildcards, e.g. "*"
2 21
"PRIMITIVE_TEXT5"
""
1 -46 429.1395447230934 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
32 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1 0 0.959048479373683 -6 37.1942186088528 1 E 30 80 190 100
0 2 2 "0s" 0 0 0 64 0 0  30 80 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 25 Component search pattern:
14 22
"tfComponentPattern"
""
1 162 112 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
34 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  160 110 284 133
3 "0s" 0 0 0 0 0 -1  E "main()
{
  this.text = \"\";
}" 0
 E
2 23
"PRIMITIVE_TEXT6"
""
1 312 106 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
36 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 312 112 508 127
0 2 2 "0s" 0 0 0 192 0 0  312 112 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 38 e.g. "fwCore_4.0.0", "fwAccessControl"
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
