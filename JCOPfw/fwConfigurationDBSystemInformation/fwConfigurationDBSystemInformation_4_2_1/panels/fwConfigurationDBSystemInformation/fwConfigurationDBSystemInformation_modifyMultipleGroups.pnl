V 11
1
LANG:1 0 
PANEL,-1 -1 1043 494 N "_3DFace" 2
"$groupName"
"$groups"
"main()
{
  dyn_float df;
  dyn_string ds;
  
  if(fwInstallationDB_connect() != 0)
  {
    ChildPanelOnCentral(\"vision/MessageInfo1\", \"ERROR: DB Connection failed\", makeDynString(\"$1:DB Connection failed.\\nPlease check DB connection parameters\"));
  }

  //Refresh table.  
  //updateAvailableComponentsTable();
  //fwConfigurationDBSystemInformation_updateComponentTable(groupName);
}

  " 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"fwInstallation.ctl\"
#uses \"fwConfigurationDBSystemInformation/fwConfigurationDBSystemInformation.ctl\"
     
dyn_string computersProjects;

//register in groups:
registerInGroups()
{
  string componentName, componentVersion;
  dyn_string componentNames, componentVersions;
  string subComponentName, subComponentVersion;
  dyn_string descFiles;
  bool isSubComponent;
  string sourceDir;
  string groupName;
  int i;
  int j;
  string strComponentFile;
  string subStrComponentFile;
  string date;
  dyn_string dynRequiredComponents;
  dyn_string dynRequiredComponentNames;
  dyn_string dynRequiredComponentVersions;
  dyn_string dynInitFiles; 
  dyn_string dynDeleteFiles; 
  dyn_string dynPostInstallFiles; 
  dyn_string dynPostDeleteFiles; 
  dyn_string dynConfigFiles_general;
  dyn_string dynConfigFiles_windows;
  dyn_string dynConfigFiles_linux;
  dyn_string dynDplistFiles;
  dyn_string dynPanelFiles;
  dyn_string dynScriptFiles;
  dyn_string dynLibFiles;
  dyn_string dynComponentFiles;
  dyn_string dynSubComponents;
  dyn_string dynScriptsToBeAdded;
  dyn_string dynFileNames;
  //subcomponents:
  bool subIsSubComponent;
  dyn_string subRequiredComponents;
  dyn_string subInitFiles; 
  dyn_string subDeleteFiles; 
  dyn_string subPostInstallFiles; 
  dyn_string subPostDeleteFiles; 
  dyn_string subConfigFiles_general;
  dyn_string subConfigFiles_windows;
  dyn_string subConfigFiles_linux;
  dyn_string subDplistFiles;
  dyn_string subPanelFiles;
  dyn_string subScriptFiles;
  dyn_string subLibFiles;
  dyn_string subComponentFiles;
  dyn_string subSubComponents;
  dyn_string subScriptsToBeAdded;
  dyn_string subFileNames;
  dyn_string componentFilesInOrder;

  string xmlDesc;
  dyn_float df;
  dyn_string ds;
  dyn_dyn_mixed groupComponentsInfo;
  dyn_string descFilesInOrder;
  string dontRestartProject = \"no\";
  
  dyn_dyn_mixed groupComponents;
  bool bFound = false;
  dyn_string groups;
  string descFile, newDescFile, newComponentVersion;
  
  // retrieve the component names and the description files of the components to be installed
  sourceDir = txtSourceDir.text;

  for(  i = 0 ; i < tblAvailableComponents.lineCount(); i++)
  {
    if((tblAvailableComponents.cellValueRC(i, \"update\") == \"YES\"))
    {
      groupName = tblAvailableComponents.cellValueRC(i, \"group\"); 
      componentName = tblAvailableComponents.cellValueRC(i, \"component\"); 
      componentVersion = tblAvailableComponents.cellValueRC(i, \"version\");
      descFile = tblAvailableComponents.cellValueRC(i, \"descFile\");
      
      newComponentVersion = tblAvailableComponents.cellValueRC(i, \"newVersion\");
      newDescFile = tblAvailableComponents.cellValueRC(i, \"newDescFile\");
      
      if(access(descFile, R_OK)!= 0 || access(newDescFile, R_OK)!= 0)
      {
        ChildPanelOnCentral(\"vision/MessageInfo1\", \"File access error\", makeDynString(\"$1:Files cannot be accessed:\\n\" + descFile + \"\\n\" + newDescFile + \"\\nSubcomponents (if any) will not be deleted\"));
      }
      else
      {
        dynClear(dynRequiredComponents);
        dynClear(dynInitFiles);
        dynClear(dynDeleteFiles);
        dynClear(dynPostInstallFiles);
        dynClear(dynPostDeleteFiles);
        dynClear(dynConfigFiles_general);
        dynClear(dynConfigFiles_windows);
        dynClear(dynConfigFiles_linux);
        dynClear(dynDplistFiles);
        dynClear(dynPanelFiles);
        dynClear(dynScriptFiles);
        dynClear(dynLibFiles);
        dynClear(dynComponentFiles);
        dynClear(dynSubComponents);
        dynClear(dynScriptsToBeAdded);
        dynClear(dynFileNames);
        dynClear(dynSubComponents);
        
        componentName = \"\";
        componentVersion = \"\";
        date = \"\";
        isSubComponent = 0;
        string dontRestartProject = \"no\";

        //Check if there are sub-components
        fileToString(descFile, strComponentFile);
        _fwInstallation_decodeXML(strComponentFile,
	  			componentName, 
                                componentVersion, 
                                date,
	  			dynRequiredComponents,
	  			isSubComponent,
	  			dynInitFiles, dynDeleteFiles, 
	  			dynPostInstallFiles, 
                                dynPostDeleteFiles, 
				dynConfigFiles_general, 
                                dynConfigFiles_windows, 
                                dynConfigFiles_linux,
				dynDplistFiles,
				dynPanelFiles,
				dynScriptFiles,
				dynLibFiles,
				dynComponentFiles,
				dynSubComponents,
				dynScriptsToBeAdded,
				dynFileNames,
                                dontRestartProject);
      
      
        if(dynlen(dynSubComponents)> 0)
        {
          ChildPanelOnCentralReturn(\"vision/MessageWarning2\", \"Question\", makeDynString(\"$1:Component \" + componentName + \" contains sub-components.\\nSub-components will also be delete/regitered from/in the group\", \"$2:OK\", \"$3:Skip\"), df, ds);
          if(dynlen(df) && df[1] < 1.)
          {
            DebugN(\"INFO: Component not deleted from group. Action aborted by the user\");
            continue;
          }
          else{
            for(j = 1; j <= dynlen(dynSubComponents); j++)
            {
              sourceDir = descFile;
              strreplace(sourceDir, componentName + \".xml\", \"\");
              //DebugN(\"Source dir to subComponent: \", dynSubComponents[j], \" sourceDir: \", sourceDir); 
                                              
              fileToString(sourceDir + \"/\" + dynSubComponents[j], subStrComponentFile);
              _fwInstallation_decodeXML(subStrComponentFile,
	  			      subComponentName, 
                                      subComponentVersion, 
                                      date,
		  	              subRequiredComponents,
		  		      subIsSubComponent,
		  		      subInitFiles, dynDeleteFiles, 
		  		      subPostInstallFiles, 
                                      subPostDeleteFiles, 
				      subConfigFiles_general, 
                                      subConfigFiles_windows, 
                                      subConfigFiles_linux,
				      subDplistFiles,
				      subPanelFiles,
				      subScriptFiles,
				      subLibFiles,
				      subComponentFiles,
				      subSubComponents,
				      subScriptsToBeAdded,
				      subFileNames,
                                      dontRestartProject);  
            
              //DebugN(\"****FVR: Unregistering : \", subComponentName, subComponentVersion, groupName);        
              fwInstallationDB_unregisterGroupComponent(subComponentName, subComponentVersion, groupName);
            }          
          }
        }
      } 
      
      //DebugN(\"Unregistering component: \" + tblAvailableComponents.cellValueRC(i, \"component\"), 
      //                                          tblAvailableComponents.cellValueRC(i, \"version\"), 
      //                                          tblAvailableComponents.cellValueRC(i, \"group\"));
      
      fwInstallationDB_unregisterGroupComponent(tblAvailableComponents.cellValueRC(i, \"component\"), 
                                                tblAvailableComponents.cellValueRC(i, \"version\"), 
                                                tblAvailableComponents.cellValueRC(i, \"group\"));
      

      //Register now the new version:  
      dynClear(dynRequiredComponents);
      dynClear(dynInitFiles);
      dynClear(dynDeleteFiles);
      dynClear(dynPostInstallFiles);
      dynClear(dynPostDeleteFiles);
      dynClear(dynConfigFiles_general);
      dynClear(dynConfigFiles_windows);
      dynClear(dynConfigFiles_linux);
      dynClear(dynDplistFiles);
      dynClear(dynPanelFiles);
      dynClear(dynScriptFiles);
      dynClear(dynLibFiles);
      dynClear(dynComponentFiles);
      dynClear(dynSubComponents);
      dynClear(dynScriptsToBeAdded);
      dynClear(dynFileNames);
      dynClear(dynSubComponents);
      dynClear(dynRequiredComponentNames);
      dynClear(dynRequiredComponentVersions);
      componentName = \"\";
      componentVersion = \"\";
      date = \"\";
      isSubComponent = 0;
          
       fileToString(newDescFile, strComponentFile);
      _fwInstallation_decodeXML(strComponentFile,
				componentName, componentVersion, date,
				dynRequiredComponents,
				isSubComponent,
				dynInitFiles, dynDeleteFiles, 
				dynPostInstallFiles, 
                                dynPostDeleteFiles, 
				dynConfigFiles_general, 
                                dynConfigFiles_windows, 
                                dynConfigFiles_linux,
				dynDplistFiles,
				dynPanelFiles,
				dynScriptFiles,
				dynLibFiles,
				dynComponentFiles,
				dynSubComponents,
				dynScriptsToBeAdded,
				dynFileNames,
                                dontRestartProject);
      
      
      //Check if there are sub-components
      if(dynlen(dynSubComponents)> 0)
      {
        ChildPanelOnCentralReturn(\"vision/MessageWarning2\", \"Question\", makeDynString(\"$1:Component \" + componentName + \" contains sub-components.\\nSub-components will also be added to the group\", \"$2:OK\", \"$3:Cancel\"), df, ds);
        if(dynlen(df) && df[1] < 1.)
        {
          DebugN(\"INFO: Component not added to group. Action aborted by the user\");
          continue;
        }
        else{
          for(j = 1; j <= dynlen(dynSubComponents); j++)
          {
            
            sourceDir = newDescFile;
            strreplace(sourceDir, componentName + \".xml\", \"\");
            
            //DebugN(\"Component: \" + dynSubComponents[j] + \" has to be added to group.\"); 
            fileToString(sourceDir + \"/\" + dynSubComponents[j], subStrComponentFile);
            _fwInstallation_decodeXML(subStrComponentFile,
				      subComponentName, 
                                      subComponentVersion, 
                                      date,
			              subRequiredComponents,
				      subIsSubComponent,
				      subInitFiles, dynDeleteFiles, 
				      subPostInstallFiles, 
                                      subPostDeleteFiles, 
				      subConfigFiles_general, 
                                      subConfigFiles_windows, 
                                      subConfigFiles_linux,
				      subDplistFiles,
				      subPanelFiles,
				      subScriptFiles,
				      subLibFiles,
				      subComponentFiles,
				      subSubComponents,
				      subScriptsToBeAdded,
				      subFileNames,
                                      dontRestartProject);  
            
            DebugN(\"****FVR: Registering: \", subComponentName, subComponentVersion, subIsSubComponent, sourceDir + \"/\" + dynSubComponents[j], groupName);        
            fwInstallationDB_registerComponentInGroup(subComponentName, subComponentVersion, subIsSubComponent, sourceDir + \"/\" + dynSubComponents[j], groupName);
          }          
        }
      }
      
      if(dynlen(dynRequiredComponents))
      {
        //DebugN(\"These are the raw required components: \", dynRequiredComponents);
        
        //Check if required components have alaredy been added to the group
        fwInstallationDB_getGroupComponents(groupName, groupComponentsInfo);
        
        //DebugN(\"Group components\", groupName, groupComponentsInfo);
        
        //Prepare list of required componetns and versions
        for(int k = dynlen(dynRequiredComponents); k >= 1 ; k--)
        {
          dyn_string dsTmp = strsplit(dynRequiredComponents[k], \"=\");
          dynAppend(dynRequiredComponentNames, dsTmp[1]);
          dynAppend(dynRequiredComponentVersions, dsTmp[2]);
        }
        
        //DebugN(\"Components and versions\", dynRequiredComponentNames, dynRequiredComponentVersions);
        
        for(int k = 1; k <= dynlen(groupComponentsInfo); k++)
        {
          if(dynContains(dynRequiredComponentNames, groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX]))
          {
            //DebugN(\"Found component\",groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX], \" comparing versions now...\");
            //DebugN(\"Versions to the compared: \", dynRequiredComponentVersions[dynContains(dynRequiredComponentNames, groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX])], groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX]);
            
            //DebugN(dynRequiredComponentVersions[dynContains(dynRequiredComponentNames, groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX])], groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX]);
            
            if(_fwInstallation_CompareVersions(groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX], dynRequiredComponentVersions[dynContains(dynRequiredComponentNames, groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX])]))
            {
              //DebugN(\"Version is ok, removing component from list\",groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX], \" comparing versions now...\");

              //Equal or newer version installed. Remove this component from the list of required components
              dynRemove(dynRequiredComponentVersions, dynContains(dynRequiredComponentNames, groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX]));
              dynRemove(dynRequiredComponentNames, dynContains(dynRequiredComponentNames, groupComponentsInfo[k][FW_INSTALLATION_DB_COMPONENT_NAME_IDX]));
              
            }  
          }
        }

        if(dynlen(dynRequiredComponentNames))        
        {    
          ChildPanelOnCentralReturn(\"fwConfigurationDBSystemInformation/fwConfigurationDBSystemInformation_componentDependency.pnl\", \"Question\", makeDynString(\"$componentName:\" + componentName, \"$requiredComponentNames:\" + dynRequiredComponentNames, \"$requiredComponentVersions:\" + dynRequiredComponentVersions), df, ds);
          if(dynlen(df) && df[1] < 1.)
          {
            DebugN(\"INFO: Component not added to group. Action aborted by the user\");
            continue;
          }
        }
      }
      
      fwInstallationDB_registerComponentInGroup(componentName, newComponentVersion, isSubComponent, newDescFile, groupName);
      DebugN(\"Registering component: \" + componentName, newComponentVersion, isSubComponent, newDescFile, groupName);
    }
  }      
  
  updateAvailableComponentsTable();
}


updateAvailableComponentsTable()
{
  string systemName; 
  bool scanRecursively = cbScanRecursively.state(0);
  dyn_string groupNames, components, versions, descFiles;
  dyn_string newComponents, newVersions, newDescFiles;
  
  string componentNameFile;  
  string versionInstalled;
  string componentDate;
  dyn_string requiredComponents;
  bool isSubComponent;
  dyn_string initScripts;
  dyn_string deleteScripts;
  dyn_string postInstallScripts; 
  dyn_string postDeleteScripts;
  dyn_string configFiles; 
  dyn_string asciiFiles;
  dyn_string panelFiles;
  dyn_string scriptFiles;
  dyn_string libraryFiles;
  dyn_string otherFiles;
  dyn_string xmlDesc;
  string dontRestartProject = \"no\";
  string helpFile;
  dyn_string subComponents;
  dyn_string config_windows;
  dyn_string config_linux;
  dyn_string scriptsToBeAddedFiles;
  dyn_string comments;
  
  dyn_string groups = strsplit($groups, \"|\");
  
  string dirCurrentValue = txtSourceDir.text;
  
  if(dirCurrentValue == \"\")
    return;

  tblAvailableComponents.deleteAllLines();
  
  for(int i = 1; i <= dynlen(groups); i++)
  {
    strreplace(groups[i], \" \", \"\");
    dyn_dyn_mixed componentsInfo;
    dynClear(componentsInfo);
    fwInstallationDB_getGroupComponents(groups[i], componentsInfo);
    
    for(int j = 1; j <= dynlen(componentsInfo); j++)
    {      
      dynAppend(groupNames, groups[i]);
      dynAppend(components, componentsInfo[j][FW_INSTALLATION_DB_COMPONENT_NAME_IDX]);
      dynAppend(versions, componentsInfo[j][FW_INSTALLATION_DB_COMPONENT_VERSION_IDX]);
      dynAppend(descFiles, componentsInfo[j][FW_INSTALLATION_DB_COMPONENT_DESC_FILE_IDX]);
    }
  }  
  
  
  //Find now the components in the repository
  //Look for files in new location:  
  
  dyn_string dynAvailableDescriptionFiles;
  
  if(scanRecursively)
    dynAvailableDescriptionFiles =  fwInstallation_getFileNamesRec(dirCurrentValue, \"*.xml\");
  else
    dynAvailableDescriptionFiles = getFileNames(dirCurrentValue, \"*.xml\");
  
  if(dynlen(dynAvailableDescriptionFiles) <= 0)
  {
    ChildPanelOnCentral(\"vision/MessageInfo1\", \"Not files found\", makeDynString(\"$1:No component files found.\\nAre you sure the directory is readable?\"));
    return 0;
  }
  
  for(int i = 1; i <= dynlen(dynAvailableDescriptionFiles); i++)     
  {
    dynAvailableDescriptionFiles[i] = dirCurrentValue + \"\\\\\" + dynAvailableDescriptionFiles[i];
    dyn_dyn_mixed componentInfo;
    dynClear(componentInfo);
    fwInstallationXml_load(dynAvailableDescriptionFiles[i], componentInfo);
    componentNameFile = componentInfo[FW_INSTALLATION_XML_COMPONENT_NAME]; 
    versionInstalled = componentInfo[FW_INSTALLATION_XML_COMPONENT_VERSION];
    dynAppend(newComponents, componentNameFile);
    dynAppend(newVersions, versionInstalled);
    dynAppend(newDescFiles, dynAvailableDescriptionFiles[i]);
  }//end of loop

  for(int i = 1; i <= dynlen(components); i++)
  {
    for(int j = 1; j <= dynlen(newComponents); j++)
    {
      if(components[i]  == newComponents[j])
      {
        string status = \"\";
        
        if(versions[i] == newVersions[j] &&
           descFiles[i] == newDescFiles[j])
          status = \"UP-TO-DATE\";
        else
          status = \"\";
          
        string componentPattern = tfFilter.text;
        
        if(componentPattern == \"\" || patternMatch(componentPattern, components[i]))
          tblAvailableComponents.appendLine(\"group\", groupNames[i], 
                                           \"component\", components[i],
                                           \"version\", versions[i],
                                           \"descFile\", descFiles[i],
                                           \"newVersion\", newVersions[j],
                                           \"newDescFile\", newDescFiles[j],
                                           \"update\", status); 
      }
    }  
  }
}



" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
13 2
"PUSH_BUTTON5"
""
1 918.2394366197181 460 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0  916 458 1027 492

T 
1
LANG:1 5 Close
"main()
{
  PanelOff();
}" 0
 E E E
2 3
"PRIMITIVE_TEXT1"
""
1 60 76 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  1 E 30 10 241 24
0 2 2 "0s" 0 0 0 192 0 0  30 10 1
1
LANG:1 33 MS Shell Dlg,-1,11,5,75,0,0,0,0,0
0 1
LANG:1 37 Group update from central repository:
2 5
"Text2"
""
1 22 59 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 30 40 196 57
0 2 0 "0s" 0 0 0 192 0 0  30 40 1
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0 1
LANG:1 27 Look for new components in:
25 6
"tblAvailableComponents"
""
1 -375.6 -28 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E "/**	if the user double clicks on the Status column 
the panel with the component details is shown
*/
main()
{	
	
	int xpos;
	string columnName;
	int columnNr;
	string componentName;
	string descFile;
	string directoryInfo;
	string typeOfDescription = \"xml\";
	
	// get the shape of the table
	shape tab = getShape(\"tblAvailableComponents\");
	
	// get the coordinates of the current cell
	getValue(tab, \"currentCell\", xpos, columnNr);
	columnName = tab.currentColumn();

	// check the column name
	 if((columnName == \"componentName\") || (columnName == \"componentVersion\"))
	 {
		
		// get the component name	 
		componentName = tab.cellValueRC(xpos, \"componentName\");
		
		// get the description file name - it is stored in a hidden column
		descFile = tab.cellValueRC(xpos, \"descFile\");	
			
			// open the panel with details of a component	 
	 		ChildPanelOnCentral(\"fwInstallation/fwInstallationComponentDetails.pnl\", \"fwInstallation_ComponentDetails:xml\",
			 makeDynString(\"$componentName:\" + componentName, \"$descFile:\" + descFile , \"$typeOfDescription:\" + typeOfDescription, \"$sourceDir:\" + txtSourceDir.text));
	}

}	" 0

11 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0  24 168 1032 412
E"/**	if the user  clicks on the Status column 
the column value is changed ( Install -> \"\" , or \"\" -> Install
*/
main(int row, string column, string value)
{
  string add = \"\";
  
		// if user clicked on colStatus column
		if (column == \"update\") 
		{
			// check the old value
			if (value == \"YES\") 
			{
				// set new value to empty
				setValue(\"\",\"cellValueRC\",row,column,\"\");
			}
			else 
			{
				// set new value to install
                                getValue(\"\",\"cellValueRC\",row,column, add);
                                if(add == \"\")
				  setValue(\"\",\"cellValueRC\",row,column,\"YES\");
			}
		}
					

}" 0
 1 0 1 7 1 "group" 12 1 0 "s" 1
LANG:1 5 Group
E
1
LANG:1 0 

120 "component" 20 1 0 "s" 1
LANG:1 14 Component Name
E
1
LANG:1 50 Subcomponents are shown with a leading underscore.

188 "version" 9 1 0 "s" 1
LANG:1 15 Current Version
E
1
LANG:1 0 

90 "newVersion" 10 1 0 "s" 1
LANG:1 11 New Version
E
1
LANG:1 0 

100 "descFile" 21 1 0 "s" 1
LANG:1 16 Current XML File
E
1
LANG:1 0 

200 "newDescFile" 21 1 0 "s" 1
LANG:1 12 New XML File
E
1
LANG:1 0 

200 "update" 8 1 0 "s" 1
LANG:1 7 Update?
E
1
LANG:1 0 

86 
16 16 "" 1 1
LANG:1 2 #1
8 30
1
LANG:1 33 MS Shell Dlg,-1,11,5,50,0,0,0,0,0
0 0 2 0 1 7
1 0
2 7
"Text4"
""
1 20 145 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
13 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 28 126 174 143
0 2 0 "0s" 0 0 0 192 0 0  28 126 1
1
LANG:1 26 Arial,-1,13,5,69,0,0,0,0,0
0 1
LANG:1 21 Available Components:
20 8
"ShowSubComponents"
""
1 26 142 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  24 140 218 164
1
T 
1
LANG:1 24 Show also Sub-Components

0 
1
LANG:1 0 
E E
0 0 0 0 0
1
E E
E"main(int button, bool state)
{
	fwInstallation_getComponentsInfo(\"tblAvailableComponents\", \"txtSourceDir\");
        fwConfigurationDBSystemInformation_updateComponentTable($groupName);
}" 0
14 9
"txtSourceDir"
""
1 26 88 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
17 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,12,5,40,0,0,0,0,0
0  24 86 328 112
3 "0s" 0 0 0 0 0 -1  E E "main()
{
  updateAvailableComponentsTable();        
}" 0

13 10
"btnSelectSourceDir"
""
1 340 80 E E E 1 E 1 E N {0,0,0} E N "_Button" E E
 E E
19 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  338 78 382 112

P 
14215660
"pictures/fileselektor.xpm"
1
LANG:1 0 
"main()
{
  string sPath;
  int    iErr;
  bool scanRecursively = cbScanRecursively.state(0);
 
  dpGet(\"fwInstallationInfo.lastSourcePath\", sPath);

  iErr = folderSelector( sPath );

  if(( iErr >= 1 ) && ( strlen( sPath ) > 0 ))
  {
    sPath += \"/\";
    if (_WIN32) strreplace( sPath, \"/\", \"//\" ); 
    // if NT -> replace 
    strreplace( sPath, \"//\", \"/\" );
    // update the widget with the directory path
    txtSourceDir.text = sPath;  
    dpSet(\"fwInstallationInfo.lastSourcePath\", sPath);

  }  
  
  // refresh the graphic tables with components  
//  fwInstallation_getComponentsInfo(\"tblAvailableComponents\", \"txtSourceDir\", \"\", scanRecursively);
  
  updateAvailableComponentsTable();   
}" 0
 E E E
20 11
"cbScanRecursively"
""
1 28 56 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
21 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  26 54 150 88
1
T 
1
LANG:1 16 Scan recursively

0 
1
LANG:1 0 
E E
0 0 0 0 0
1
E E
E"main(int button, bool state)
{
   string systemName;
   
   if(shapeExists(\"cbSystem\"))
     systemName = cbSystem.text;
   else
     systemName = \"\";
       
  if(txtSourceDir.text != \"\"){
    fwInstallation_disablePanel();
    // refresh the graphic tables with components
    fwInstallation_getComponentsInfo(\"tblAvailableComponents\", \"txtSourceDir\", systemName, state);
  	fwInstallation_enablePanel();
  }
}" 0
13 16
"Button1"
""
1 800 420 E E E 1 E 1 E N {0,0,0} E N "_Button" E E
 E E
31 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  798 418 908 452

T 
1
LANG:1 7 Refresh
"main()
{
  updateAvailableComponentsTable();
}" 0
 E E E
13 14
"btnApplyInstall"
""
1 918.2949921752741 420 E E E 1 E 1 E N {0,0,0} E N "_Button" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  916 418 1027 452

T 
1
LANG:1 6 Update
"// Install the components
main()
{
  registerInGroups();
}
" 0
 E E E
2 17
"PRIMITIVE_TEXT2"
""
1 642 149 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
32 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 650 130 769 147
0 2 0 "0s" 0 0 0 192 0 0  650 130 1
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0 1
LANG:1 20 Filter on component:
13 19
"PUSH_BUTTON6"
""
1 920.2949921752741 124 E E E 1 E 1 E N {0,0,0} E N "_Button" E E
 E E
34 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  918 122 1029 156

T 
1
LANG:1 5 Apply
"// Install the components
main()
{
  updateAvailableComponentsTable();  
}

" 0
 E E E
14 20
"tfFilter"
""
1 780 129 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
35 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
0  778 127 912 151
3 "0s" 0 0 0 0 0 -1  E E E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
