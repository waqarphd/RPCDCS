V 11
1
LANG:1 0 
PANEL,-1 -1 782 706 N "_3DFace" 1
"$nodes"
"main()
{
  nodes = strsplit($nodes, \"|\");
  for(int i =1; i <= dynlen(nodes); i++)
    strreplace(nodes[i], \" \", \"\");

  searchAbusing();
  tblProcesses.removeSelectLines(0);
}





" 0
 E E E E 1 -1 -1 0  40 70
""0  1
E "#uses \"fwFMC/fwFMCProcess.ctl\"

dyn_string nodes;    
    
void searchAbusing(int n = 5)
{
  dyn_string allProcs, procs, allCmd, cmd, allUser, user, sortedProcs, sortedCmd, sortedUser, allHosts, sortedHosts, allStartDates, sortedStartDates, startDate;
  dyn_int allMemory, memory, allPid, pid, sortedMemory, sortedPid;
  dyn_float allCpu, cpu, sortedCpu;
  string host;
 
  tblProcesses.deleteAllLines();

  fwFMCProcess_getAllProcesses(nodes,
                  allHosts, 
                  allProcs, 
                  allCmd, 
                  allPid, 
                  allMemory, 
                  allCpu,
                  allUser,
                  allStartDates);

  for(int i = 1; i <= (n+1); i++)
  {
    int max = dynMax(allMemory);
    int m = dynlen(allMemory);
    
    for(int j = m; j >=1; j--)
    {
      if(allPid[j] == 0) //skip non real processes
      {
        dynRemove(allHosts, j);
        dynRemove(allProcs, j);
        dynRemove(allPid, j);
        dynRemove(allCmd, j);
        dynRemove(allMemory, j);
        dynRemove(allCpu, j);
        dynRemove(allUser, j);
        dynRemove(allStartDates, j);
        continue;
      }      
      
      if(allMemory[j] == max)
      {
        dynAppend(sortedHosts, allHosts[j]);
        dynAppend(sortedProcs, allProcs[j]);
        dynAppend(sortedPid, allPid[j]);
        dynAppend(sortedCmd, allCmd[j]);
        dynAppend(sortedMemory, allMemory[j]);
        dynAppend(sortedCpu, allCpu[j]);
        dynAppend(sortedUser, allUser[j]);
        dynAppend(sortedStartDates, allStartDates[j]);
        
        dynRemove(allUser, j);
        dynRemove(allHosts, j);
        dynRemove(allProcs, j);
        dynRemove(allPid, j);
        dynRemove(allCmd, j);
        dynRemove(allMemory, j);
        dynRemove(allCpu, j);
        dynRemove(allStartDates, j);
        
        break;
      }
    }
  }  
  
  for(int i = 1; i <= dynlen(sortedProcs); i++)
  {
    
    tblProcesses.appendLine(\"host\", sortedHosts[i], 
                            \"pid\", sortedPid[i],
                            \"process\", sortedProcs[i],
                            \"user\", sortedUser[i],
                            \"memory\", sortedMemory[i]/1024,
                            \"cpu\", (floor(sortedCpu[i]*10.))/10.,
                            \"cmd\", sortedCmd[i],
                            \"state\", \"RUNNING\",
                            \"started\", sortedStartDates[i]);
    
    tblProcesses.cellBackColRC(i-1, \"state\", \"green\");
  }
}


















" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
25 0
"tblProcesses"
""
1 0 20 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main(int row, string column)
{
  dyn_int lines;
  dyn_string menu; 
  int answer; 
  string name, cmd;
  int pid;
  string node, dp;
  dyn_string trendDps;
  
  getValue(\"\", \"getSelectedLines\", lines);
  
  if(rbType.number < 2)
  {
    menu = makeDynString(
      \"PUSH_BUTTON, Start Monitoring, 4, 1\", 
      \"SEPARATOR\"); 
  }
  else
  {
    menu = makeDynString(
      \"PUSH_BUTTON, Trend, 6, 1\", 
      \"SEPARATOR\"); 
  }  
  popupMenu(menu, answer); 

  for(int i = 1; i <= dynlen(lines); i++)
  {
    getMultiValue(\"\", \"cellValueRC\", lines[i], \"pid\", pid, 
                  \"\", \"cellValueRC\", lines[i], \"process\", name, 
                  \"\", \"cellValueRC\", lines[i], \"cmd\", cmd,
                  \"\", \"cellValueRC\", lines[i], \"host\", node,
                  \"\", \"cellValueRC\", lines[i], \"dp\", dp);
    
    if(answer == 4)
    {
      fwFMCProcess_sendProcessCommand(node, pid, name, cmd, answer);
      delay(0,100);
    }
    else if(answer == 6)
    {
      dynAppend(trendDps, dp);
    }
  }
  
  if(answer == 6)
  {
    ChildPanelOnCentral(\"fwFMC/fwFMC_trendProcess.pnl\", \"Processes Trend\", makeDynString(\"$dps:\" + trendDps));  
  }
}








" 0
 E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  -2 18 762 182
"main()
{
  this.tableMode(TABLE_SELECT_MULTIPLE); 
  this.selectByClick(TABLE_SELECT_LINE);
} 
" 0
E 1 0 1 10 0 "host" 8 1 0 "s" 1
LANG:1 4 Host
E
1
LANG:1 0 

90 "pid" 3 1 0 "s" 1
LANG:1 3 PID
E
1
LANG:1 0 

40 "process" 11 1 0 "s" 1
LANG:1 7 Process
E
1
LANG:1 0 

120 "user" 7 1 0 "s" 1
LANG:1 4 User
E
1
LANG:1 0 

80 "memory" 3 1 0 "s" 1
LANG:1 7 VM (MB)
E
1
LANG:1 0 

46 "cpu" 4 1 0 "s" 1
LANG:1 7 CPU (%)
E
1
LANG:1 0 

50 "state" 5 1 0 "s" 1
LANG:1 5 State
E
1
LANG:1 0 

60 "started" 6 1 0 "s" 1
LANG:1 10 Started on
E
1
LANG:1 0 

70 "cmd" 99 1 0 "s" 1
LANG:1 8 CMD Line
E
1
LANG:1 0 

1000 "dp" 5 0 0 "s" 1
LANG:1 2 dp
E
1
LANG:1 0 

60 
14 14 10 10
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 0 2 1 1 7
1 0
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
