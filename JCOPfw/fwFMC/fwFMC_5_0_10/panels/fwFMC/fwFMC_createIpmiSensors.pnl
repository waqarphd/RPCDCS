V 10
1
LANG:1 0 
PANEL,-1 -1 500 400 N "_3DFace" 0
E E E E E 1 -1 -1 0  90 150
""0  1
E E 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
13 0
"PUSH_BUTTON1"
""
1 90 150 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 82 -*-Sans-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,505,0,0,0,0,0,0,0,0,Sans
0 ""
 88 148 402 242

T 
1
LANG:1 19 Create IPMI Sensors
"#uses \"fwFMC/fwFMCIpmi.ctl\"
#uses \"fwFMC/fwFMC.ctl\"
    
main()
{
  openProgressBar(\"Creating IPMI sensors\", \"copy.gif\", \"Creating FAN sensors\", \"Please wait...\", \"\", 0);
  fwFMCIpmi_createSensors(\"fan\");
  showProgressBar(\"Creating IPMI sensors\", \"Creating TEMP sensors\", \"Please wait...\", 33.);
  fwFMCIpmi_createSensors(\"temp\");
  showProgressBar(\"Creating IPMI sensors\", \"Creating VOLTAGE sensors\", \"Please wait...\", 66.);
  fwFMCIpmi_createSensors(\"voltage\");
  closeProgressBar();
}

int fwFMCIpmi_createSensors(string type)
{
  dyn_string dps;
  dyn_string sensors, sensorDps;
  string node;
  int err = 0;
  
  switch(strtolower(type))
  {
    case \"fan\":  dps = dpNames(getSystemName() + \"FMC/*/Ipmi.info.fanName\", \"FwFMCIpmi\"); break;
    case \"voltage\":  dps = dpNames(getSystemName() + \"FMC/*/Ipmi.info.voltageName\", \"FwFMCIpmi\"); break;
    case \"current\":  dps = dpNames(getSystemName() + \"FMC/*/Ipmi.info.currentName\", \"FwFMCIpmi\"); break;
    case \"temp\":  dps = dpNames(getSystemName() + \"FMC/*/Ipmi.info.tempName\", \"FwFMCIpmi\"); break;
      
    default: DebugN(\"fwFMCIpmi_createFanSensors() -> Unknown sensor type: \" + type); return;
  }//end of switch

  for(int i = 1; i <= dynlen(dps); i++)
  {
    node = fwFMC_getNodeName(dps[i]);
    dynClear(sensors);
    dpGet(dps[i], sensors);
    
    if(dynlen(sensors) <= 0 || sensors[1] == -1  || patternMatch(\"*IPMI*\", sensors[1]))
    {
      DebugN(\"WARNING: Not yet time to create the sensors for dp: \" + dps[i]);
      DebugN(\"sensors = \", sensors);
      ++err;
      continue; //try next dp
    }
    
    
    for(int j = 1; j <= dynlen(sensors); j++) 
    {
       err += fwFMCIpmi_createSensor(node, type, j, sensors[j]); 
       //DebugN(\"***Sensor created: \", node, type, j, sensors[j]);
    }//end of loop over sensors
    
     sensorDps = fwFMCIpmi_getAllSensorDpNames(node, type);
  
    if(dynlen(sensorDps) > 0)
    {
      //DebugN(\"Subscribing now fan sensors: \", node, sensorDps, type);
      fwFMCIpmi_subscribeDimSensors(node, type, sensorDps);
    }
    
  }//end of loop over dps.

  
  
  if(err)  return -1;
  
  return 0;    
}" 0
 E E E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0