V 11
1
LANG:1 0 
PANEL,-1 -1 1166 820 N "_3DFace" 0
"main()
{
  dyn_string ex;
  fwAccessControl_setupPanel(\"applyAcCB\", ex);
  
  //prepare for logging action
  logDescription = myPanelName() + \": \";
}" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"fwSystemOverview/fwSystemOverviewNotifications.ctl\"
#uses \"fwConfigurationDBSystemInformation/fwConfigurationDBSystemInformation.ctl\"

string searchRoot;
string root;
string logDescription;

updateElements(string deviceType)
{
   dyn_string dps = dpNames(\"*\", deviceType);
  dyn_string dpes = dpNames(dps[1]+ \".**\", deviceType);
  for(int i = 1; i <= dynlen(dpes); i++)
  {
    strreplace(dpes[i], dps[1], \"\");
  }
  cbElements.items = dpes;
}

void initSoTrees()
{
  dyn_string soTrees;
  fwSystemOverviewFsm_getTrees(soTrees);  
  cmbTrees.items = soTrees;
}
initTree()
{
 string rootLabel;;
  fwUi_getLabel(root, root, rootLabel);
  applicationsTree.appendItem(\"\", root, rootLabel);
  applicationsTree.setOpen(root, true);
}

string getDeviceType(string dp)
{
  string dpType = dpTypeName(dp);
  if (dpType == \"IcemonPlc\")
  {
    string manufacturer;
    dpGet(dpSubStr(dp,DPSUB_DP) + \".Configuration.application\", manufacturer);
    return manufacturer;
  }
  
  return dpType;
}
enableAllInPanel(bool enabled = true)
{
  btnSearch.enabled = enabled;
  cbDeviceType.enabled = enabled;
  btnSave.enabled = enabled;
  btnSetAlias.enabled = enabled;
  btnSetDescription.enabled = enabled;
  btnSetSMS.enabled = enabled;
  btnSetUrl.enabled = enabled;
  tbDeviceDps.enabled = enabled;
  btnLoad.enabled = enabled;
}

getSystemIntegrityDps(dyn_string& dpes, string domain, string lunit)
{
   dyn_dyn_string siDps = fwSysOverviewFsm_getChildrenOfTypeWithDomain(lunit, \"IcemonSystemIntegrity\", domain);   
   for(int i = 1; i <= dynlen(siDps); i++)
   {
       //add the local systemIntegrity dp
       dynAppend(dpes, dpNames(siDps[i][1] + \"*.**\", \"IcemonSystemIntegrity\"));
       string alarmDp;
       string sys;
       dyn_string childDps;
       
       dpGet(siDps[i][1] + \".systemIntegrityDP\", alarmDp,
             siDps[i][1] + \".systemName\", sys);

       dpGet(alarmDp + \".applicationName:_alert_hdl.._dp_list\", childDps);
       for(int j = 1; j <= dynlen(childDps); j++)
       {
         dynAppend(dpes, childDps[j]);
       }
   }
}

getHostDps(dyn_string& dpes, string domain, string lunit)
{
   dyn_dyn_string dps = fwSysOverviewFsm_getChildrenOfTypeWithDomain(lunit, \"FwFMCNode\", domain);   

   for(int i = 1; i <= dynlen(dps); i++)
   {
     dynAppend(dpes, dpNames(dps[i][1]+\"*.**\"));
   }
}

getProjectDps(dyn_string& dpes, string domain, string lunit)
{
   dyn_dyn_string dps = fwSysOverviewFsm_getChildrenOfTypeWithDomain(lunit, \"FwSystemOverviewProject\", domain);   

   for(int i = 1; i <= dynlen(dps); i++)
   {
     dynAppend(dpes, dpNames(dps[i][1]+\"*.**\"));
   }
}

getPlcDps(dyn_string& dpes, string domain, string lunit)
{
  dyn_dyn_string aliases = fwSysOverviewFsm_getChildrenOfTypeWithDomain(lunit, \"IcemonPlc\", domain);   
      
  for(int i = 1; i <= dynlen(aliases); i++)
  {
    string dp =  dpAliasToName(aliases[i][1]);
    dynAppend(dpes, dpNames(dp + \"*.**\"));
  }
}
string getDomain(string lunit, bool& isDU)
{
  isDU = false;
  string domain;
  dyn_string fsmDps = dpNames(\"*|\"+lunit, \"_FwFsmObject\");
  if (dynlen(fsmDps) == 0)
  {
    fsmDps = dpNames(\"*|\"+lunit, \"_FwFsmDevice\");
    isDU = true;
  }
  if (dynlen(fsmDps) > 0)
  {
    dyn_string dpNameArr = strsplit(dpSubStr(fsmDps[1], DPSUB_DP), \"|\");
    domain = dpNameArr[1];
  }  
  
  return domain;
}

search()
{
  enableAllInPanel(false);
  tbDeviceDps.deleteAllLines();
  txCount.text = \"\";
  
  mapping dpToApplicationLabel;
  mapping dpToApplication;  
  mapping dpToTreeLabel;
  
  string dpePattern;

  string searchedApplication = tfAppPattern.text ;
  string element = cbElements.text;
  string deviceType = cbDeviceType.text;
 
  bool onlyElWithAlarms = cbElementsWithAlarm.state(0);
  string pattern;
  if (element != \"\")
    pattern = \"*\" + element  ;
  else pattern= \"*.**\";
  
  bool isDU;
  string domain = getDomain(searchRoot, isDU);
  
  dyn_string dpes;
  if(cbDeviceType.selectedPos == 1) //take all hosts, projects, plcs, SI
  {
    dyn_string siDps, hostDps, projectDps, plcDps;
    getSystemIntegrityDps(siDps, domain, searchRoot);
    getHostDps(hostDps, domain, searchRoot);
    getProjectDps(projectDps, domain, searchRoot);
    getPlcDps(plcDps, domain, searchRoot);
    dynAppend(dpes, hostDps);
    dynAppend(dpes, projectDps);
    dynAppend(dpes, plcDps);
    dynAppend(dpes, siDps);    
  }
  else if (cbDeviceType.selectedPos == 2) //only SI
  {
    getSystemIntegrityDps(dpes, domain, searchRoot);
  }
  else //only the selected dp type
  {
    dyn_string tmpDpes;
    if (searchRoot != \"\")
    {
      if (patternMatch(\"FwSystemOverview*\", deviceType))
      {
        getProjectDps(tmpDpes, domain, searchRoot);
        dynAppend(dpes, filterDpesByDeviceType(tmpDpes, deviceType));
      }
      else if (patternMatch(\"FwFMC*\", deviceType))
      {
        getHostDps(tmpDpes, domain, searchRoot);
        dynAppend(dpes, filterDpesByDeviceType(tmpDpes, deviceType));      
      }
      else if (deviceType == \"IcemonPlc\")
      {
        getPlcDps(tmpDpes, domain, searchRoot);
        dynAppend(dpes, filterDpesByDeviceType(tmpDpes, deviceType));      
      }
      else
        dpes = dpNames(pattern, deviceType);
    }
    else 
      dpes = dpNames(pattern, deviceType);
  }

  if (dynlen(dpes) > 0)
    openProgressBar(\"\",\"\",\"Searching...\", \"\",\"\", 2);
 
  
  dyn_string dsRootDevices, dsRootAliases, dsRootDescriptions, dsDevices, dsDeviceDpes, dsTypes, dsAliases;
  dyn_string dsDescriptions, dsSmsFlags, dsUrls, dsApplicationLabels, dsApplication, dsTreeLabels;
  int count = 0;  
  for(int i = 1; i <= dynlen(dpes); i++)
  {
    showProgressBar(\"Searching...\", \"\", \"\", (100*i)/dynlen(dpes));
    if (onlyElWithAlarms)
    {
      int configured = 0;
      if (dpExists(dpes[i]+ \":_alert_hdl\"))
        dpGet(dpes[i]+ \":_alert_hdl.._type\", configured);
      if(!configured)
        continue;
    }
    string rootDp = \"\";
    dyn_string ds = strsplit(dpes[i], \"/\");
    string rootDevice = \"\";
    if(dynlen(ds) > 1)
    {
      rootDp = ds[1] + \"/\" + ds[2];
      dyn_string ds2 = strsplit(ds[2], \".\");
      rootDevice = ds2[1];
    }
    else
    {
      dyn_string ds2 = strsplit(ds[1], \".\");
      rootDevice = ds2[1];
      rootDp = ds2[1];
    }
    
    string rootAlias = dpGetAlias(rootDp + \".\");    
    string rootDescription = dpGetDescription(dpSubStr(dpes[i], DPSUB_SYS_DP) + \".\");

    ds = strsplit(dpes[i], \":\");
    ds = strsplit(ds[2], \"/\");
    string device = \"\";
    device = ds[dynlen(ds)];
    ds = strsplit(device, \".\");
    device = ds[1];
    
    string alias = dpGetAlias(dpes[i]);
    string description = dpGetDescription(dpes[i]);
    
    string application;
    string applicationLabel;
    string treeLabel;

    string dp = dpes[i];
    string systemName = dpSubStr(dpes[i], DPSUB_SYS);

    if (getSystemName() == systemName)
      dp = dpSubStr(dpes[i], DPSUB_DP);
  
    if  (!mappingHasKey(dpToApplicationLabel, dp))
    {
      fwSysOverviewNotifications_getApplication(dp, application);
      int type;
      string tree; 
      if (application!=\"\")
      {
        tree = fwCU_getParent(type, application);
        applicationLabel = fwSysOverviewNotifications_getApplicationLabel(tree, application);
        fwUi_getLabel(tree, tree, treeLabel);
      }
      dpToApplicationLabel[dp] = applicationLabel;
      dpToTreeLabel[dp] = treeLabel;
      dpToApplication[dp] = application;
    }
    else
    {
      applicationLabel = dpToApplicationLabel[dp];
      treeLabel = dpToTreeLabel[dp];   
      application = dpToApplication[dp];
    }
    string sms = \"\", url = \"\";
    
    if(dpExists(dpes[i] + \":_general\" + fwAlarmHandling_HELP_PATH_ATTRIBUTE))
      dpGet(dpes[i] + \":_general\" + fwAlarmHandling_HELP_PATH_ATTRIBUTE , url);
    
    if(dpExists(dpes[i] + \":_general\" + fwSystemOverview_SMS_DPCONFIG))
      dpGet(dpes[i] + \":_general\" + fwSystemOverview_SMS_DPCONFIG, sms);
    
    if(sms == \"\")
      sms = \"NO\"; 
    
    string type = getDeviceType(dpes[i]);
    
    bool addLine = true;
    if (searchedApplication != \"\")
    {
      addLine = searchedApplication == applicationLabel;
    }

    if (addLine)
    {
      dynAppend(dsRootDevices, rootDevice);
      dynAppend(dsRootAliases, rootAlias);      
      dynAppend(dsRootDescriptions, rootDescription);          
      dynAppend(dsDevices, device);  
      dynAppend(dsDeviceDpes, dpes[i]);            
      dynAppend(dsTypes, type);            
      dynAppend(dsAliases, alias);            
      dynAppend(dsDescriptions, description);            
      dynAppend(dsApplication, application); 
      dynAppend(dsApplicationLabels, applicationLabel);            
      dynAppend(dsTreeLabels, treeLabel);            
      dynAppend(dsSmsFlags, sms);            
      dynAppend(dsUrls, url);            
      count++;
    }
  }  
  tbDeviceDps.appendLines(dynlen(dsDeviceDpes), \"rootDevice\", dsRootDevices, \"rootAlias\", dsRootAliases, \"rootDescription\", dsRootDescriptions, \"device\", dsDevices, \"deviceDp\",dsDeviceDpes, \"deviceType\", dsTypes, \"alias\", 
                          dsAliases, \"description\", dsDescriptions, \"application\", dsApplication, \"applicationLabel\", dsApplicationLabels, \"tree\", dsTreeLabels, \"smsFlag\", dsSmsFlags, \"url\", dsUrls);

  closeProgressBar();
  txCount.text = \"Selected: 0 of \" + count;  
  enableAllInPanel();
}

dyn_string filterDpesByDeviceType(dyn_string dpes, string deviceType)
{
  dyn_string filteredDpes;
  for(int i=1; i<=dynlen(dpes); i++)
  {
    if (dpTypeName(dpes[i]) == deviceType)
      dynAppend(filteredDpes, dpes[i]);
  }
  return filteredDpes;
}


apply(string templateName)
{
    dyn_string dpePatterns, dpeTypes, smsFlags, urls, descriptions, aliases;
    if (cbApplyParent.state(0))
    {
      getTemplatesHierarchically(templateName, dpePatterns, dpeTypes, smsFlags, urls, descriptions, aliases);
    
      applyTemplate(dpePatterns, dpeTypes, smsFlags, urls, descriptions, aliases);
    }
    else
    {
      string templateDp = \"fwSystemOverviewDeviceConfigTemplate_\" + templateName;
      if(dpExists(templateDp))
      {
        dpGet(templateDp + \".dpePatterns\", dpePatterns,
              templateDp + \".dpeTypes\", dpeTypes,
              templateDp + \".smsFlags\", smsFlags,
              templateDp + \".URLs\", urls,
              templateDp + \".descriptions\", descriptions,
              templateDp + \".aliases\", aliases);
        applyTemplate(dpePatterns, dpeTypes, smsFlags, urls, descriptions, aliases);
      }
    }
}

getTemplatesHierarchically(string templateName, dyn_string& dpePatterns, dyn_string& dpeTypes, dyn_string& smsFlags, dyn_string& urls, dyn_string& descriptions, dyn_string& aliases)
{
  dyn_string parentDpePatterns, parentDpeTypes, parentSmsFlags, parentUrls, parentDescriptions, parentAliases;
  string parentTemplate;
  string templateDp = \"fwSystemOverviewDeviceConfigTemplate_\" + templateName;
  if(dpExists(templateDp))
  {
    dpGet(templateDp + \".dpePatterns\", dpePatterns,
          templateDp + \".dpeTypes\", dpeTypes,
          templateDp + \".smsFlags\", smsFlags,
          templateDp + \".URLs\", urls,
          templateDp + \".descriptions\", descriptions,
          templateDp + \".aliases\", aliases,
          templateDp + \".parentTemplate\", parentTemplate);
    if (parentTemplate != \"\")
    {
      getTemplatesHierarchically(parentTemplate, parentDpePatterns, parentDpeTypes, parentSmsFlags, parentUrls, parentDescriptions, parentAliases);
      //applyTemplate(parentDpePatterns, parentDpeTypes, parentSmsFlags, parentUrls, parentDescriptions, parentAliases);
      dynAppend(dpePatterns, parentDpePatterns);
      dynAppend(dpeTypes, parentDpeTypes);
      dynAppend(smsFlags, parentSmsFlags);
      dynAppend(urls, parentUrls);
      dynAppend(descriptions, parentDescriptions);    
      dynAppend(aliases, parentAliases);
    }
    
//    applyTemplate(dpePatterns, dpeTypes, smsFlags, urls, descriptions, aliases);
  }
}

applyTemplate(dyn_string dpePatterns, dyn_string dpeTypes, dyn_string smsFlags, dyn_string urls, dyn_string descriptions, dyn_string aliases)
{
  string dp;
  string deviceType;
  int lines = tbDeviceDps.lineCount();
  dyn_int selectedLins = tbDeviceDps.getSelectedLines();
  
  if (dynlen(selectedLins) > 0)
    openProgressBar(\"\",\"\",\"Applying template...\", \"\",\"\", 2);
  for (int i= 1; i <= dynlen(selectedLins); i++)
  {
    showProgressBar(\"Applying template...\", \"\", \"\", (100*i)/dynlen(selectedLins));

    for (int j=dynlen(dpePatterns); j > 0; j--)//start from the parents' patterns
    {
      dp = tbDeviceDps.cellValueRC(selectedLins[i], \"deviceDp\");
      deviceType = tbDeviceDps.cellValueRC(selectedLins[i], \"deviceType\");
      if (patternMatch(\"*\"+dpePatterns[j] + \"*\", dp) && (dpeTypes[j] == \"\" || deviceType == dpeTypes[j]))
      {
        string rootDevice = tbDeviceDps.cellValueRC(selectedLins[i], \"rootDevice\");
        string rootAlias = tbDeviceDps.cellValueRC(selectedLins[i], \"rootAlias\");
        string rootDescription = tbDeviceDps.cellValueRC(selectedLins[i], \"rootDescription\");        
        string device = tbDeviceDps.cellValueRC(selectedLins[i], \"device\");
        string deviceAlias = tbDeviceDps.cellValueRC(selectedLins[i], \"alias\");
        string deviceDescription = tbDeviceDps.cellValueRC(selectedLins[i], \"description\");
        string application = tbDeviceDps.cellValueRC(selectedLins[i], \"applicationLabel\");    
        string tree = tbDeviceDps.cellValueRC(selectedLins[i], \"tree\");        
        string description = descriptions[j];
        strreplace(description, \"%rootDevice\", rootDevice);
        strreplace(description, \"%rootAlias\", rootAlias);
        strreplace(description, \"%rootDescription\", rootDescription);        
        strreplace(description, \"%deviceAlias\", deviceAlias);
        strreplace(description, \"%deviceDescription\", deviceDescription);
        strreplace(description, \"%device\", device);
        strreplace(description, \"%application\", application);
        strreplace(description, \"%tree\", tree);    
        
        string alias = aliases[j];
        strreplace(alias, \"%rootDevice\", rootDevice);
        strreplace(alias, \"%rootAlias\", rootAlias);
        strreplace(alias, \"%rootDescription\", rootDescription);        
        strreplace(alias, \"%deviceAlias\", deviceAlias);
        strreplace(alias, \"%deviceDescription\", deviceDescription);
        strreplace(alias, \"%device\", device);
        strreplace(alias, \"%application\", application);
        strreplace(alias, \"%tree\", tree);  
   
        if (description != \"\")
        {
          if (description != deviceDescription)
            tbDeviceDps.cellBackColRC(selectedLins[i], \"description\", \"yellow\");
          tbDeviceDps.cellValueRC(selectedLins[i], \"description\", description);
        }
        
        if (alias != \"\")
        {
          if(alias != deviceAlias)
            tbDeviceDps.cellBackColRC(selectedLins[i], \"alias\", \"yellow\");
          tbDeviceDps.cellValueRC(selectedLins[i], \"alias\", alias);
        }
        
        if(urls[j] != \"\")
        {
          if (tbDeviceDps.cellValueRC(selectedLins[i], \"url\") != urls[j])
            tbDeviceDps.cellBackColRC(selectedLins[i], \"url\", \"yellow\");        
          tbDeviceDps.cellValueRC(selectedLins[i], \"url\", urls[j]);          
        }
        
        if (tbDeviceDps.cellValueRC(selectedLins[i], \"smsFlag\") != smsFlags[j])    
        { 
          tbDeviceDps.cellBackColRC(selectedLins[i], \"smsFlag\", \"yellow\");        
        }
        tbDeviceDps.cellValueRC(selectedLins[i], \"smsFlag\", smsFlags[j]);  

      }
    }
  }
  closeProgressBar();
}
loadTemplates()
{
  dyn_string items;
  dyn_string templates = dpNames(\"*\", \"FwSystemOverviewDeviceConfigurationTemplate\");

  for(int i=1; i<= dynlen(templates);i++)
  {
    string dp = dpSubStr(templates[i], DPSUB_DP);
    dyn_string tmpArr = strsplit(dp, \"_\");
    if (dynlen(tmpArr)>1)
      dynAppend(items, tmpArr[2]);
  }
  btnLoad.enabled = dynlen(templates) > 0;

  cbTemplates.items = items;
}


void applyAcCB(string s1, string s2)
{
  dyn_string exceptionInfo;
  bool hasExpertPrivilege=FALSE;
  string domain;
  fwSysOverview_getACDomain(domain);
  

  if(domain == \"\") //AC not yet configured. Enable access 
  {
    hasExpertPrivilege = true;
  }
  else
  {
    string expertPrivilege = fwSysOverview_getExpertPrivilege(1);
    // check the current  privilege level 
    if (expertPrivilege == \"\")
    {
      DebugN(\"No expert privilege defined!\");
    }
    else
      fwAccessControl_isGranted(domain + \":\" +expertPrivilege, hasExpertPrivilege, exceptionInfo);
  
    // check and handle exceptions that might have been thrown by the function above
    if (dynlen(exceptionInfo)) {fwAccessControl_displayException(exceptionInfo);return;};
  }
  btnLoad.enabled = hasExpertPrivilege;
// 
//   btnSave.enabled = hasExpertPrivilege;
//   btnSetAlias.enabled = hasExpertPrivilege;
//   btnSetDescription.enabled = hasExpertPrivilege;
//   btnSetSMS.enabled = hasExpertPrivilege;
//   btnSetUrl.enabled = hasExpertPrivilege;
}

void applyAC()
{
  bool hasExpertPrivilege;
  dyn_string exceptionInfo;
  string expertPrivilege = fwSysOverview_getExpertPrivilege(2);
  int lines = tbDeviceDps.lineCount();
  dyn_int selectedLins = tbDeviceDps.getSelectedLines();
  for (int i= 1; i <= dynlen(selectedLins); i++)
  {
    string application = tbDeviceDps.cellValueRC(selectedLins[i], \"application\");    
    string domain;
    fwSysOverview_getACDomain(domain, \"\", application);
    if(domain == \"\") //AC not yet configured. Enable access 
    {
      hasExpertPrivilege = true;
      break;
    }
    fwAccessControl_isGranted(domain + \":\" +expertPrivilege, hasExpertPrivilege, exceptionInfo);
    if (!hasExpertPrivilege)
      break;
  }
 
  btnSetAlias.enabled = hasExpertPrivilege;
  btnSetDescription.enabled = hasExpertPrivilege;
  btnSetSMS.enabled = hasExpertPrivilege;
  btnSetUrl.enabled = hasExpertPrivilege;
}


" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
29 27
"applicationsTree"
""
1 170.8040201005025 784.5409015025041 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  10 60 210 760
10 TreeWidget
2
0 "expanded" "(string id)"
"  dyn_string children;
  dyn_int childrenTypes;
  bool isDU;
  children = fwCU_getChildren(childrenTypes, id);
  string label;
  for (int i=1; i<= dynlen(children); i++)
  {
    fwUi_getLabel(getDomain(children[i], isDU), children[i], label);
    applicationsTree.appendItemNC(id, children[i], label);
    if (!isDU)
      applicationsTree.setExpandable(children[i], true);  
  }"
0 "selectionChanged" "(string id)"
" searchRoot = id;"
"main()
{


}


" 0
2 34
"PRIMITIVE_TEXT19"
""
1 12 32 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
19 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 12 32 34 46
0 2 2 "0s" 0 0 0 192 0 0  12 32 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 4 Tree
22 35
"cmbTrees"
""
1 52 29 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  50 27 212 50
0

"main()
{
  initSoTrees();
  root = this.selectedText();
  
  //init tree  
  applicationsTree.selectionMode(\"Single\");
  applicationsTree.addColumn(\"Applications\");
  initTree();
}" 0

"main()
{
  root = this.selectedText();
  applicationsTree.clear();
  initTree();
  applicationsTree.setSelectedItem(\"\");

}" 0

E
 0 0
22 36
"cbDeviceType"
""
1 292 29 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
21 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  290 27 492 51
0

"main()
{
  dyn_string items = dpTypes();
  dynInsertAt(items, \"RemoteSystemIntegrity\",1);
  dynInsertAt(items, \"\",1);
  this.items = items;
  this.selectedPos(1);
  tfFile.text = PROJ_PATH +cbDeviceType.selectedText() +\".csv\";
}

" 0

"main()
{
  tbDeviceDps.deleteAllLines();
  
  if(this.selectedPos == 1)
  {
    cbElementsWithAlarm.enabled = false;
    cbElements.enabled = false;
  }
  else
  {
    if(!cbElementsWithAlarm.state(0))
      cbElements.enabled = true;
    
    cbElementsWithAlarm.enabled = true;
  }
    
  if (cbElements.enabled && this.selectedText != \"RemoteSystemIntegrity\")
  {
    cbElements.deleteAllItems();
    cbElements.text = \"\";
    updateElements(this.text);
  }
  
    tfFile.text = PROJ_PATH +cbDeviceType.selectedText() +\".csv\";
}



" 0

E
 1 0
25 38
"tbDeviceDps"
""
1 11.48387096774193 -60 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
23 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  218 108 1150 522
"main()
{
  this.tableMode(TABLE_SELECT_MULTIPLE);
  this.selectByClick(TABLE_SELECT_LINE);
  
}
" 0
"main(int row, string column, string value)
{
  txCount.text = \"Devices selected:\" + dynlen(this.getSelectedLines()) + \" of \" + this.lineCount();
  applyAC();
}

" 0
 1 0 1 13 0 "rootDevice" 7 1 0 "s" 1
LANG:1 11 Root Device
E
1
LANG:1 0 

80 "rootAlias" 7 1 0 "s" 1
LANG:1 10 Root Alias
E
1
LANG:1 0 

80 "rootDescription" 7 1 0 "s" 1
LANG:1 16 Root Description
E
1
LANG:1 0 

80 "device" 7 1 0 "s" 1
LANG:1 6 Device
E
1
LANG:1 0 

80 "applicationLabel" 7 1 0 "s" 1
LANG:1 11 Application
E
1
LANG:1 0 

80 "application" 0 0 0 "s" 1
LANG:1 11 Application
E
1
LANG:1 0 

0 "tree" 7 1 0 "s" 1
LANG:1 4 Tree
E
1
LANG:1 0 

80 "deviceDp" 39 1 0 "s" 1
LANG:1 9 Device DP
E
1
LANG:1 0 

400 "deviceType" 9 1 0 "s" 1
LANG:1 11 Device Type
E
1
LANG:1 0 

100 "smsFlag" 5 1 0 "s" 1
LANG:1 8 SMS Flag
E
1
LANG:1 0 

60 "url" 39 1 0 "s" 1
LANG:1 3 URL
E
1
LANG:1 0 

400 "alias" 12 1 0 "s" 1
LANG:1 5 Alias
E
1
LANG:1 0 

129 "description" 99 1 0 "s" 1
LANG:1 11 Description
E
1
LANG:1 0 

1000 
16 16 10 10
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 0 2 1 1 7
1 0
22 39
"cbElements"
""
1 291.8540925266905 70 E E E 0 E 1 E N "_WindowText" E N "_Window" E E
 E E
24 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  290 68 492 92
0

E
E
E
 1 0
2 40
"PRIMITIVE_TEXT2"
""
1 222 73 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
25 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 222 73 262 87
0 2 2 "0s" 0 0 0 192 0 0  222 73 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 Element
13 41
"PUSH_BUTTON2"
""
1 1040 780 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
26 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  1038 778 1152 812

T 
1
LANG:1 5 Close
"main()
{
  if(isProgressBarOpen())
    closeProgressBar();
  PanelOff();
}
" 0
 E E E
2 42
"PRIMITIVE_TEXT3"
""
1 0 10 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
27 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 0 10 268 25
0 2 2 "0s" 0 0 0 192 0 0  0 10 1
1
LANG:1 25 Arial,9,-1,5,75,1,0,0,0,0
0 1
LANG:1 43 FW System Overview: Device Parameterization
2 43
"txCount"
""
1 220 530 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
28 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 220 530 360 550
0 2 2 "0s" 0 0 0 64 0 0  220 530 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 txCount
13 44
"btnSearch"
""
1 1078 70 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
29 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  1076 68 1150 102

T 
1
LANG:1 6 Search
"main()
{
  search();
  applyAcCB(\"\",\"\");
}








" 0
 E E E
14 45
"tfAlias"
""
1 312 590 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
30 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  310 588 1064 612
3 "0s" 0 0 0 0 0 -1  E E E
2 46
"PRIMITIVE_TEXT5"
""
1 224 592 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
31 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 224 592 272 606
0 2 2 "0s" 0 0 0 192 0 0  224 592 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 9 New Alias
14 47
"tfDescription"
""
1 312 620 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
32 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 30 Sans Serif,9,-1,5,50,0,0,0,0,0
0  310 618 1064 642
3 "0s" 0 0 0 0 0 -1  E E E
2 48
"PRIMITIVE_TEXT7"
""
1 224 622 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
33 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 224 622 302 636
0 2 2 "0s" 0 0 0 192 0 0  224 622 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 15 New Description
13 49
"btnSetAlias"
""
1 1082 590 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
34 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  1080 588 1154 612

T 
1
LANG:1 3 Set
E E "main()
{
  dyn_int lines = tbDeviceDps.getSelectedLines();

  //log the action
  logDescription += \" Changing alias. \";  
  
  for(int i = 1; i <= dynlen(lines); i++)
  {
    string rootDevice = tbDeviceDps.cellValueRC(lines[i], \"rootDevice\");
    string rootAlias = tbDeviceDps.cellValueRC(lines[i], \"rootAlias\");
    string rootDescription = tbDeviceDps.cellValueRC(lines[i], \"rootDescription\");    
    string device = tbDeviceDps.cellValueRC(lines[i], \"device\");
    string deviceAlias = tbDeviceDps.cellValueRC(lines[i], \"alias\");
    string deviceDescription = tbDeviceDps.cellValueRC(lines[i], \"description\");
    string application = tbDeviceDps.cellValueRC(lines[i], \"applicationLabel\");    
    string tree = tbDeviceDps.cellValueRC(lines[i], \"tree\");        
    

    string alias = tfAlias.text;
    strreplace(alias, \"%rootDevice\", rootDevice);
    strreplace(alias, \"%rootAlias\", rootAlias);
    strreplace(alias, \"%rootDescription\", rootDescription);    
    strreplace(alias, \"%deviceAlias\", deviceAlias);
    strreplace(alias, \"%deviceDescription\", deviceDescription);
    strreplace(alias, \"%device\", device);
    strreplace(alias, \"%application\", application);
    strreplace(alias, \"%tree\", tree);    
    tbDeviceDps.cellValueRC(lines[i], \"alias\", alias);
    
    string dpe = tbDeviceDps.cellValueRC(i-1, \"deviceDp\");
    logDescription += \"Dpe: \" +dpe + \". Alias: \" + alias;
  }
}


























" 0
 E
13 50
"btnSave"
""
1 920 780 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
35 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  918 778 1032 812

T 
1
LANG:1 12 Save changes
"main()
{
  dyn_float df;
  dyn_string ds;
  ChildPanelOnCentralModalReturn(\"fwInstallation/fwInstallationDB_question.pnl\", \"Apply changes to DPEs\", makeDynString(\"$txt:Are you sure you want to apply the changes\"), df, ds);
  if(dynlen(df)<=0 || df[1]<= 0)
    return;
  
  enableAllInPanel(false);
  if (tbDeviceDps.lineCount() > 0)
    openProgressBar(\"\",\"\",\"Saving...\", \"\",\"\", 2);

 
  for(int i = 1; i <= tbDeviceDps.lineCount(); i++)
  {
    showProgressBar(\"Saving...\", \"\", \"\", (100*i)/tbDeviceDps.lineCount());

    string dpe = tbDeviceDps.cellValueRC(i-1, \"deviceDp\");
    
    if(patternMatch(\"*dummy*\", dpe))
      continue;
    
    string alias = tbDeviceDps.cellValueRC(i-1, \"alias\");
    string description = tbDeviceDps.cellValueRC(i-1, \"description\");
    string url = tbDeviceDps.cellValueRC(i-1, \"url\");    
    string smsFlag = tbDeviceDps.cellValueRC(i-1, \"smsFlag\");        
    if (smsFlag == \"NO\")
      smsFlag = \"\";
    dpSetAlias(dpe, alias);
    dpSetDescription(dpe, description);
    int val;
    dpGet(dpe + \":_general.._type\", val);
    if(val != DPCONFIG_GENERAL)
      dpSet(dpe + \":_general.._type\", DPCONFIG_GENERAL);
    dpSet(dpe + \":_general\" + fwAlarmHandling_HELP_PATH_ATTRIBUTE, url);
    dpSet(dpe + \":_general\" + fwSystemOverview_SMS_DPCONFIG, smsFlag);
  
  }
  closeProgressBar();
  enableAllInPanel();
  fwConfigurationDBSystemInformation_logAction(logDescription);
  DebugN(\"Configuration saved!\");
}







" 0
 E E E
2 51
"PRIMITIVE_TEXT8"
""
1 220 710 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
36 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 220 710 850 730
0 2 2 "0s" 0 0 0 64 0 0  220 710 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 128 Allowed wildcards are: %rootDevice, %rootAlias, %rootDescription, %device, %deviceAlias, %deviceDescription, %application, %tree
13 52
"btnSetDescription"
""
1 1082 620 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
37 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  1080 618 1154 642

T 
1
LANG:1 3 Set
E E "main()
{
  dyn_int lines = tbDeviceDps.getSelectedLines();
  logDescription += \" Changing description. \";
  for(int i = 1; i <= dynlen(lines); i++)
  {
    string rootDevice = tbDeviceDps.cellValueRC(lines[i], \"rootDevice\");
    string rootAlias = tbDeviceDps.cellValueRC(lines[i], \"rootAlias\");
    string rootDescription = tbDeviceDps.cellValueRC(lines[i], \"rootDescription\");        
    string device = tbDeviceDps.cellValueRC(lines[i], \"device\");
    string deviceAlias = tbDeviceDps.cellValueRC(lines[i], \"alias\");
    string deviceDescription = tbDeviceDps.cellValueRC(lines[i], \"description\");
    string application = tbDeviceDps.cellValueRC(lines[i], \"applicationLabel\");    
    string tree = tbDeviceDps.cellValueRC(lines[i], \"tree\");        
       
    string description = tfDescription.text;
    strreplace(description, \"%rootDevice\", rootDevice);
    strreplace(description, \"%rootAlias\", rootAlias);
    strreplace(description, \"%rootDescription\", rootDescription);    
    strreplace(description, \"%deviceAlias\", deviceAlias);
    strreplace(description, \"%deviceDescription\", deviceDescription);
    strreplace(description, \"%device\", device);
    strreplace(description, \"%application\", application);
    strreplace(description, \"%tree\", tree);    
    tbDeviceDps.cellValueRC(lines[i], \"description\", description);
    
    string dpe = tbDeviceDps.cellValueRC(i-1, \"deviceDp\");
    logDescription += \"Dpe: \" +dpe + \". Description: \" + description;
  }
}




























" 0
 E
22 53
"cbSms"
""
1 312 680.0000000000002 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
38 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  310 678 412 702
2
1
LANG:1 2 NO

0
1
LANG:1 3 YES

0

E
"main()
{
}

" 0

E
 1 0
2 54
"PRIMITIVE_TEXT9"
""
1 222 650 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
39 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 222 650 245 664
0 2 2 "0s" 0 0 0 192 0 0  222 650 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 4 URL:
14 55
"tfUrl"
""
1 312.3145336225598 650.0000000000002 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
40 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  310 648 1064 671
3 "0s" 0 0 0 0 0 -1  E E E
2 56
"PRIMITIVE_TEXT10"
""
1 224 680 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
41 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 224 680 252 694
0 2 2 "0s" 0 0 0 192 0 0  224 680 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 4 SMS:
13 57
"btnSetUrl"
""
1 1080 650.0000000000002 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
42 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  1078 648 1152 672

T 
1
LANG:1 3 Set
"main()
{
  dyn_int lines = tbDeviceDps.getSelectedLines();
  
  logDescription += \" Changing URL. \";
      
  for(int i = 1; i <= dynlen(lines); i++)
  {
    string dpe = tbDeviceDps.cellValueRC(lines[i], \"deviceDp\");
    
    //check whether the dpe has an alarm configured
    int configured = 0;
    dpGet(dpe + \":_alert_hdl.._type\", configured);
    if(configured)
    {
      tbDeviceDps.cellValueRC(lines[i], \"url\", tfUrl.text);
      logDescription += \"Dpe: \" +dpe + \". Url: \" + tfUrl.text;
    }
    
  }
}


" 0
 E E E
13 58
"btnSetSMS"
""
1 1082 677.0000000000002 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
43 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  1080 675 1154 699

T 
1
LANG:1 3 Set
"main()
{
  dyn_int lines = tbDeviceDps.getSelectedLines();
  logDescription += \" Changing SMS flag. \" ;
  string dpesNoUrl;
  for(int i = 1; i <= dynlen(lines); i++)
  {
    string dpe = tbDeviceDps.cellValueRC(lines[i], \"deviceDp\");    
    string url = tbDeviceDps.cellValueRC(lines[i], \"url\");    
    if (cbSms.selectedText == \"YES\" && tfUrl.text == \"\" && url == \"\")// no SMS if there is no procedure associated with the alarm
    {
      dpesNoUrl += dpe + \";\";
      continue;
    }

     //check whether the dpe has an alarm configured
    int configured = 0;
    dpGet(dpe + \":_alert_hdl.._type\", configured);
    if(configured)
    {
      tbDeviceDps.cellValueRC(lines[i], \"smsFlag\", cbSms.selectedText());
      logDescription += \"Dpe: \" + dpe + \" SMS flag: \"  + cbSms.selectedText();
    }
  }
  if ( cbSms.selectedText == \"YES\" && strlen(dpesNoUrl) > 0)// no SMS if there is no procedure associated with the alarm
  {
    ChildPanelOnCentralModal(\"vision/MessageInfo1\", \"ERROR\", makeDynString(\"$1:SMS can only be send for alarms with asociated web\\nprocedure! Please, provide URL for:\\n\"+dpesNoUrl));
    return;
  }
}














" 0
 E E E
2 59
"PRIMITIVE_TEXT12"
""
1 502 73 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
44 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 502 73 556 87
0 2 2 "0s" 0 0 0 192 0 0  502 73 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 11 Application
14 60
"tfAppPattern"
""
1 592 70 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
45 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  590 68 704 91
3 "0s" 0 0 0 0 0 -1  E E E
20 61
"cbElementsWithAlarm"
""
1 500 24 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
46 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  498 22 702 56
1
T 
1
LANG:1 34 All elements with alarm configured

0 
1
LANG:1 0 
E E
0 0 0 0 0
0
E"main(int button, int state)
{
  if(state)
  {
    cbElements.text = \".**\";
    cbElements.enabled = false;
  }
  else
  {
    cbElements.text = \"\";
    cbElements.enabled = true; 
  }
}" 0
22 62
"cbTemplates"
""
1 310 560 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
47 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  308 558 432 581
0

"main()
{
 loadTemplates();
}" 0

E
E
 0 0
2 63
"PRIMITIVE_TEXT13"
""
1 222 565 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
48 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 222 565 269 579
0 2 2 "0s" 0 0 0 192 0 0  222 565 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 9 Template:
13 64
"btnLoad"
""
1 610 560 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
49 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  608 558 732 585

T 
1
LANG:1 5 Apply
"main()
{
  enableAllInPanel(false);
  string templateName = cbTemplates.selectedText;
  apply(templateName);
  enableAllInPanel();
  DebugN(\"Finished\");
  
  int n = tbDeviceDps.lineCount();
  dyn_string dpes;
  for(int i=0; i<n; i++)
  {
     string dpe = tbDeviceDps.cellValueRC(i, \"deviceDp\");
     dynAppend(dpes, dpe);
  }
  
  logDescription += \". Tempalte applyed: \" + templateName + \" For dpes: \" + dpes;
}
" 0
 E E E
14 65
"tfFile"
""
1 220 740 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
50 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  218 738 692 762
3 "0s" 0 0 0 0 0 -1  E E "main()
{
  if(this.text != \"\")
    btSave.enabled = true;
  else
    btSave.enabled = false;
}" 0

13 66
"btSave"
""
1 700 740.4193548387096 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
51 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  698 738 792 768

T 
1
LANG:1 4 Save
"main()
{
  tbDeviceDps.writeToFile(tfFile.text, TABLE_WRITE_COLUMN_HEADER, \",\");
  DebugN(\"Write to file called: \" +tfFile.text );
}

" 0
 E E E
2 67
"PRIMITIVE_TEXT20"
""
1 222 32 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
52 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 222 32 279 46
0 2 2 "0s" 0 0 0 192 0 0  222 32 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 11 Deviec type
20 68
"cbApplyParent"
""
1 440 555 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
53 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  438 553 592 587
1
T 
1
LANG:1 21 Apply parent template

1 
1
LANG:1 0 
E E
0 0 0 0 0
0
EE13 69
"PUSH_BUTTON4"
""
1 1118 5 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
54 0 0 0 0 0
E E E
0
1
LANG:1 14 Edit templates

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  1116 3 1150 37

P 
4294967295
"pictures/edit_en.gif"
1
LANG:1 12 PUSH_BUTTON1
"main()
{
  ChildPanelOnCentralModal(\"fwSystemOverview/fwSystemOverview_createTemplates.pnl\", \"Edit templates\", makeDynString());
  loadTemplates();
}" 0
 E E E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
