V 11
1
LANG:1 0 
PANEL,-1 -1 935 171 N "unSynopticBackground" 2
"$1"
"$2"
"main()
{
  CU = $1;
  tree = $2;
  while(1)
  {
    //Number of connected systems:
    int connected, all;
//     dyn_string dps = dpNames(\"icemonSystemIntegrity_*.connected\", \"IcemonSystemIntegrity\");
    dyn_string dps = fwSysOverviewFsm_getChildrenOfType(tree, \"IcemonSystemIntegrity\");
    
    all = dynlen(dps);
    connected = all;
    for(int i = 1; i <= dynlen(dps); i++)
    {
      int active, alarm; 
      dpGet(dps[i] + \".connected:_alert_hdl.._act_state\", alarm,
            dps[i] + \".connected:_alert_hdl.._active\", active);    
         
      if(!active) 
      {
        --all;
        --connected;
      }
      else if(alarm)
      {
        --connected;
      }
    }
    txDist.text = connected + \"/\" + all;
    if(all != connected)
      txDist.backCol = \"alertCamWentUna\";
    else
      txDist.backCol = \"white\";
    
    //Node with highest Memory:
    dyn_string nodes;
    dyn_dyn_string dps = fwSysOverviewFsm_getChildrenOfTypeWithDomain(tree, \"FwFMCNode\", CU);
  
    for(int i = 1; i <= dynlen(dps); i++)
    {
      dynAppend(nodes, fwFMC_getNodeName(dps[i][1]));
    }
//    fwFMC_getNodes(nodes);
    float maxMemory = 0.;
    float maxSwap = 0.;
    string maxMemoryNode = \"\";
    string maxCpuNode = \"\";
    float maxCpu = 0.;
    for(int i = 1; i <= dynlen(nodes); i++)
    {
      float memory, swap;
      
      fwFMCMonitoring_getMemoryLoad(nodes[i], memory, swap);
      float cpu = fwFMCMonitoring_getAverageCpuLoad(nodes[i]);
      if(memory > maxMemory)
      {
        maxMemory = memory;
        maxMemoryNode = nodes[i];
        maxSwap = swap;
      }
      
      if(cpu > maxCpu)
      {
        maxCpu = cpu;
        maxCpuNode = nodes[i];
      }
      
    }
    
    txMemNode.text = maxMemoryNode;
    txMemValue.text = \"(Phys.: \"+maxMemory + \"%\" + \" Swap: \" + maxSwap + \"%)\";
    
    txCpuNode.text = maxCpuNode;
    txCpuValue.text = maxCpu + \"%\";
    
    //Processes:
    searchAbusing();
    tblProcesses.lineVisible(0);
    delay(10);
  }
}



















" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"fwFMC/fwFMCProcess.ctl\"
#uses \"fwSystemOverview/fwSystemOverviewFsm.ctl\"

// const string tree = \"fwSO_LHC_Applications\";
string tree;
string CU;
dyn_string nodes;    
    
void searchAbusing(int n = 6)
{
  dyn_string allProcs, procs, allCmd, cmd, allUser, user, sortedProcs, sortedCmd, sortedUser, allHosts, sortedHosts, allStartDates, sortedStartDates, startDate;
  dyn_int allMemory, memory, allPid, pid, sortedMemory, sortedPid;
  dyn_float allCpu, cpu, sortedCpu;
  string host;
 
//  tblProcesses.deleteAllLines();
  
  //fwFMC_getNodes(nodes);
  dyn_dyn_string dps = fwSysOverviewFsm_getChildrenOfTypeWithDomain(tree, \"FwFMCNode\", CU);
  dynClear(nodes);
  for(int i = 1; i <= dynlen(dps); i++)
  {
    dynAppend(nodes, fwFMC_getNodeName(dps[i][1]));
  }
                       
  dynClear(allHosts); 
  dynClear(allProcs);
  dynClear(allCmd);
  dynClear(allPid);
  dynClear(allMemory);
  dynClear(allCpu);
  dynClear(allUser);
  dynClear(allStartDates);
  dynClear(sortedHosts); 
  dynClear(sortedProcs);
  dynClear(sortedCmd);
  dynClear(sortedPid);
  dynClear(sortedMemory);
  dynClear(sortedCpu);
  dynClear(sortedUser);
  dynClear(sortedStartDates);

  fwFMCProcess_getAllProcesses(nodes,
                  allHosts, 
                  allProcs, 
                  allCmd, 
                  allPid, 
                  allMemory, 
                  allCpu,
                  allUser,
                  allStartDates);

  for(int i = 1; i <= (n+1); i++)
  {
    int max = dynMax(allMemory);
    int m = dynlen(allMemory);
    
    for(int j = m; j >=1; j--)
    {
      if(allPid[j] == 0) //skip non real processes
      {
        dynRemove(allHosts, j);
        dynRemove(allProcs, j);
        dynRemove(allPid, j);
        dynRemove(allCmd, j);
        dynRemove(allMemory, j);
        dynRemove(allCpu, j);
        dynRemove(allUser, j);
        dynRemove(allStartDates, j);
        continue;
      }      
      
      
      if(allMemory[j] == max)
      {
        dynAppend(sortedHosts, allHosts[j]);
        dynAppend(sortedProcs, allProcs[j]);
        dynAppend(sortedPid, allPid[j]);
        dynAppend(sortedCmd, allCmd[j]);
        dynAppend(sortedMemory, allMemory[j]);
        dynAppend(sortedCpu, allCpu[j]);
        dynAppend(sortedUser, allUser[j]);
        dynAppend(sortedStartDates, allStartDates[j]);
        
        dynRemove(allUser, j);
        dynRemove(allHosts, j);
        dynRemove(allProcs, j);
        dynRemove(allPid, j);
        dynRemove(allCmd, j);
        dynRemove(allMemory, j);
        dynRemove(allCpu, j);
        dynRemove(allStartDates, j);
        
        break;
      }
    }
  }  
  
  for(int i = 1; i <= dynlen(sortedProcs); i++)
  {
    tblProcesses.updateLine(1, \"number\", i,
                            \"host\", sortedHosts[i], 
                            \"pid\", sortedPid[i],
                            \"process\", sortedProcs[i],
                            \"user\", sortedUser[i],
                            \"memory\", sortedMemory[i]/1024,
                            \"cpu\", (floor(sortedCpu[i]*10.))/10.);//,
//                            \"cmd\", sortedCmd[i],
//                            \"state\", \"RUNNING\",
//                            \"started\", sortedStartDates[i]);
    
    //tblProcesses.cellBackColRC(i-1, \"state\", \"green\");
  }
}












" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
30 0
"FRAME2"
""
1 20 342 E E E 1 E 1 E N "White" E N {0,0,0} E E
 E E
0 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 0 1 0 1 E 1.023242463888073 0 0.8426966292134831 -10.46484927776147 -278.2022471910112 0 E 20 342 881 521
1
LANG:1 26 Arial,10,-1,5,75,1,0,0,0,0
0 1
LANG:1 7 Summary
2 1
"PRIMITIVE_TEXT1"
""
1 32 32 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 32 32 161 46
0 2 2 "0s" 0 0 0 192 0 0  32 32 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 23 Connected PVSS systems:
2 2
"PRIMITIVE_TEXT2"
""
1 32 52 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 32 52 136 66
0 2 2 "0s" 0 0 0 192 0 0  32 52 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 20 Highest memory load:
2 3
"PRIMITIVE_TEXT3"
""
1 32 74 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 32 74 120 88
0 2 2 "0s" 0 0 0 192 0 0  32 74 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 17 Highest CPU load:
2 4
"PRIMITIVE_TEXT4"
""
1 442 32 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 442 32 608 46
0 2 2 "0s" 0 0 0 192 0 0  442 32 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 31 Highest memory charge processes
2 5
"txDist"
""
1 172 32 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 172 32 189 46
0 2 2 "0s" 0 0 0 192 0 0  172 32 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 3 n/m
2 6
"txMemNode"
""
1 142 52 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 142 52 165 66
0 2 2 "0s" 0 0 0 192 0 0  142 52 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 4 node
2 7
"txCpuNode"
""
1 142 74 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 142 74 165 88
0 2 2 "0s" 0 0 0 192 0 0  142 74 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 4 node
2 8
"txMemValue"
""
1 2146.443311674886 -108 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E 1.111111111111111 0 1 -26.66666666666662 -10 0 E 242 62 276 76
0 2 2 "0s" 0 0 0 192 0 0  242 62 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 (value)
2 9
"txCpuValue"
""
1 244.0000000000001 74 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 244.0000000000001 74 278 88
0 2 2 "0s" 0 0 0 192 0 0  244.0000000000001 74 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 7 (value)
25 10
"tblProcesses"
""
1 439.9999999999999 52 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main(int row, string column)
{
  dyn_int lines;
  dyn_string menu; 
  int answer; 
  string name, cmd;
  int pid;
  string node, dp;
  dyn_string trendDps;
  
  getValue(\"\", \"getSelectedLines\", lines);
  
  if(rbType.number < 2)
  {
    menu = makeDynString(
      \"PUSH_BUTTON, Start Monitoring, 4, 1\", 
      \"SEPARATOR\"); 
  }
  else
  {
    menu = makeDynString(
      \"PUSH_BUTTON, Trend, 6, 1\", 
      \"SEPARATOR\"); 
  }  
  popupMenu(menu, answer); 

  for(int i = 1; i <= dynlen(lines); i++)
  {
    getMultiValue(\"\", \"cellValueRC\", lines[i], \"pid\", pid, 
                  \"\", \"cellValueRC\", lines[i], \"process\", name, 
                  \"\", \"cellValueRC\", lines[i], \"cmd\", cmd,
                  \"\", \"cellValueRC\", lines[i], \"host\", node,
                  \"\", \"cellValueRC\", lines[i], \"dp\", dp);
    
    if(answer == 4)
    {
      fwFMCProcess_sendProcessCommand(node, pid, name, cmd, answer);
      delay(0,100);
    }
    else if(answer == 6)
    {
      dynAppend(trendDps, dp);
    }
  }
  
  if(answer == 6)
  {
    ChildPanelOnCentral(\"fwFMC/fwFMC_trendProcess.pnl\", \"Processes Trend\", makeDynString(\"$dps:\" + trendDps));  
  }
}








" 0
 E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0  438 50 874 152
"main()
{
  this.tableMode(TABLE_SELECT_MULTIPLE); 
  this.selectByClick(TABLE_SELECT_LINE);
} 
" 0
E 1 0 1 9 0 "number" 8 0 0 "s" 1
LANG:1 14 Process Number
E
1
LANG:1 0 

90 "host" 8 1 0 "s" 1
LANG:1 4 Host
E
1
LANG:1 0 

90 "pid" 3 1 0 "s" 1
LANG:1 3 PID
E
1
LANG:1 0 

40 "process" 11 1 0 "s" 1
LANG:1 7 Process
E
1
LANG:1 0 

120 "user" 5 1 0 "s" 1
LANG:1 4 User
E
1
LANG:1 0 

67 "memory" 4 1 0 "s" 1
LANG:1 7 VM (MB)
E
1
LANG:1 0 

54 "cpu" 4 1 0 "s" 1
LANG:1 7 CPU (%)
E
1
LANG:1 0 

56 "cmd" 99 0 0 "s" 1
LANG:1 8 CMD Line
E
1
LANG:1 0 

1000 "dp" 5 0 0 "s" 1
LANG:1 2 dp
E
1
LANG:1 0 

60 
14 14 10 10
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 0 0 0 1 7
1 0
2 12
"txDpe1"
""
1 50 120 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 50 120 68 134
0 2 2 "0s" 0 0 0 192 0 0  50 120 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 3 dpe
30 14
"frmAlarms"
""
1 30 113 E E E 1 E 1 E N "White" E N {0,0,0} E E
 E E
14 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"#uses \"fwSystemOverview/fwSystemOverviewReport.ctl\"
#uses \"fwSystemOverview/fwSystemOverviewFsm.ctl\"
#uses \"fwSystemOverview/fwSystemOverviewNotifications.ctl\"

main()
{
  //dpConnect(\"alarmOccurrancesCB\", FWSYSOVERVIEW_NOTIFICATION_ALARMSOCCURRANCES_DPE);
  // not done with dp connect because when there are too many alarms frequantly appearing the changes cannot be handled
  // and there is an error in the log
  dyn_string alarmsOccurrances;
  while(true)
  {

    dpGet(FWSYSOVERVIEW_NOTIFICATION_ALARMSOCCURRANCES_DPE,  alarmsOccurrances);
    alarmOccurrancesCB(FWSYSOVERVIEW_NOTIFICATION_ALARMSOCCURRANCES_DPE,  alarmsOccurrances);
    delay(30);
  }
}
void alarmOccurrancesCB(string dpe, dyn_string alarmsOccurrances)
{
  filterAlarms(alarmsOccurrances, $1, $2);
  dyn_dyn_mixed mostRecurrentAlarms;
  for (int i=1; i<=dynlen(alarmsOccurrances);i++)
  {
    dyn_string occurrancesStrArr = strsplit(alarmsOccurrances[i], \";\");
    mostRecurrentAlarms[i][1] = (int)occurrancesStrArr[3];
    mostRecurrentAlarms[i][2] = occurrancesStrArr[1];
  }
  dynDynSort(mostRecurrentAlarms);
  int i=1;
  for(i=1; i<= dynlen(mostRecurrentAlarms) && i <3;i++)
  {
    string dpe = mostRecurrentAlarms[i][2];
    string application;
    fwSysOverviewNotifications_getApplication(dpe, application);
    string domain;
    if (fwSysOverviewFsm_isDomain(application))
      domain = application;
    else
      domain = $1;
    string label;
    fwUi_getLabel(domain, application, label);
    setMultiValue(\"txDpe\"+i, \"visible\", true,
                  \"txDpe\"+i, \"toolTipText\", mostRecurrentAlarms[i][2],
                  \"txDpe\"+i, \"text\", label + \"\\t\\t\\t\" + fwSysOverview_getDpeIdentifier(dpe) + \"\\t\\t\\t(\" + mostRecurrentAlarms[i][1] + \"x)\");
  }
  
  //hide all that don't have values(uses the last value of i)
  if (i <= 2)
    for(i; i<=2;i++)
      setValue(\"txDpe\" + i, \"visible\", false);
    
  
}
//returns only the alarms that belong to this part of the tree
filterAlarms(dyn_string& alarms, string dollar1, string dollar2)
{
  string rootPattern = \"fwSO_*\";
  dyn_string filteredAlarms;
  for (int i=1; i<=dynlen(alarms); i++)
  {
    string fsmType; 
    dyn_string alarmsStr = strsplit(alarms[i], \";\");
    string application;
    bool foundInSubTree = fwSysOverviewNotifications_getApplication(alarmsStr[1], application, $2);

    if (foundInSubTree)
    {
      dynAppend(filteredAlarms, alarms[i]);
    }    
    
    
    /*string fsmDp = getFsmDpFromAlarm(alarmsStr[1], fsmType);

    if (fsmType != \"\" && fsmDp != \"\")
    {
      dyn_dyn_string dps = fwSysOverviewFsm_getChildrenOfTypeWithDomain(dollar2, fsmType, dollar1);
      for(int j=1; j<=dynlen(dps); j++)
      {
        if (dps[j][1] == fsmDp)
        {
          dynAppend(filteredAlarms, alarms[i]);
          break;
        }
      }
    }
    else 
      DebugN(\"CANNOT find fsm dp for: \" + alarmsStr[1]);*/
  }

  alarms = filteredAlarms;
}
string getFsmDpFromAlarm(string alarmDpe, string& fsmType)
{
  string fmcPattern = \"FwFMC*\";

  string fsmDp;
  string dp = dpSubStr(alarmDpe, DPSUB_DP_EL);
  string systemName = dpSubStr(alarmDpe, DPSUB_SYS);

  if (systemName != getSystemName())
  {
    dp = \"icemonSystemIntegrity_\" + strtoupper(systemName) + \"_\" + getSystemId(systemName);
    strreplace(dp, \":\", \"\");
  }

  string dpType = dpTypeName(dp);
  
  if (dpType == \"IcemonSystemIntegrity\" || dpType == \"FwFMCNode\" || dpType == \"FwSystemOverviewProject\")
  {
    fsmDp = dpSubStr(dp, DPSUB_DP);
    fsmType = dpType;
  }
  else if (dpType == \"IcemonPlc\")
  {
    fsmDp = dpGetAlias(dpSubStr(dp, DPSUB_DP) + \".\");
    fsmType = dpType;
  }
  else if (patternMatch(fmcPattern, dpType))
  {
    fsmDp = fwFMC_getNodeDp(fwFMC_getNodeName(dpSubStr(dp, DPSUB_DP)));
    fsmType = \"FwFMCNode\";
  }
  else if (dpType == \"FwSystemOverviewManager\")
  {
    dyn_string arr = strsplit(dpSubStr(dp, DPSUB_DP), \"/\");
    if (dynlen(arr) == 4)
      fsmDp = arr[1] + \"/\" + arr[2] + \"/\" + arr[3];
    fsmType = \"FwSystemOverviewProject\";
  }
  
  return fsmDp;
}
//sorts array by the first column
void dynDynSort(dyn_dyn_anytype& arr)
{
  anytype tmpInt;
  anytype tmpStr;
  for (int i=1; i <= dynlen(arr); i++)
    for (int j=i; j <= dynlen(arr); j++)
    {
      if (arr[j][1] > arr[i][1])
      {
        //swap
        tmpInt = arr[i][1];
        tmpStr = arr[i][2];
        arr[i][1] = arr[j][1];
        arr[i][2] = arr[j][2];
        arr[j][1] = tmpInt;
        arr[j][2] = tmpStr;
      } 
    }
}



" 0
 E 0 0 1 0 1 E 0.9743589743589743 0 0.8765251537675561 0.7692307692307698 0.9526576242662345 0 E 30 113 421 171
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 30 Most recurrent alarms (1 hour)
2 15
"txDpe2"
""
1 50 135 E E E 1 E 1 E N "White" E N "_Window" E E
 E E
15 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 2 1 E U  0 E 50 135 68 149
0 2 2 "0s" 0 0 0 192 0 0  50 135 1
1
LANG:1 25 Arial,8,-1,5,50,0,0,0,0,0
0 1
LANG:1 3 dpe
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0
