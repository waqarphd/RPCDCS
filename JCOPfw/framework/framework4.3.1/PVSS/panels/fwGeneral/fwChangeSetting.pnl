V 10
1
LANG:1 8 (NoName)
PANEL,-1 -1 401 227 N "_3DFace" 4
"$dpSetName"
"$maxValue"
"$minValue"
"$sDpName"
"main()
{
	string elementType, formatString;
	dyn_string exceptionInfo;
	
	elementType = dpElementType($sDpName + $dpSetName);
	fwConfigs_getBestFormatForDpeType(elementType, formatString, exceptionInfo);
	fwConfigs_setTextFieldsFormat(makeDynString(\"NewValue\"), formatString, makeDynBool(TRUE), exceptionInfo);
									
//DebugN(NewValue.format);
}" 0
 E E E E 1 -1 -1 0  20 20
""0  1
E E 2
"CBRef" "0"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 4
"Text1"
""
1 10 10 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 12 88 29
0 2 0 "0s" 0 0 0 192 0 0  12 12 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 11 Device Name
2 10
"label1"
""
1 150 72 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
	int length, pos;
	string deviceModel;
	dyn_string par, exceptionInfo;
	dyn_dyn_string elements;

	fwDevice_getModel(makeDynString($sDpName), deviceModel, exceptionInfo);
	fwDevice_getConfigElements(dpTypeName($sDpName), fwDevice_ALL, elements, exceptionInfo, deviceModel);

	pos = dynContains(elements[1], $dpSetName);
	if(pos > 0)
	{
		label1.text = elements[2][pos] + \":\";
		label2.text = elements[2][pos] + \":\";
	}
	else
	{
		par = strsplit($dpSetName, \".\");
		length = dynlen(par);
		label1.text = par[length] + \":\";
		label2.text = par[length] + \":\";
	}
}" 0
 E 0 1 1 0 1 E U  0 E 152 74 184 91
0 2 0 "0s" 0 0 0 194 0 0  184 74 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 5 Text4
2 11
"label2"
""
1 150 144 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
	int len;
	dyn_string par;

	par = strsplit($dpSetName,\".\");
	len = dynlen(par);
//	DebugN($dpSetName,par,len);
	this.text = par[len] + \":\";
}
" 0
 E 0 1 1 0 1 E U  0 E 152 146 184 163
0 2 0 "0s" 0 0 0 194 0 0  184 146 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 5 Text5
30 12
"Frame1"
""
1 10 177 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
11 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 10 127 390 177
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 11 New Setting
30 13
"Frame2"
""
1 10 105 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
12 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 10 55 390 105
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 15 Current Setting
14 0
"OldLabel"
""
1 201 70 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 199 68 302 95
3 "0s" 0 0 0 0 0 -1  E "main() 
{ 
  	if(dpConnect(\"work\", $sDpName + $dpSetName) == -1) 
		this.backCol = \"DpDoesNotExist\";
  		
} 
work(string dp, string str) 
{ 
  	this.text = str;
} 
" 0
 E
14 1
"NewValue"
""
1 201 142 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 199 140 302 167
3 "6s" 6 0 0 0 0 -1  E E E
13 2
"Button1"
""
1 317 142 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 315 140 382 171

T 
1
LANG:1 5 Apply
"main()
{
	bool negateRange, ignoreOutside, inclusiveMin, inclusiveMax, doesExist, testResult;
	int result;
	dyn_string errorInfo;
	string elementType, currentValue, processedNewValue, desiredValue, minText, maxText;
	anytype comparisonValue;
	unsigned uValue;
	int iValue;
	bool bValue;
	float fValue, minValue, maxValue;
	string sValue;
	
	elementType = dpElementType($sDpName + $dpSetName);
	
	//dpGet($sDpName + $dpSetName, desiredValue);
	desiredValue = NewValue.text;
	
	if(elementType != DPEL_STRING)
	{
		if(desiredValue == \"\")
		{
			fwException_raise(	errorInfo, 
								\"ERROR\", 
								\"The new setting value must not be empty\", 
								\"\");
			fwExceptionHandling_display(errorInfo);
			return;
		}
	}

	switch(elementType)
	{
		case DPEL_INT:
		//DebugN(\"int\");
			result = sscanf(desiredValue, \"%d\", iValue);
			processedNewValue = iValue;
			comparisonValue = iValue;
			testResult = TRUE;
			break;
		case DPEL_UINT:
		//DebugN(\"unsigned\");
			result = sscanf(desiredValue, \"%d\", iValue);
			if(iValue < 0)
				result = -1;
			processedNewValue = iValue;
			comparisonValue = iValue;
			testResult = TRUE;
			break;
		case DPEL_FLOAT:
		//DebugN(\"float\");
			result = sscanf(desiredValue, \"%f\", fValue);
			if(strlen(desiredValue) != strlen((string)fValue))
			{
				result = -1;
//DebugN(\"Mismatch\", strlen(desiredValue), strlen((string)fValue));
				break;
			}
			processedNewValue = fValue;
			comparisonValue = fValue;
			testResult = TRUE;
			break;
		case DPEL_BOOL:
		case DPEL_STRING:
		//DebugN(\"string\");
//			result = sscanf(desiredValue, \"%s\", sValue);
			processedNewValue = desiredValue;
			comparisonValue = desiredValue;
			result = 1;
			testResult = FALSE;
			break;
		default:
			fwException_raise(	errorInfo, 
								\"ERROR\", 
								\"Data point element type is not supported (\" + elementType + \")\", 
								\"\");
			fwExceptionHandling_display(errorInfo);
			dpGet($sDpName + $dpSetName, currentValue);
			NewValue.text = currentValue;
			return;
			break;
	}		
//DebugN(result, processedNewValue);
		
	if(result == 0 || result == -1)
	{
		fwException_raise(	errorInfo, 
							\"ERROR\", 
							\"The new setting value has an invalid format\", 
							\"\");
		fwExceptionHandling_display(errorInfo);
		return;
	}

//DebugN($maxValue, $minValue, processedNewValue);

	if(testResult)
	{
		if(isDollarDefined(\"$maxValue\"))
			maxValue = $maxValue;
		else
			maxValue = comparisonValue;
			
		if(isDollarDefined(\"$minValue\"))
			minValue = $minValue;
		else
			minValue = comparisonValue;
//DebugN(minValue, maxValue);	
		if((comparisonValue > maxValue) || (comparisonValue < minValue))
		{
			sprintf(minText, \"%.3f\", minValue);
			sprintf(maxText, \"%.3f\", maxValue);
		
		        if((isDollarDefined(\"$maxValue\")) && (isDollarDefined(\"$minValue\")))
                        {
			  fwException_raise(errorInfo, \"ERROR\",
					    \"The value is outside the valid range: \" + minText + \" to \" + maxText, \"\");
                        }
                        else if(isDollarDefined(\"$maxValue\"))
                        {
			  fwException_raise(errorInfo, \"ERROR\",
					    \"The value must be below \" + maxText, \"\");
                        }
                        else if(isDollarDefined(\"$minValue\"))
                        {
			  fwException_raise(errorInfo, \"ERROR\",
					    \"The value must be above \" + minText, \"\");
                        }
                          
                        fwExceptionHandling_display(errorInfo);		
			return;
		}

		fwPvRange_get(	$sDpName + $dpSetName, doesExist, minValue,
						maxValue, negateRange, ignoreOutside, inclusiveMin, 
						inclusiveMax, errorInfo);
	
		if(dynlen(errorInfo) > 0)
			fwExceptionHandling_display(errorInfo);
	
		if(doesExist)
		{
			if((comparisonValue > maxValue) || (comparisonValue < minValue))
			{
				sprintf(minText, \"%.3f\", minValue);
				sprintf(maxText, \"%.3f\", maxValue);
				
				fwException_raise(	errorInfo, 
									\"ERROR\",
									\"The value is outside the PVSS range: \" + minText + \" to \" + maxText, 
									\"\");
				fwExceptionHandling_display(errorInfo);		
				return;
			}
			else
				dpSet($sDpName + $dpSetName, processedNewValue);
		}
		else
			dpSet($sDpName + $dpSetName, processedNewValue);
	}
	else
		dpSet($sDpName + $dpSetName, processedNewValue);
	
	if(elementType == DPEL_BOOL)
	{	
		dpGet($sDpName + $dpSetName, processedNewValue);
		NewValue.text = processedNewValue;
	}
}" 0
 E E E
13 3
"Button2"
""
1 317 191 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 315 189 382 220

T 
1
LANG:1 5 Close
"main()
{
	PanelOff();
}" 0
 E E E
13 8
"Button10"
""
1 3061 3422 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
2
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 70 -microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1
0 ""
 315 67 382 98

T 
2
LANG:1 7 Details
LANG:0 7 Details
"main()
{
	dyn_string exceptionInfo;

	fwGeneral_openDetailsPanel($sDpName + $dpSetName, exceptionInfo);
}" 0
 E E E
14 9
"sChannelName"
""
1 100 106 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 98 8 392 35
2 "0s" 0 0 0 0 0 -1  E "main()
{
	this.text = $sDpName;
}" 0
 E
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0