V 10
1
LANG:1 8 (NoName)
PANEL,427 365 511 267 N "_3DFace" 3
"$bShowCurrents"
"$bShowUnits"
"$sDpName"
EEE E E 1 -1 -1 0  -544 -527
"" 0 1
EE 2
"CBRef""1"
"EClose"E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
25 0
"Chantab"
""
1 -553 -527 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
1 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 106 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,0,0,0,0,Arial
0 ""
8 8 502 257
"dyn_string gListOfDpElementToConnect;
dyn_string voltageDpes, currentDpes;

main()
{
	bool showUnits, showCurrents, hasChildren = FALSE;
	int tempSlots, numberOfSlots = 0, i, length, numberOfCrates, j, alertExists;
	string crateList, parentDp, parentName, voltageElement, currentElement, dataValidElement;
	dyn_string tempChildren, childrenDps, childrenNames, summaryDpes,
				voltageUnits, currentUnits, positions, exceptionInfo, crateNames;

	this.sortOnClick = FALSE;

	if(isDollarDefined(\"$bShowUnits\"))
	{
		if($bShowUnits == \"\")
			showUnits = TRUE;
		else
			showUnits = $bShowUnits;

		if(!showUnits)
		{
			this.columnVisibility(3, FALSE);
			this.columnVisibility(5, FALSE);
		}
	}	

	if(isDollarDefined(\"$bShowCurrents\"))
	{
		if($bShowCurrents == \"\")
			showCurrents = TRUE;
		else
			showCurrents = $bShowCurrents;

		if(!showCurrents)
		{
			this.columnVisibility(4, FALSE);
			this.columnVisibility(5, FALSE);
		}
	}	

	crateList = $sDpName;
	strreplace(crateList, \" | \", \"|\");
	crateNames = strsplit(crateList, \"|\");	

	numberOfCrates = dynlen(crateNames);
	for(j=1; j<=numberOfCrates; j++)
	{
		if(strpos(dpTypeName(crateNames[j]), \"Channel\") > 0)
		{
			if(strpos(crateNames[j], \":\") < 0)
				crateNames[j] = getSystemName() + crateNames[j];
		
			dynAppend(childrenDps, crateNames[j]);
			numberOfSlots++;
		}
		else
		{
			fwDevice_getModelSlots(makeDynString(crateNames[j]), tempSlots, exceptionInfo);
			numberOfSlots += tempSlots;
	
			fwDevice_getChildrenInSlots(makeDynString(crateNames[j]), fwDevice_HARDWARE, tempChildren, exceptionInfo);
			dynAppend(childrenDps, tempChildren);
		}
	}

	for(i=1; i<=numberOfSlots; i++)
	{
		if(childrenDps[i]!=\"\")
		{
			if(strpos(dpTypeName(childrenDps[i]), \"Marathon\") > 0)
			{
				voltageElement = \".MeasurementSenseVoltage\";
				currentElement = \".MeasurementCurrent\";
				dataValidElement = \".MeasurementSenseVoltage\";
			}
			else
			{
				voltageElement = \".Actual.VoltageValue\";
				currentElement = \".Actual.CurrentValue\";
				dataValidElement = \".Actual.VoltageValue\";
			}

			if(dpExists(childrenDps[i] + voltageElement))
			{
				voltageDpes[i] = childrenDps[i] + voltageElement;
				voltageUnits[i] = dpGetUnit(childrenDps[i] + voltageElement);
			}
			else
				voltageUnits[i] = \"\";
				
			if(dpExists(childrenDps[i] + currentElement))
			{
				currentDpes[i] = childrenDps[i] + currentElement;
				currentUnits[i] = dpGetUnit(childrenDps[i] + currentElement);
			}
			else
				currentUnits[i] = \"\";

			fwDevice_getPosition(childrenDps[i], childrenNames[i], positions[i], exceptionInfo);
			fwDevice_getName(childrenDps[i], childrenNames[i], exceptionInfo);
			
			if(numberOfCrates > 1)
			{
				fwDevice_getParent(childrenDps[i], parentDp, exceptionInfo);
				fwDevice_getName(parentDp, parentName, exceptionInfo);
				childrenNames[i] = parentName + \"/\" + childrenNames[i];
			}
			
			summaryDpes[i] = childrenDps[i] + \".\";

//			hasChildren = TRUE;
		}
		else
		{
			voltageDpes[i] = \"\";
			voltageUnits[i] = \"\";
			currentDpes[i] = \"\";
			currentUnits[i] = \"\";
			summaryDpes[i] = \"\";
		//	dynRemove(childrenDps, i);
		//	i--;
		}
	}
	
	this.deleteAllLines;

	this.appendLines(dynlen(childrenDps), \"Number\", positions, \"Name\", childrenNames,
							\"vUnit\", voltageUnits, \"iUnit\", currentUnits);
		
	gListOfDpElementToConnect = summaryDpes;
	length = dynlen(summaryDpes);

	for(i=1; i<=length; i++) 
	{
		if(dpExists(summaryDpes[i]))
		{
			dpGet(summaryDpes[i] + \":_alert_hdl.._type\", alertExists);
			if(alertExists == DPCONFIG_NONE)
			{
				dpConnect(	\"fwShowStatusWithoutAlert\",
										summaryDpes[i] + strltrim(dataValidElement, \".\") + \":_original.._invalid\"); 
			}
			else
			{
				dpConnect(	\"fwShowStatusWithAlert\",
										summaryDpes[i] + \":_alert_hdl.._act_state_color\", 
										summaryDpes[i] + \":_alert_hdl.._active\",
										summaryDpes[i] + strltrim(dataValidElement, \".\") + \":_original.._invalid\"); 
			}
		}
		else
				this.cellBackColRC(i-1, \"status\", \"_3DFace\");		
	}
	
	this.lineVisible(0);

	length = dynlen(voltageDpes);
	for(i=1; i <= length; i++)
	{
		if(dpExists(voltageDpes[i]))
			dpConnect(\"fwWriteVoltageValue\", TRUE, voltageDpes[i] + \":_online.._value\");
	}	

	length = dynlen(currentDpes);
	for(i=1; i <= length; i++)
	{
		if(dpExists(currentDpes[i]))
			dpConnect(\"fwWriteCurrentValue\", TRUE, currentDpes[i] + \":_online.._value\");
	}	
}

fwWriteVoltageValue(string dpe, float value)
{
	int cellPos;
	string cleanValue, format;
	string dpName;
	dyn_string exceptionInfo;

	dpName = dpSubStr(dpe, DPSUB_SYS_DP_EL);
	cellPos = dynContains(voltageDpes, dpName);
//DebugN(dpName, value);
	if(cellPos >= 1)
	{
		format = dpGetFormat(voltageDpes[cellPos]);
		if(format == \"\")
			format = \"%.3f\";
		else
			format = \"%\" + substr(format, strpos(format, \".\"));

		sprintf(cleanValue, format, value);
		this.cellValueRC(cellPos-1, \"voltage\", cleanValue);
	}
}

fwWriteCurrentValue(string dpe, float value)
{
	int cellPos;
	string cleanValue, format;
	string dpName;
	dyn_string exceptionInfo;

	dpName = dpSubStr(dpe, DPSUB_SYS_DP_EL);
	cellPos = dynContains(currentDpes, dpName);
//DebugN(dpName, value);
	if(cellPos >= 1)
	{
		format = dpGetFormat(currentDpes[cellPos]);
		if(format == \"\")
			format = \"%.3f\";
		else
			format = \"%\" + substr(format, strpos(format, \".\"));

		sprintf(cleanValue, format, value);
		this.cellValueRC(cellPos-1, \"current\", cleanValue);
	}
}

fwShowStatusWithAlert(string dpe1, string alertColour, string dpe2, bool alarmActive, string dpe3, bool dataInvalid)
{
	int cellPos;
	string elementColour, dpName;
	dyn_string exceptionInfo;

	dpName = dpSubStr(dpe1, DPSUB_SYS_DP) + \".\";
	cellPos = dynContains(gListOfDpElementToConnect, dpName);

	fwColour_convertStatusToColour(elementColour, alertColour, !alarmActive, dataInvalid, exceptionInfo);
	if(cellPos >= 1)
		this.cellBackColRC(cellPos - 1, \"status\", elementColour);
}

fwShowStatusWithoutAlert(string dpe1, bool dataInvalid)
{
	int cellPos;
	string elementColour, dpName;
	dyn_string exceptionInfo;

	dpName = dpSubStr(dpe1, DPSUB_SYS_DP) + \".\";
	cellPos = dynContains(gListOfDpElementToConnect, dpName);

	fwColour_convertStatusToColour(elementColour, \"_3DFace\", FALSE, dataInvalid, exceptionInfo);
	if(cellPos >= 1)
		this.cellBackColRC(cellPos - 1, \"status\", elementColour);
}" 0
 "main(int xpos,string columnName,string value)
{
	int i, length;
	string deviceName, crateList, parentName, model;
	dyn_string exceptionInfo, crateNames, crateNameParts, panelNames;


	getValue(\"\",\"cellValueRC\",xpos,\"Name\",deviceName);

	crateList = $sDpName;
	strreplace(crateList, \" | \", \"|\");
	crateNames = strsplit(crateList, \"|\");
	
	crateNameParts = strsplit(crateNames[1], \"/\");		
	length = dynlen(crateNameParts);
	
	if(dynlen(crateNames) > 1)
		length -= 1;
		
	for(i=1; i<=length; i++)
		parentName += crateNameParts[i] + fwDevice_HIERARCHY_SEPARATOR; 

//DebugN(parentName);
	if(deviceName!=\"\")
	{	
		deviceName = parentName + deviceName;
//DebugN(deviceName);
	fwDevice_getModel(makeDynString(deviceName), model, exceptionInfo);
		fwDevice_getDefaultOperationPanels(dpTypeName(deviceName), panelNames, exceptionInfo, model);

		if(!isModuleOpen(panelNames[1] + \".pnl\")) 
				ModuleOn(panelNames[1] + \".pnl\",100,100,100,100,1,1,1,\"\");
	
		RootPanelOnModule(panelNames[1] + \".pnl\",
					deviceName,panelNames[1] + \".pnl\",
					makeDynString(\"$sDpName:\"+deviceName));
	}
}
" 0
 1 0 1 7 1 "Number" 0 0 0 "s" 1
LANG:1 3 Pos
E1
LANG:1 0 
 44 "Name" 0 -1 0 "s" 1
LANG:1 12 Channel Name
E1
LANG:1 0 
 160 "voltage" 0 1 0 "s" 1
LANG:1 7 Voltage
E1
LANG:1 0 
 80 "vUnit" 0 1 0 "s" 1
LANG:1 4 Unit
E1
LANG:1 0 
 45 "current" 0 1 0 "s" 1
LANG:1 7 Current
E1
LANG:1 0 
 80 "iUnit" 0 1 0 "s" 1
LANG:1 4 Unit
E1
LANG:1 0 
 45 "status" 0 1 0 "s" 1
LANG:1 6 Status
E1
LANG:1 0 
 50 26 26 "" 1 1
LANG:1 2 #1
8 30 1
LANG:1 106 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,0,0,0,0,Arial
0 ""
0 1 1 3 0
1 0
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0