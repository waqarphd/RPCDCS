int first_time;
dyn_string DomainsOn;
dyn_int DomainsRunning;
dyn_string DomainsConnected;

main()
{
	int done, new_version, autoStart, all_running;
	string status, action;
	int tmout = 20;

	while(tmout)
	{	
		dpGet("ToDo.action", action, "ToDo.status", status);
		if((action != "Installing") && (status != "Installing"))
			break;
		delay(1);
		tmout--;
	}
	first_time = 1;
//	fwFsm_startShowFwObjects();
	new_version = fwFsm_initialize(1, 1);   
	start_api_man(done);
  	dpConnect("cbDoWork","ToDo.action:_online.._value", "ToDo.params:_online.._value");
	if(new_version)
		fwFsmTree_generateAll();
	delay(3);
	all_running = check_all_domains();
	dpGet("ToDo.autoStart", autoStart);
	if(autoStart)
	{
		if(!all_running)
			restart_all_fsms("FwRestartAllDomains");
	}
}

cbDoWork(string dp, string action, string dp1, dyn_string params)
{
	dyn_string domains, parents, children, objs;
	string domain, obj, type, text, cmnd;
	int pid, ret, pos, api_started;

	if(first_time)
	{
		first_time = 0;
		return;
	}
  	dpSetWait("ToDo.status:_original.._value", "working");
	if(action == "FwCreateObject")
	{
		obj = params[1];
		print_msg("fwFSMSrvr executing "+action+" - "+obj, 1);
		fwFsm_doWriteSmiObjectType(obj);
		print_msg(obj+" - Object Type Created");
  		dpSetWait("ToDo.status:_original.._value", action);
	}
	else if(action == "FwCreateScripts")
	{
		domain = params[1];
		print_msg("fwFSMSrvr executing "+action+" - "+domain, 1);
		type = params[2];
		objs = params;
		dynRemove(objs,1);
		dynRemove(objs,1);
		fwFsm_doWriteDomainTypeScripts(domain, type, objs);
		print_msg(domain+" - Object Scripts for Type "+type+" Created");
 		dpSetWait("ToDo.status:_original.._value", action);
	}
	else if(action == "FwDeleteScripts")
	{
		domain = params[1];
		print_msg("fwFSMSrvr executing "+action+" - "+domain, 1);
		fwFsm_doRemoveTypeScripts(domain);
		print_msg(domain+" - Object Scripts deleted");
  		dpSetWait("ToDo.status:_original.._value", action);
	}
	else if(action == "FwCreateDomain")
	{
		domain = params[1];
		print_msg("fwFSMSrvr executing "+action+" - "+domain, 1);
		ret = fwFsm_doWriteSmiDomain(domain);
		if(ret)
		{
			print_msg(domain+" - Domain Created");
  			dpSetWait("ToDo.status:_original.._value", action);
		}
		else
		{
			print_msg(domain+" - Domain Not Created");
  			dpSetWait("ToDo.status:_original.._value", 
			"error/"+domain+": Error Translating SML code, please check the log");
		}
	}
	else if(action == "FwDeleteObject")
	{
		obj = params[1];
		print_msg("fwFSMSrvr executing "+action+" - "+obj, 1);
		fwFsm_doRemoveSmiObject(obj);
		print_msg(obj+" - Object Type Deleted");
  		dpSetWait("ToDo.status:_original.._value", action);
	}
	else if(action == "FwDeleteDomain")
	{
		domain = params[1];
		print_msg("fwFSMSrvr executing "+action+" - "+domain, 1);
		fwFsm_doRemoveSmiDomain(domain);
		print_msg(domain+" - Domain Deleted");
  		dpSetWait("ToDo.status:_original.._value", action);
	}
	else if(action == "FwRestartAllDomains")
	{
		restart_all_fsms(action);
	}
	else if(action == "FwStopAllDomains")
	{
		stop_all_fsms(action);
	}
	else if(action == "FwRestartTreeDomains")
	{
		restart_fsms(action, params[1], 1);
	}
	else if(action == "FwStopTreeDomains")
	{
		stop_fsms(action, params[1], 1);
	}
	else if(action == "FwRestartDomain")
	{
		restart_fsms(action, params[1], 0);
	}
	else if(action == "FwStopDomain")
	{
		stop_fsms(action, params[1], 0);
	}
	else if(action == "FwRestartDomainDevices")
	{
//  		dpGet("ToDo.params:_online.._value", params);
		print_msg("fwFSMSrvr executing "+action+" - "+params[1], 1);
		stop_domain_devices_new(params[1], -1);
		delay(1);
		start_domain_devices_new(params[1]);
  		dpSetWait("ToDo.status:_original.._value", action);
	}
	else if(action == "FwRestartPVSS00smi")
	{
		int api_started, ret;

//  		dpGet("ToDo.params:_online.._value", params);
		print_msg("fwFSMSrvr executing "+action, 1);
		ret = kill_api_man();
		start_api_man(api_started);
  		dpSetWait("ToDo.status:_original.._value", action);
	}
	else if(action == "FwSendSmiCommand")
	{
//  		dpGet("ToDo.params:_online.._value", params);
		domain = params[1];
		obj = params[2];
		cmnd = params[3];
//		print_msg("fwFSMSrvr executing "+action+" - "+domain+"::"+obj+" "+cmnd, 1);
		fwUi_sendDirectSmiCommand(domain, obj,cmnd);
  		dpSetWait("ToDo.status:_original.._value", action);
	}
	else if(action == "Installing")
	{
		print_msg("fwFSMSrvr Ignoring action: "+action);
	}
	else
	{
		print_msg("fwFSMSrvr executing Unknown "+action, 1);
  		dpSetWait("ToDo.status:_original.._value", action);
	}
}

print_msg(string msg, int print_user = 0)
{
	time t1;
	int manId, num, type, sysNum;
	string sys, id, infoDp, user;

	t1 = getCurrentTime();
	if(!print_user)
	{
		DebugN(formatTime("%c",t1)+" "+msg);
		return;
	}
	dpGet("ToDo.action:_online.._manager", manId);
	getManIdFromInt(manId, type, num, sysNum);
//DebugN("manager", manId, type, num, sysNum);
	if(type == UI_MAN)
	{
		sys = getSystemName(sysNum);
		id = sys+"Manager"+num;
		user = fwUi_getManagerIdInfo(id);
		DebugN(formatTime("%c",t1)+" "+msg+" From: "+id+"("+user+")");
	}
	else
	{
		DebugN(formatTime("%c",t1)+" "+msg);
	}
//DebugN("user", id, user);
}

stop_all_fsms(string action)
{
	int api_started, ret;

	start_api_man(api_started);
	print_msg("fwFSMSrvr executing "+action, 1);
	stop_device_handler();
	stop_all_domains();
	delay(2);
	ret = stop_api_man();
	if(!ret)
	{
		ret = stop_api_man();
		if(!ret)
		{
			ret = kill_api_man();
		}
	}
	stop_connections();
  	dpSetWait("ToDo.status:_original.._value", action);
}

dyn_string ReIncludesToDo;
int ReIncludesDone;

restart_all_fsms(string action)
{
	int api_started;

	print_msg("fwFSMSrvr executing "+action, 1);
	start_device_handler();
	start_api_man(api_started);
	stop_all_domains();
	if(!api_started)
		signal_api_man();
	delay(2);
	ReIncludesDone = 0;
	dynClear(ReIncludesToDo);
	start_all_domains();
	if(wait_running())
		do_reincludes();
  	dpSetWait("ToDo.status:_original.._value", action);
}

restart_fsms(string action, string domain, int recurse)
{
	int api_started;

	start_device_handler();
	start_api_man(api_started);
	print_msg("fwFSMSrvr executing "+action+" - "+domain, 1);
	do_stop_domain(domain, recurse);
	if(!api_started)
		signal_api_man();
//	if(recurse)
//		delay(1);
//	else
//		delay(0,200);
	delay(2);
	ReIncludesDone = 0;
	dynClear(ReIncludesToDo);
	do_start_domain(domain, recurse);
	if(wait_running())
		do_reincludes();
  	dpSetWait("ToDo.status:_original.._value", action);
}

stop_fsms(string action, string domain, int recurse)
{
	int api_started;

	start_api_man(api_started);
	print_msg("fwFSMSrvr executing "+action+" - "+domain, 1);
	do_stop_domain(domain, recurse);
	if(!api_started)
		signal_api_man();
  	dpSetWait("ToDo.status:_original.._value", action);
}

get_all_domain_children(string domain, dyn_string &children, dyn_int &cus)
{
	dyn_string part_children, exInfo;
	dyn_int part_cus;
	int cu, i;
	
	fwTree_getChildren(domain, part_children, exInfo);
	for(i = 1; i <= dynlen(part_children); i++)
	{
		fwTree_getNodeCU(part_children[i], cu, exInfo);
		dynAppend(part_cus, cu);
		if(!cu)
		{
			get_all_domain_children(part_children[i], children, cus);
		}	
	}
	dynAppend(children, part_children);
	dynAppend(cus, part_cus);
//DebugN("get_all_children", domain, children, cus);
}

dyn_string FwUiRemoteDps, FwUiLocalDps;

do_start_domain(string domain, int recurse)
{
	dyn_string children, exInfo;
	dyn_int cus;
	int i, pos, cu;
	string sys, obj, type, child, local_dp, rem_dp;

//	fwTree_getChildren(domain,children, exInfo);
	get_all_domain_children(domain, children, cus);
	for(i = 1; i <= dynlen(children); i++)
	{
		if(check_remote_alarm(domain, children[i], local_dp, rem_dp))
		{
			fwUi_connectRemoteSummaryAlarm(local_dp, rem_dp);
		}
//		fwTree_getNodeCU(children[i],cu, exInfo);
		if(cus[i])
		{
			child = fwTree_getNodeDisplayName(children[i], exInfo);
			if(!dynContains(DomainsConnected,domain+"|"+child+"::"+child+"_FWM"))
			{
//DebugTN("Connecting","checkSummaryAlert",domain, child+"::"+child+"_FWM");
				fwUi_connectCurrentState("checkSummaryAlert",domain, child+"::"+child+"_FWM");
//DebugTN("Connecting","ExecutingAction set_owner_new",domain, /*child+"::"+*/child+"_FWM");
				fwUi_connectExecutingAction("set_owner_new",domain, /*child+"::"+*/child+"_FWM");
				dynAppend(DomainsConnected,domain+"|"+child+"::"+child+"_FWM");
			}
			if(recurse)
			{
				fwTree_getNodeDevice(children[i], obj, type, exInfo);
				sys = fwFsm_getSystem(obj);
				if((sys == fwFsm_getSystemName()) && (!fwFsm_isObjectReference(children[i])))
					do_start_domain(children[i], recurse);
			}
		}
	}
	start_domain(domain);
}

int check_remote_alarm(string domain, string child, string &local_dp, string &rem_dp)
{
	dyn_string exInfo, items;
	string obj, type;
	string sys;

	if(fwFsm_isObjectReference(child))
	{
		fwTree_getNodeDevice(child, obj, type, exInfo);
		sys = fwFsm_getSystem(obj);
		if(sys != fwFsm_getSystemName())
		{
			strreplace(obj,"::","|");
			items = strsplit(obj,":|");
			if(dynlen(items) < 3)
			{
				dynAppend(items, items[2]);
				obj += "|"+items[2];
			}				
			local_dp = domain+"|"+items[2]+"|"+items[3]+".";
			rem_dp = obj+".";
			return 1;				
		}
	}
	return 0;
}

do_stop_domain(string domain, int recurse)
{
	dyn_string children, exInfo;
	dyn_int cus;
	int i, pos, cu, done = 0;
	string sys, obj, type, id, child, local_dp, rem_dp;

//DebugTN("Do_Stop_Domain", domain);
	if(dynContains(DomainsOn, domain))
	{
		fwUi_getOwnership(domain, id);	
//		if(!recurse)
//		{
//			fwUi_getChildren(domain, children);
//			fwUi_excludeTree(domain, domain, id);
//			done = fwUi_excludeChildren(domain, domain, id, 1);
//		}
//		else
//		{
//DebugN("************ Releasing ",domain);
//			fwUi_releaseTreeAll(domain, domain, id);
//		}
//DebugTN("Starting delay for domain, DONE = ", done);
//			if(done)
//			{
//				delay(0,500);
//			}
//		}
	}
//	fwTree_getChildren(domain,children, exInfo);
	get_all_domain_children(domain, children, cus);
	for(i = 1; i <= dynlen(children); i++)
	{
		if(dynContains(DomainsOn, domain))
		{
			if(check_remote_alarm(domain, children[i], local_dp, rem_dp))
				fwUi_disconnectRemoteSummaryAlarm(local_dp, rem_dp);
		}
//		fwTree_getNodeCU(children[i],cu, exInfo);
		if(cus[i])
		{
			child = fwTree_getNodeDisplayName(children[i], exInfo);
			if(recurse)
			{
				fwTree_getNodeDevice(children[i],obj,type, exInfo);
				sys = fwFsm_getSystem(obj);
				if((sys == fwFsm_getSystemName()) && (!fwFsm_isObjectReference(children[i])))
				{
					do_stop_domain(children[i], recurse);
				}
				else
				{
					if(dynContains(DomainsOn, domain))
					{
						fwUi_excludeTree(domain, child, id);
						done++;
					}
				}
			}
			else
			{
				if(dynContains(DomainsOn, domain))
				{
					fwUi_excludeTree(domain, child, id);
					done++;
				}
			}
//			if(dynContains(DomainsOn, domain))
//			{
//DebugTN("Disconnecting","checkSummaryAlert",domain, child+"::"+child+"_FWM");
//				fwUi_disconnectCurrentState("checkSummaryAlert",domain, child+"::"+child+"_FWM");
//				fwUi_disconnectExecutingAction("set_owner_new",domain, child+"::"+child+"_FWM");
//			}
		}
	}
/*
	if(done)
		delay(0, 500);
	for(i = 1; i <= dynlen(children); i++)
	{
		if(cus[i])
		{
			if(dynContains(DomainsOn, domain))
			{
//DebugTN("Disconnecting","checkSummaryAlert",domain, child+"::"+child+"_FWM");
				fwUi_disconnectCurrentState("checkSummaryAlert",domain, child+"::"+child+"_FWM");
				fwUi_disconnectExecutingAction("set_owner_new",domain, child+"::"+child+"_FWM");
			}
		}
	}
*/
	if(dynContains(DomainsOn, domain))
	{
		int secs, millis;

		millis = 200 + done*100;
		secs = millis / 1000;
		millis = millis % 1000;
		delay(secs, millis);
//DebugN("************** Excluding", done, secs, millis);
//		if(done)
//			delay(0, 400);
//		else
//			delay(0, 200);
		stop_domain(domain);
	}
}

start_domain(string domain)
{
string dp, domain_file, domain_name, dns_node, env, log_file;
int index;

	fwUi_getDomainPrefix(domain, dp);
	start_domain_devices_new(domain);
//	delay(0,200);

	domain_file = domain;
	domain_name = domain;
	strreplace(domain_file,fwDev_separator,"_"); 
	strreplace(domain_name,fwDev_separator,":");
//DebugTN("Starting", domain, domain_file, domain_name);
	dns_node = fwFsm_getDimDnsNode();
	log_file = getPath(LOG_REL_PATH) + "/smiSM_" + domain_file + ".log";
	if(isfile(log_file))
		copyFile(log_file, log_file+".bak");
	if(!(index = dynContains(DomainsOn,domain)))
		index = dynAppend(DomainsOn, domain);
	DomainsRunning[index] = 0;
	dpSet(dp+".mode.owner","");
	if(!dynContains(DomainsConnected,domain+"|"+domain+"_FWM"))
	{
//DebugTN("Connecting","ExecutingAction set_owner",domain, domain+"_FWM");
		fwUi_connectExecutingAction("set_owner",domain,domain+"_FWM");
		dynAppend(DomainsConnected,domain+"|"+domain+"_FWM");
	}
	fwUi_connectCurrentState("check_running",domain, domain+"_FWM", 0);
	if (os=="Linux")
	{
		system(
			"export LD_LIBRARY_PATH="+fwFsm_getFsmPath()+"/bin:"
			+"${LD_LIBRARY_PATH};"
//			+"export DIM_DNS_NODE="+dns_node+";"
			+fwFsm_getFsmPath()+"/bin/smiSM -d 1 "+"-dns "+dns_node+" "+
				domain_name+" "+fwFsm_getProjPath()+"/smi/"+domain_file+
				" 1>" + getPath(LOG_REL_PATH) + "/smiSM_" + domain_file + ".log 2>&1 &");
	}
	else
	{
		int ret = 1, retry = 10;
//		env = "SET DIM_DNS_NODE="+dns_node;
//		system("start /B "+env+"&"+fwFsm_getFsmPath()+"/bin/smiSM "+domain_name+" "+fwFsm_getProjPath()+"/smi/"+domain_file+" &");
//		system("start /B "+fwFsm_getFsmPath()+"/bin/smiSM "+domain_name+" "+fwFsm_getProjPath()+"/smi/"+domain_file+" &");
////		system("start /B cmd /c \""+env+"&&"+fwFsm_getFsmPath()+"/bin/smiSM "+domain_name+" "+fwFsm_getProjPath()+"/smi/"+domain_file+"\"");
//DebugTN("Spawning", domain);
		while(ret && (retry > 0))
		{
			if(retry != 10)
			{
				send_dim_command(domain_name+"_SMI/EXIT", 1);
				delay(0,200);
			}
			ret = system("start /B "+fwFsm_getFsmPath()+"\\bin\\smiSM -d 1 "+"-dns "+dns_node+" "+
				domain_name+" "+fwFsm_getProjPath()+"\\smi\\"+domain_file+
				" > " + getPath(LOG_REL_PATH) + "\\smiSM_" + domain_file + ".log 2>&1");
			retry--;
		}
//DebugTN("Started", domain, "**************************************************", ret, retry);
		if(ret)	
			fwUi_disconnectCurrentState("check_running",domain, domain+"_FWM");
	}
/*
	if(!(index = dynContains(DomainsOn,domain)))
		index = dynAppend(DomainsOn, domain);
	DomainsRunning[index] = 0;
	dpSet(dp+".mode.owner","");
	if(!dynContains(DomainsConnected,domain+"|"+domain+"_FWM"))
	{
//DebugTN("Connecting","ExecutingAction set_owner",domain, domain+"_FWM");
		fwUi_connectExecutingAction("set_owner",domain,domain+"_FWM");
		dynAppend(DomainsConnected,domain+"|"+domain+"_FWM");
	}
*/
}

stop_domain(string domain)
{
	string domain1;
	int index;

//DebugTN("************ Stopping ",domain);
	if((index = dynContains(DomainsOn,domain)))
	{
//		fwUi_disconnectExecutingAction("set_owner",domain,domain+"_FWM");
		dynRemove(DomainsOn, index);
		dynRemove(DomainsRunning, index);
	}
//	domain1 = strtoupper(domain);
//	strreplace(domain1,fwDev_separator,":");
//	send_dim_command(domain1+"_SMI/EXIT", 1);
//	delay(0,200);
//DebugTN("************ Stopping 1",domain);
	stop_domain_devices_new(domain);
	delay(0,50);
}

do_exclude(string domain, string object)
{
string dp;

	fwUi_sendDirectSmiCommand(domain, object+"_FWM","EXCLUDE");
	fwUi_getDomainPrefix(object, dp);
	dpSet(dp+".mode.owner","");
}

stop_all_domains()
{
	dyn_string domains, exInfo;
	string domain;
	int i, pos, cu;

	fwTree_getChildren("FSM", domains, exInfo);
	for(i = 1; i <= dynlen(domains); i++)
	{
//		if(domains[i] != fwFsm_clipboardNodeName)
//		{
			fwTree_getNodeCU(domains[i], cu, exInfo);
			if(cu)
			{
				do_stop_domain(domains[i], 1);
			}
//		}
	}
	for(i = 1; i <= dynlen(DomainsOn); i++)
	{
		if(DomainsRunning[i])
		{
			domain = strtoupper(DomainsOn[i]);
			strreplace(domain,fwDev_separator,":");
			send_dim_command(domain+"_SMI/EXIT", 1);
			delay(0,200);
		}
	}
	dynClear(DomainsOn);
	dynClear(DomainsRunning);
}

/*
stop_all_domains()
{
	int i;

	for(i = 1; i <= dynlen(DomainsOn); i++)
	{
		stop_domain(DomainsOn[i]);
	}
	dynClear(DomainsOn);
}
*/

int deleteDomain()
{
}

int check_all_domains()
{
	dyn_string dps, domains;
	string dp, child, local_dp, rem_dp, state;
	int i, j, index, id;
	dyn_string children, exInfo;
	dyn_int cus;
	int cu, all_running;

	all_running = 1;
	dps = fwFsm_getDps("*","_FwCtrlUnit");
	for(i = 1; i <= dynlen(dps) ; i++)
		domains[i] = substr(dps[i],5);
	for(i = 1; i <= dynlen(domains); i++)
	{
		fwUi_getDomainPrefix(domains[i], dp);
	 	dpGet(dp+".running", id);
		if(id != 0)
		{
			fwUi_getCurrentState(domains[i],domains[i], state);
			if(state == "DEAD")
			{
				stop_domain_devices_new(domains[i]);
				id = 0;
			}
		}
		if(id != 0)
		{
			if(!(index = dynContains(DomainsOn,domains[i])))
			{
				dynAppend(DomainsOn, domains[i]);
				dynAppend(DomainsRunning, 1);
				if(!dynContains(DomainsConnected,domains[i]+"|"+domains[i]+"_FWM"))
				{
//DebugTN("Connecting1","ExecutingAction set_owner",domains[i], domains[i]+"_FWM");
					fwUi_connectExecutingAction("set_owner",domains[i],domains[i]+"_FWM");
					dynAppend(DomainsConnected,domains[i]+"|"+domains[i]+"_FWM");
				}
//				fwTree_getChildren(domains[i],children, exInfo);
				dynClear(children);
				dynClear(cus);
				get_all_domain_children(domains[i], children, cus);
				for(j = 1; j <= dynlen(children); j++)
				{
					if(check_remote_alarm(domains[i], children[j], local_dp, rem_dp))
					{
						fwUi_connectRemoteSummaryAlarm(local_dp, rem_dp);
					}
//					fwTree_getNodeCU(children[j], cu, exInfo);
					if(cus[j])
					{
						child = fwTree_getNodeDisplayName(children[j], exInfo);
						if(!dynContains(DomainsConnected,domains[i]+"|"+child+"::"+child+"_FWM"))
						{
							fwUi_connectCurrentState("checkSummaryAlert",domains[i], child+"::"+child+"_FWM");
//DebugTN("Connecting1","ExecutingAction set_owner_new",domains[i], /*child+"::"+*/child+"_FWM");
							fwUi_connectExecutingAction("set_owner_new",domains[i], /*child+"::"+*/child+"_FWM");
							dynAppend(DomainsConnected,domains[i]+"|"+child+"::"+child+"_FWM");
						}
					}
				}
//DebugN("DomainsConnected",DomainsConnected);
			}
		}
		else
			all_running = 0;
	}
	return all_running;
}

stop_connections()
{
int i;
dyn_string items;
dyn_string aux_items;
string child;

	for(i = 1; i <= dynlen(DomainsConnected); i++)
	{
		items = strsplit(DomainsConnected[i],"|");
		if(strpos(items[2],"::") > 0)
		{	
			aux_items = strsplit(items[2],":");
			child = aux_items[1];
			fwUi_disconnectCurrentState("checkSummaryAlert",items[1], items[2]);
			fwUi_disconnectExecutingAction("set_owner_new",items[1], child);
		}
		else
		{
			fwUi_disconnectExecutingAction("set_owner",items[1],items[2]);
		}		
	}
	dynClear(DomainsConnected);
}

start_all_domains()
{
	dyn_string domains, exInfo;
	int i, pos, cu;

	fwTree_getChildren("FSM", domains, exInfo);
	for(i = 1; i <= dynlen(domains); i++)
	{
//		if(domains[i] != fwFsm_clipboardNodeName)
//		{
			fwTree_getNodeCU(domains[i], cu, exInfo);
			if(cu)
				do_start_domain(domains[i], 1);
//		}
	}
}

get_api_num(int &num)
{
	dyn_int busy_nums;
	int i;
	int start;

	start = 10;

	num = -1;
	dpGet("_Connections.Device.ManNums",busy_nums);
	for(i = start; i <= 255; i++)
	{
// PVSS feature
		if(i == 110)
			i = 120;
		if(!dynContains(busy_nums,i))
		{
			num = i;
			break;
		}
	}
}

start_api_man(int &done)
{
	int num, tout, ret;
	dyn_int busy_nums;
	string dns_node;

	done = 0;

	dpGet("ToDo.apiPid", num);
	if(num != 0)
	{
		dpGet("_Connections.Device.ManNums",busy_nums);
		if(dynContains(busy_nums,num))
			return;
		else
		{
DebugTN("Wrong API ID, stopping PVSS00smi");
			stop_api_man();
			ret = stop_api_man();
			if(!ret)
			{
				ret = kill_api_man();
			}
		}
	}

	get_api_num(num);
	dns_node = fwFsm_getDimDnsNode();
	if(dns_node == "")
	{
		print_msg("fwFSMSrvr: DIM_DNS_NODE not defined -> PVSS00smi not started!");
		return;
	}
	print_msg("DIM_DNS_NODE = "+dns_node);
	if (os=="Linux")
	{
		system(
			"export LD_LIBRARY_PATH="+fwFsm_getFsmPath()+"/bin:"
			+"${LD_LIBRARY_PATH};"
			+fwFsm_getApiPath()+"/bin/PVSS00smi -dim_dns_node "
			+dns_node+" -num "+num+"&");
	}
	else
	{
		system("start /B /ABOVENORMAL "+fwFsm_getApiPath()+"\\bin\\PVSS00smi -dim_dns_node "+dns_node+" -num "+num);
	}
	done = 1;
	dpSetWait("ToDo.apiPid",num);
	tout = 50;
	while(tout)
	{
		dpGet("_Connections.Device.ManNums",busy_nums);
		if(dynContains(busy_nums,num))
		{
DebugTN("PVSS00smi started");
			break;
		}
		delay(0,100);
		tout--;
	}
//	else
//	{
//		print_msg("fwFSMSrvr: manager number "+num+" already in use -> PVSS00smi not started!");
//	}
}

signal_api_man()
{
	string name;

	name = "PVSSSys"+getSystemId()+":SMIHandler/COMMANDS";
	send_dim_command(name,"CheckSmiObjects");
}

int stop_api_man()
{
	string name;
	int num, tout;
	dyn_int busy_nums;

	name = "PVSSSys"+getSystemId()+":SMIHandler/EXIT";
	send_dim_command(name,1);
//DebugTN("Sending", name,1);
	delay(2);
	dpGet("ToDo.apiPid",num);
	tout = 100;
	while(tout)
	{
		dpGet("_Connections.Device.ManNums",busy_nums);
		if(!dynContains(busy_nums,num))
		{
DebugTN("PVSS00smi stopped");
			break;
		}
		delay(0,100);
		tout--;
	}
	if(!tout)
		DebugTN("Timeout stopping PVSS00smi via DIM");
	else
		dpSetWait("ToDo.apiPid",0);
//DebugN("Stopped, Setting Todo.apiPid", 0);
	return tout;
}

int kill_api_man()
{
	int id;
	int num, tout;
	dyn_int busy_nums;

DebugTN("Trying to stop PVSS00smi via PVSS");
	dpGet("ToDo.apiPid",num);
	if(num == 0)
	{
DebugTN("PVSS00smi already stopped");
		return 1;
	}
	id = convManIdToInt(DEVICE_MAN, num, getSystemId());
	dpSetWait("_Managers.Exit:_original.._value",id);
	tout = 100;
	while(tout)
	{
		dpGet("_Connections.Device.ManNums",busy_nums);
		if(!dynContains(busy_nums,num))
		{
DebugTN("PVSS00smi stopped");
			break;
		}
		delay(0,100);
		tout--;
	}
	if(!tout)
		DebugTN("Timeout stopping PVSS00smi via PVSS");
	else
		dpSetWait("ToDo.apiPid",0);
//DebugN("Stopped, Setting Todo.apiPid", 0);
	return tout;
}

set_owner(string dp, string command)
{
	string action, owner, domain, exclusive, parent;
	int exc_flag;
	

	if(command == "")
		return;
//DebugN("************** set_owner", dp, command);
	exc_flag = -1;
	parent = "";
	fwDU_getAction(command, action);
//	if((action != "TAKE") && (action != "RELEASE") && (action != "RELEASEALL")&& (action != "SETMODE"))
//		return;
//	if((action == "INCLUDE") || (action == "EXCLUDE") || (action == "FREE"))
//		return;
	fwDU_getActionParameter(command,"OWNER", owner);
	fwDU_getActionParameter(command,"EXCLUSIVE", exclusive);
//	fwDU_getActionParameter(command,"PARENT", parent);
	if(exclusive != "")
	{
		if((exclusive == "yes") || (exclusive == "YES"))
			exc_flag = 1;
		else
			exc_flag = 0;
	}
//	if(owner != "")
//	{
		dp = fwFsm_extractSystem(dp);
		dp = fwFsm_convertToAssociated(dp);
		domain = fwFsm_getAssociatedDomain(dp);
		if(parent == "")
			parent = domain;
//DebugN("Doing",action, parent, domain);
		fwUi_externalTreeOwnership(action, parent, domain, owner, exc_flag);
//	}

}

set_owner_new(string dp, string command)
{
	string action, owner, domain, exclusive, parent, obj;
	int exc_flag;
	dyn_string items;
	

	if(command == "")
		return;

//DebugN("************** set_owner_new", dp, command);
	exc_flag = -1;
	parent = "";
	fwDU_getAction(command, action);
//	if(action == "SETMODE")
//		return;
	fwDU_getActionParameter(command,"OWNER", owner);
	fwDU_getActionParameter(command,"EXCLUSIVE", exclusive);
//	fwDU_getActionParameter(command,"PARENT", parent);
	if(exclusive != "")
	{
		if((exclusive == "yes") || (exclusive == "YES"))
			exc_flag = 1;
		else
			exc_flag = 0;
	}
//	if(owner != "")
//	{
		items = strsplit(dp,":|.");
		parent = items[2];
		domain = items[3];
		strreplace(domain,"_FWM","");
/*
		dp = fwFsm_extractSystem(dp);
		dp = fwFsm_convertToAssociated(dp);
		domain = fwFsm_getAssociatedDomain(dp);
*/
		if(parent == "")
			parent = domain;
//DebugN("Doing new",action, parent, domain);
		fwUi_externalTreeOwnership(action, parent, domain, owner, exc_flag);
//	}

}

checkSummaryAlert(string dp, string state)
{
dyn_string dpitems, items;
string domain, obj;
int lockedOut;

//DebugTN("************** CheckCurrentState", dp, state);
	if(state == "DEAD")
	{
		dpitems = strsplit(dp,":.");
		items = strsplit(dpitems[2],fwFsm_separator);
	
		domain = items[1];
		obj = items[2];
		strreplace(obj,"_FWM","");
		fwFsm_actOnSummaryAlarm(0, obj+"::"+obj, domain);
//		do_exclude(domain, obj);
		fwUi_getLockedOut(domain, obj+"::"+obj, lockedOut);
		if(lockedOut)
		{
//DebugTN("++++++++++++++++++ Locking OUT "+domain+"::"+obj);
			fwUi_lockOutTree(domain, obj+"::"+obj);
		}		
	}
	else /*if((state == "EXCLUDED") || (state == "INLOCAL"))*/
	{
		dpitems = strsplit(dp,":.");
		items = strsplit(dpitems[2],fwFsm_separator);
	
		domain = items[1];
		obj = items[2];
		strreplace(obj,"_FWM","");
		fwUi_getLockedOut(domain, obj+"::"+obj, lockedOut);
		if(lockedOut)
		{
//DebugTN("++++++++++++++++++ Locking OUT1 "+domain+"::"+obj);
			fwUi_lockOutTree(domain, obj+"::"+obj);
		}
//DebugN("checkSummaryAlarm", dp, state);
		if(state == "EXCLUDED")
		{
			string dp1, state1, owner;
			int enabled;

			dp1 = dp;
			strreplace(dp1,"|"+obj+"_FWM","_FWM");
			dpGet(dp1, state1);
			if(state1 == "MANUAL")
			{
				fwUi_checkOwnership(domain, enabled, owner);
//DebugTN("++++++++++++++++++ Queuing Re-Including", domain, obj+"::"+obj, enabled, owner);
				if(owner != "")
				{
					dynAppend(ReIncludesToDo,"1 "+domain+" "+obj+"::"+obj+" "+owner);
//					fwUi_includeTree(domain, obj+"::"+obj, owner);
				}
				else
				{ 
					dynAppend(ReIncludesToDo,"0 "+domain+" "+obj+"::"+obj);
//					fwUi_excludeTree(domain, obj+"::"+obj);
				}
				if(ReIncludesDone)
					do_reincludes();
			}
		}		
	}
} 

do_reincludes()
{
int i;
dyn_string items;

	for(i = 1; i <= dynlen(ReIncludesToDo); i++)
	{
		items = strsplit(ReIncludesToDo[i]," ");
//DebugTN("++++++++++++++++++ Re-Including", items[1], items[2], items[3]);
		if(items[1] == "1")
		{
			fwUi_includeTree(items[2], items[3], items[4]);
		}
		else
		{
			fwUi_excludeTree(items[2], items[3]);
		}
	}
	ReIncludesDone = 1;
}


send_dim_command(string cmnd, string value)
{
	string dns_node, env;
	string str;

	dns_node = fwFsm_getDimDnsNode();
	str = "\""+cmnd+"\" \""+value+"\" -dns "+dns_node+" -s";
//print_msg("dim_send_command "+str);
	if (os=="Linux")
	{
		env = "export LD_LIBRARY_PATH="+fwFsm_getFsmPath()+"/bin:"
			+"${LD_LIBRARY_PATH};";
//			+"export DIM_DNS_NODE="+dns_node+";";
		system(env+fwFsm_getFsmPath()+"/bin/dim_send_command "+str);	
	}
	else
	{
//		env = "SET DIM_DNS_NODE="+dns_node+"&&";	
//		system("start /B cmd /c \""+env+fwFsm_getFsmPath()+"/bin/dim_send_command "+str);	
		system("start /B "+fwFsm_getFsmPath()+"\\bin\\dim_send_command "+str);	
	}
}

start_domain_devices_new(string domain)
{
dyn_string devices;
int num;
string domain_file, namedbg, dp;

//	domain_file = domain;
//	strreplace(domain_file,fwDev_separator,"_"); 
//	devices = fwFsm_getDomainDevices(domain);
//	if(!dynlen(devices))
//	{
		fwUi_getDomainPrefix(domain, dp);
//DebugTN("Setting ",dp+".running", 1);
		dpSetWait(dp+".running", 1);
//		return;
//	}
//	get_ctrl_num(num);
//	namedbg = "_CtrlDebug_CTRL_"+num;
//	if(!dpExists(namedbg))
//	{
//		dpCreate(namedbg,"_CtrlDebug");
//	}
//	if (os=="Linux")
//	{
//		system(fwFsm_getPvssPath()+"/bin/PVSS00ctrl libs/"+domain_file+".ctl &");
//	}
//	else
//	{
//		system("start /B "+fwFsm_getPvssPath()+"/bin/PVSS00ctrl libs/"+domain_file+".ctl");
//	}
}

stop_domain_devices_new(string domain, int flag = 0)
{
string dp;
int id, manId, myId;
dyn_int busy_nums;
dyn_string devices;

	fwUi_getDomainPrefix(domain, dp);
//DebugTN("*************************************************** ReSetting ",dp+".running", flag);
	if(flag == -1)
		dpSetWait(dp+".running", flag);
	else
		dpSetWait(dp+".running", flag,
			dp+".mode.owner","");
	fwFsm_stopDomainDevicesNew(domain);
}


int get_ctrl_num_clean(int &num)
{
	dyn_int busy_nums;
	int i, manId;
	int start;

	start = 50;

	num = -1;
	dpGet("_Connections.Ctrl.ManNums",busy_nums);
	for(i = start; i <= 255; i++)
	{
// PVSS feature
		if(i == 110)
			i = 120;
		if(!dynContains(busy_nums,i))
		{
			num = i;
			break;
		}
	}
  	dpGet("ToDo.ctrlPid", manId);
	if(manId != 0)
	{
		if(dynContains(busy_nums, manId))
			return 0;
		else
	  		dpSetWait("ToDo.ctrlPid", 0);
	}
	return 1;
}

start_device_handler()
{
int num, manId;
string namedbg;

	if(!get_ctrl_num_clean(num))
		return;
	namedbg = "_CtrlDebug_CTRL_"+num;
	if(!dpExists(namedbg))
	{
		dpCreate(namedbg,"_CtrlDebug");
	}
	if (os=="Linux")
	{
		system(fwFsm_getPvssPath()+"/bin/PVSS00ctrl -PROJ "+PROJ+" -num "+num+" fwFsmDeviceHandler &");
	}
	else
	{
		system("start /B "+fwFsm_getPvssPath()+"/bin/PVSS00ctrl -PROJ "+PROJ+" -num "+num+" fwFsmDeviceHandler");
	}
}

stop_device_handler()
{
int id, manId, myId;
dyn_int busy_nums;

  	dpGet("ToDo.ctrlPid", manId);
	if(manId != 0)
	{
		dpGet("_Connections.Ctrl.ManNums",busy_nums);
		if(dynContains(busy_nums,manId))
		{
			myId = myManNum();
			if(myId != manId)
			{
				id = convManIdToInt(CTRL_MAN, manId, getSystemId());
	       			dpSetWait("_Managers.Exit:_original.._value",id);
			}
		}
  		dpSetWait("ToDo.ctrlPid", 0);
	}
}



check_running(string dp, string state)
{
	string domain;
	int index;
	dyn_string devices;
	int t;
	
	dp = fwFsm_extractSystem(dp);
	dp = fwFsm_convertToAssociated(dp);
	domain = fwFsm_getAssociatedDomain(dp);
	if(state != "DEAD")
	{
		devices = fwFsm_getDomainObjects(domain, 1, 1);
		t = dynlen(devices) / 50;
		if(t)
			delay(t);
		if((index = dynContains(DomainsOn, domain)))
			DomainsRunning[index] = t+1;
		fwUi_disconnectCurrentState("check_running",domain, domain+"_FWM");
DebugTN("************ Domain Running",domain, dp, state, "Disabling Objects");
		fwUi_setDomainObjectsEnabled(domain);
	}
}

int wait_running()
{
	int i;
	int n, tout = 40;

	while(1)
	{
		n = 0;
		for(i = 1; i <= dynlen(DomainsOn); i++)
		{
//			if(DomainsOn[i])
//			{
				if(!DomainsRunning[i])
					n++;
//			}
		}
		if(!n)
		{
//DebugTN("++++++++++++++++ Wait_running Returned OK, tout", tout); 
			return 1;
		}
		delay(1);
		tout--;
		if(!tout)
		{
DebugTN("++++++++++++++++ Wait_running Returned TIMEOUT");
		for(i = 1; i <= dynlen(DomainsOn); i++)
		{
			if(!DomainsRunning[i])
				DebugN("Not Running", DomainsOn[i]);
		}
			return 0;
		}
	}
}
