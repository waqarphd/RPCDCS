V 10
1
LANG:1 8 (NoName)
PANEL,-1 -1 581 509 N "_3DFace" 0
"main()
{
//fwDevice_initialize();
}" 0
 "main()
{
	int i;
}" 0
 E E E 1 -1 -1 0  12 70
""0  1
E "string gDefaultPath = CONFIG_REL_PATH;

showNewDetails(int driverNumber)
{
	string deviceType;
	dyn_string exceptionInfo;

	busesTable.namedColumnHeader(\"thisDriver\") = \"Declare in Driver \" + driverNumber + \" file\";

	if(dpExists(\"WIENER_\" + driverNumber))
	{
		notExisting.visible = FALSE;
		serverType.visible = TRUE;
		serverTypeField.visible = TRUE;
		
		fwDevice_getType(dpTypeName(\"WIENER_\" + driverNumber), deviceType, exceptionInfo);
		serverTypeField.text = deviceType;
		
		description.text = dpGetDescription(\"WIENER_\" + driverNumber + \".\");

	}
	else
	{
		notExisting.visible = TRUE;
		serverType.visible = FALSE;
		serverTypeField.visible = FALSE;
		description.text = \"\";
		description.backCol = \"DpDoesNotExist\";
	}

	getFileName(driverNumber);
}

getFileName(int driverNumber)
{
	string filePath;

	if(dpExists(\"WIENER_\" + driverNumber))
		dpGet(\"WIENER_\" + driverNumber + \".configFilePath\", filePath);
	else
		filePath = \"\";

	if(filePath == \"\")
	{
		if(strpos(serverTypeField.text, \"KVASER\") >= 0)
			filePath = \"Wiener_cfg_\" + driverNumber + \".xml\";
		else
			filePath = \"WienerOPCS_\" + driverNumber + \".cfg\";
	}
		
	FileName.text = filePath;
}

checkCanBusDefaults(dyn_string canBusDps, dyn_string &exceptionInfo)
{
	int length, i, j, updateTime, position;
	dyn_dyn_string allDefaults, requiredDefaults;

	requiredDefaults[1] = makeDynString(\".Settings.BaudRate\",
										\".Settings.WriteQueueLength\",
										\".Settings.ReadQueueLength\");

	getDefaultValues(canBusDps[1], allDefaults, exceptionInfo);

	length = dynlen(requiredDefaults[1]);
	for(i=1; i<=length; i++)
	{	
		position = dynContains(allDefaults[1], requiredDefaults[1][i]);
		if(position > 0)
		{
			if(allDefaults[2][position] == \"EMPTY\")
				requiredDefaults[2][i] = 0;
			else
				requiredDefaults[2][i] = allDefaults[2][position];
		}
	}

	length = dynlen(canBusDps);
	for(i=1; i<=length; i++)
	{	
		for(j=1; j<=dynlen(requiredDefaults[1]); j++)
		{	
//DebugN(requiredDefaults[1][j]);
			dpGet(canBusDps[i] + requiredDefaults[1][j] + \":_online.._stime\", updateTime);
			if(updateTime == 0)
				dpSet(canBusDps[i] + requiredDefaults[1][j], requiredDefaults[2][j]);
		}
	}
}

getDefaultValues(string dpName, dyn_dyn_string &defaultValues, dyn_string &exceptionInfo)
{
	string deviceDefinition;

	deviceDefinition = dpTypeName(dpName) + \"Info\";
	
	dpGet(deviceDefinition + \".properties.dpes\", defaultValues[1]);
	dpGet(deviceDefinition + \".properties.defaultValues\", defaultValues[2]);
}

writeDeviceDriverNumbersToTable()
{
	int i, length;
	dyn_string childrenDps, validChildren, driverNumbers, exceptionInfo;
        dyn_bool configure;
        
	busesTable.deleteAllLines();

	fwDevice_getChildren(\"Wiener\", fwDevice_HARDWARE, childrenDps, exceptionInfo);
	if(dynlen(childrenDps)==0)
		return;
	
	length = dynlen(childrenDps);
	for(i=1; i<=length; i++)
	{
                string model;
                fwDevice_getModel(makeDynString(childrenDps[i]), model, exceptionInfo);
		if(dpTypeName(\"WIENER_\" + driverNumberSelector.text) == \"FwWienerDriver\")
		{
			if(model == \"Wiener CAN Bus\")
				dynAppend(validChildren, childrenDps[i]);
		}
		else
		{
			if(model != \"Wiener CAN Bus\")
				dynAppend(validChildren, childrenDps[i]);
		}
	}

	length = dynlen(validChildren);
	for(i=1; i<=length; i++)
	{
		if(dpExists(validChildren[i] + \".driverNumber\"))
			dpGet(validChildren[i] + \".driverNumber\", driverNumbers[i]);
		else
			driverNumbers[i] = \"None\";
			
		if(driverNumbers[i] == 0)
			driverNumbers[i] = \"None\";

		configure[i] = (driverNumbers[i] == driverNumberSelector.text);
	}
	
	busesTable.appendLines(length, \"canbusName\", validChildren, \"currentDriver\", driverNumbers, \"thisDriver\", configure);

	for(i=1; i<=length; i++)
	{
		busesTable.cellBackColRC(i-1, \"thisDriver\", \"White\");
	}
}" 0
 2
"CBRef" "1"
"EClose" "main()
{
	int i;
}" 0

""
NC
1
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 1
"Text7"
""
1 10 70 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 10 10 304 33
0 0 0 "0s" 0 0 0 192 0 0  10 10 1
1
LANG:1 84 -*-Arial-*-r-normal-*-19-*-100-100-*-*-iso8859-1|-19,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 34 Wiener Driver/Server Configuration
30 15
"Frame2"
""
1 10 450 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
12 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 10 170 570 450
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 15 OPC Config File
30 23
"Frame3"
""
1 10 153 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
19 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 10 93 570 153
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 11 Description
6 24
"Border2"
""
1 534 115 E E E 1 E 1 E N "_3DFace" E N "_3DFace" E E
 E E
20 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  2  0 1  "pictures/returnIndicator.gif" 12632256 E 534 115 548 140
2 37
"Text1"
""
1 52 156 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
29 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 53 97 70
0 2 0 "0s" 0 0 0 192 0 0  12 53 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 14 Driver Number:
2 38
"notExisting"
""
1 181 156 E E E 1 E 0 E N {0,0,0} E N "_Transparent" E E
 E E
30 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 182 53 365 70
0 2 0 "0s" 0 0 0 192 0 0  182 53 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 32 Server data point does not exist
2 39
"serverType"
""
1 220 156 E E E 1 E 0 E N {0,0,0} E N "_Transparent" E E
 E E
31 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 182 53 254 70
0 2 0 "0s" 0 0 0 192 0 0  182 53 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 12 Server Type:
13 2
"closeButton"
""
1 490 469 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 488 467 572 501

T 
1
LANG:1 5 Close
"main()
{
	PanelOff();
}" 0
 E E E
14 16
"FileName"
""
1 30 191 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
13 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:0 0 

0
2
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
 28 190 462 217
3 "0s" 0 0 0 0 0 -1  E E E
13 17
"FileSelect"
""
1 468 188 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
14 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:0 0 

0
2
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
 468 188 508 218

P 
14215660
"pictures/fileselektor.xpm"
1
LANG:1 0 
"main()
{
	string fileName;

	
	fileSelector(fileName, getPath(gDefaultPath), FALSE, \"*.xml\", FALSE);
	if(fileName!=\"\")
		FileName.text = fileName;
}" 0
 E E E
13 18
"cmdNotepad"
""
1 508 188 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
15 0 0 0 0 0
E E E
0
2
LANG:1 0 
LANG:0 0 

0
2
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
LANG:0 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
 508 188 548 218

P 
14215660
"pictures/editor.xpm"
1
LANG:1 0 
"main()
{
  string fileName;
  int i;

  fileName = FileName.text;

  if (fileName == \"\")
  {
   ChildPanelOnCentralModal(\"vision/MessageWarning\",\"\",makeDynString(\"Please specify a Wiener OPC config file!\"));
  }
  else
  {
    if ((strpos(fileName,\"/\") < 0) && (strpos(fileName,\"\\\\\") < 0))
      fileName = getPath(gDefaultPath, fileName);
    if (fileName == \"\")
    {
      ChildPanelOnCentralModal(\"vision/MessageWarning\",\"\",makeDynString(\"Please specify a Wiener OPC config file!\"));
      return;
    }
    if (_WIN32)
      system(\"write \\\"\" + fileName+ \"\\\"\");
    else
      system(\"xterm -e vi \" + fileName + \" &\");
  }
}" 0
 E E E
13 19
"createButton"
""
1 350 410 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
16 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 348 408 552 442

T 
1
LANG:1 18 Create Config File
"main()
{
	int driverNumber, i, length;
	file outputFile;
	string newEntry, fileName, header, tempStore, fileContents, openingTag, closingTag, canName;
	dyn_string childrenDps, exceptionInfo;
	
	manageDps.enabled = FALSE;
	createButton.enabled = FALSE;
	closeButton.enabled = FALSE;
							
	driverNumber = driverNumberSelector.text;
	fileName = FileName.text;
	if(fileName == \"\")
	{
    ChildPanelOnCentralModal(\"vision/MessageWarning\",\"\",makeDynString(\"Please specify a config file!\"));
		manageDps.enabled = TRUE;
		createButton.enabled = TRUE;
		closeButton.enabled = TRUE;
    return;
	}

    if ((strpos(fileName,\"/\") < 0) && (strpos(fileName,\"\\\\\") < 0))
    {
    	fileName = getPath(gDefaultPath, \"\") + fileName;
	}
	
	if(strpos(fileName, \".xml\") != (strlen(fileName) - 4))
		fileName = fileName + \".xml\";
	
	FileName.text = fileName;

	if(!dpExists(\"WIENER_\" + driverNumber))
	{
		fwException_raise(exceptionInfo, \"ERROR\", \"You must create WIENER_\"
												+ driverNumber + \" before you can create the config file.\", \"\");
		fwExceptionHandling_display(exceptionInfo);
		manageDps.enabled = TRUE;
		createButton.enabled = TRUE;
		closeButton.enabled = TRUE;
		return;
	}

	dpSet(\"WIENER_\" + driverNumber + \".configFilePath\", fileName);

	fwDeviceFrontEndConfigFile_GetDpTypeTag(dpTypeName(\"WIENER_\" + driverNumber), fwDeviceFrontEndConfigFile_OPENING_TAG, openingTag, exceptionInfo);
	fwDeviceFrontEndConfigFile_GetDpTypeTag(dpTypeName(\"WIENER_\" + driverNumber), fwDeviceFrontEndConfigFile_CLOSING_TAG, closingTag, exceptionInfo);

	length = busesTable.lineCount();

	for(i=0; i<length; i++)
	{
		if(busesTable.cellValueRC(i, \"currentDriver\") == driverNumber)
		{
			if(busesTable.cellValueRC(i, \"thisDriver\") == FALSE)
			{
				canName = busesTable.cellValueRC(i, \"canbusName\");
				dpSet(canName + \".driverNumber\", 0);
			}
		}
		
		if(busesTable.cellValueRC(i, \"thisDriver\") == TRUE)
		{
			canName = busesTable.cellValueRC(i, \"canbusName\");
			dynAppend(childrenDps, canName);
			if(dpExists(canName + \".driverNumber\"))
				dpSet(canName + \".driverNumber\", driverNumber);
		}
			
	}
	
	if(dynlen(childrenDps) < 1)
	{
    ChildPanelOnCentralModal(\"vision/MessageWarning\",\"\",makeDynString(\"No devices were selected to be configured!\"));
		writeDeviceDriverNumbersToTable();
		manageDps.enabled = TRUE;
		createButton.enabled = TRUE;
		closeButton.enabled = TRUE;
    return;
	}
		
	fwOpenProgressBar(\"Progress...\", \"Creating OPC Server config file for WIENER_\" + driverNumber, 1);

	if(dpTypeName(\"WIENER_\" + driverNumber) == \"FwWienerDriver\")
		checkCanBusDefaults(childrenDps, exceptionInfo);
	
	//DebugN(childrenDps);
	length = dynlen(childrenDps);
	for(i=1; i<=length; i++)
	{
        	string model, tempOpen, tempClose;
                dyn_string canBusChildren;
                
                fwDevice_getModel(makeDynString(childrenDps[i]), model, exceptionInfo);
		if(model == \"CAN Bus\")
                {
			fwDeviceFrontEndConfigFile_GetDeviceTag(childrenDps[i], fwDeviceFrontEndConfigFile_OPENING_TAG, tempOpen, exceptionInfo);
			fwDeviceFrontEndConfigFile_GetDeviceTag(childrenDps[i], fwDeviceFrontEndConfigFile_CLOSING_TAG, tempClose, exceptionInfo);
                	header += tempOpen + tempClose;
                        fwDeviceFrontEndConfigFile_ProcessEntry(childrenDps[i], header, header, exceptionInfo);
                        
                        fwDevice_getChildren(childrenDps[i], fwDevice_HARDWARE, canBusChildren, exceptionInfo);
                        for(int j=1; j<=dynlen(canBusChildren); j++)
                        {
	                  fwDeviceFrontEndConfigFile_CreateContents(canBusChildren[j], tempStore, exceptionInfo);
			  fileContents += tempStore;
                        }
                }
                else
                {
	                fwDeviceFrontEndConfigFile_CreateContents(childrenDps[i], tempStore, exceptionInfo);
			//DebugN(tempStore);
			fileContents += tempStore;
		}
	}

        strreplace(openingTag, \"<!-- CAN details -->\", \"<!-- CAN details -->\\n\" + header);
	fileContents = openingTag + fileContents + closingTag;

	outputFile = fopen(fileName, \"w\");
	fprintf(outputFile, fileContents);
	fclose(outputFile);

	fwCloseProgressBar(\"Config file created for WIENER_\" + driverNumber);

	writeDeviceDriverNumbersToTable();
	manageDps.enabled = TRUE;
	createButton.enabled = TRUE;
	closeButton.enabled = TRUE;
}



" 0
 E E E
25 20
"busesTable"
""
1 30 230 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
17 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 28 228 552 402
EE 1 0 1 3 1 "canbusName" 22 1 0 "s" 1
LANG:1 7 Devices
E
1
LANG:1 0 

250 "currentDriver" 7 1 0 "s" 1
LANG:1 14 Current Driver
E
1
LANG:1 0 

90 "thisDriver" 13 1 1 "s" 1
LANG:1 20 Use with this Driver
E
1
LANG:1 0 

155 
26 26 "" 1 1
LANG:1 2 #1
8 30
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
0 1 1 1 7
1 0
14 22
"description"
""
1 53 279 E E E 1 E 1 E N "_3DText" E N "_Window" E E
 E E
18 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 28 114 532 141
3 "0s" 0 0 0 0 0 -1  E E "main()
{
	int driverNumber;
	string descriptionText;
	dyn_string exceptionInfo;

	manageDps.enabled = FALSE;
	createButton.enabled = FALSE;
	closeButton.enabled = FALSE;

	driverNumber = driverNumberSelector.text;
	descriptionText = description.text;
	
	if(!dpExists(\"WIENER_\" + driverNumber))
		dpCreate(\"WIENER_\" + driverNumber, \"FwWienerDriver\");

	dpSetDescription(\"WIENER_\" + driverNumber + \".\", descriptionText);

	manageDps.enabled = TRUE;
	createButton.enabled = TRUE;
	closeButton.enabled = TRUE;
}" 0

1 43 0 "" 0
1 "leftClick" 1 1 "main()
{
	int replaced;
	string 	componentName, path, tempPanelPath, helpFile, browserCommand;
	dyn_string aux, exceptionInfo;
	
//	DebugN(\"The good path is \" + panelPath);
	
	if(!goodPanelName)
	{
		fwException_raise(	exceptionInfo,
							\"ERROR\",
							\"Open panel name doesn't match with PVSS database. Try opening the panel again.\",
							\"\");
		fwExceptionHandling_display(exceptionInfo);
		return;
	}
	
	// Get component name. We assume panels are inside a directory
	// named after the component name
	strreplace(panelPath, \"\\\\\", \"/\");
	aux = strsplit(panelPath, \"/\");
	componentName = aux[1];
//	DebugN(panelPath, componentName);
	
	// Remove extension if given
	if(strpos(panelPath, \".pnl\") >= 0)
	{
		tempPanelPath = substr(panelPath, 0, strpos(panelPath, \".pnl\"));
	}
	else
	{
		tempPanelPath = panelPath;
	}
	
	// try to find the help file associated with the panel
	helpFile = tempPanelPath + \".html\";
//	DebugN(\"helpFile \" + helpFile + \" tempPanelPath \" + tempPanelPath + \" componentName \" + componentName);
	path = getPath(HELP_REL_PATH, componentName + \"/panels/\" + helpFile);
	if(path == \"\")
	{		
		helpFile = tempPanelPath + \".htm\";
//		DebugN(\"helpFile \" + helpFile);
		path = getPath(HELP_REL_PATH, componentName + \"/panels/\" + helpFile);
//	DebugN(componentName + \"/panels/\" + helpFile);
		if(path == \"\")
		{
			fwException_raise(	exceptionInfo,
								\"ERROR\",
								\"Could not find the help file associated with the current panel\",
								\"\");
			fwExceptionHandling_display(exceptionInfo);
			return;
		}
	}
	
//	DebugN(\"Final help path \" + path);
	
	fwOpenProgressBar(\"Help\", \"Opening help file...\", 1);
	// If there were no exceptions, then display the help
	if(_WIN32)
	{
		dpGet(\"fwGeneral.help.helpBrowserCommandWindows\", browserCommand);
		replaced = strreplace(browserCommand, \"$1\", path);
		if(replaced == 0)
			browserCommand = browserCommand + \" \" + path;
//		system(\"start iexplore \" + path + \" &\");
		system(browserCommand);
	}
	else
	{
		dpGet(\"fwGeneral.help.helpBrowserCommandLinux\", browserCommand);
		replaced = strreplace(browserCommand, \"$1\", path);
		if(replaced == 0)
			browserCommand = browserCommand + \" \" + path;
		system(browserCommand);
//		system(\"start iexplore \" + path + \" &\");
	}
	fwCloseProgressBar();
}	" 0
 
1 "message" 1 1 "main()
{
	time rootPanelPathTime, childPanelPathTime;
	unsigned managerNumber = myManNum();
	string rootPanelPath, childPanelPath, rootPanelName, childPanelName, panelName;
	
	
	if(isDollarDefined(\"$sPanelRelativePath\"))
	{
		panelPath = $sPanelRelativePath;
	}
	
	if(panelPath == \"\")
	{
		dpGet(	\"_Ui_\" + managerNumber + \".RootPanelOrigOn.FileName\", rootPanelPath,
				\"_Ui_\" + managerNumber + \".RootPanelOrigOn.FileName:_original.._stime\", rootPanelPathTime,
				\"_Ui_\" + managerNumber + \".RootPanelOrigOn.PanelName\", rootPanelName,
				\"_Ui_\" + managerNumber + \".ChildPanelOn.FileName\", childPanelPath,
				\"_Ui_\" + managerNumber + \".ChildPanelOn.FileName:_original.._stime\", childPanelPathTime,
				\"_Ui_\" + managerNumber + \".ChildPanelOn.PanelName\", childPanelName);
	

		//	DebugN(rootPanelPath, rootPanelPathTime, childPanelPath, childPanelPathTime);
	
		if(rootPanelPathTime > childPanelPathTime)
		{
			panelPath = rootPanelPath;
			panelName = rootPanelName;
		}
		else
		{
			panelPath = childPanelPath;
			panelName = childPanelName;
		}
	
		if(myPanelName() == panelName)
		{
			goodPanelName = TRUE;
//			DebugN(\"Correct panel name\");
		}
		else
		{
			goodPanelName = FALSE;
//			DebugN(\"Wrong panel name\");
		}	
	}
//	DebugN(\"The good path is \" + panelPath);
}" 0
 
0
22 40
"driverNumberSelector"
""
1 100 50 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
32 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 98 48 172 75
0

"main()
{
	int driverNumberDefault, i, length;
	dyn_int driverNumbers;
	dyn_string oldServers, servers, names, addressParams, exceptionInfo;

	oldServers = dpNames(\"WIENER_*\", \"FwWienerDriver\");
	servers = dpNames(\"WIENER_*\", \"FwWienerServer\");

	dynAppend(servers, oldServers);
//DebugN(drivers);
	length = dynlen(servers);
	for(i=1; i<=length; i++)
	{
		servers[i] = dpSubStr(servers[i], DPSUB_DP);
		names = strsplit(servers[i], \"_\");
		driverNumbers[i] = names[2];
	}

	dynSortAsc(driverNumbers);
	this.items = driverNumbers;

	busesTable.tableMode(TABLE_SELECT_BROWSE); 
	busesTable.selectByClick(TABLE_SELECT_NOTHING);
	busesTable.sortOnClick(FALSE);

	fwDevice_getAddressDefaultParams(\"FwWienerServer\", addressParams, exceptionInfo);

	driverNumberDefault = addressParams[fwDevice_ADDRESS_DRIVER_NUMBER];
	this.text = driverNumberDefault;

	showNewDetails(driverNumberDefault);
	writeDeviceDriverNumbersToTable();
}" 0

"main()
{
	int driverNumber;
	
	driverNumber = this.text;

	showNewDetails(driverNumber);
	writeDeviceDriverNumbersToTable();
}" 0

E
 0 0
14 41
"serverTypeField"
""
1 260 50 E E E 1 E 0 E N "_WindowText" E N "_3DFace" E E
 E E
33 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 258 48 422 75
2 "0s" 0 0 0 0 0 -1  E E E
13 42
"manageDps"
""
1 430 46 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
34 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 428 44 572 78

T 
1
LANG:1 20 Manage Driver DPs...
"main()
{
	int pos;
	string currentSelection;
  dyn_float df;
	dyn_string ds;

  ChildPanelOnCentralModalReturn(\"fwWiener/fwWienerManageDrivers.pnl\",
      \"Manage Driver Data Points\",
      makeDynString(\"\"), df, ds);
      
//  DebugN(ds);
  
  currentSelection = driverNumberSelector.text;
	driverNumberSelector.items(ds);

	pos = dynContains(ds, currentSelection);
	if(pos > 0)
		driverNumberSelector.selectedPos(pos);
	else
		driverNumberSelector.selectedPos(1);
		
	showNewDetails(driverNumberSelector.text);	
}
" 0
 E E E
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
3 0 "Group2"
"objects\\fwGeneral\\fwHelpButton.pnl" 584 10 T 29 1 0 1 -40 0
1
"$sPanelRelativePath""fwWiener/fwWienerDriverConfiguration"
0