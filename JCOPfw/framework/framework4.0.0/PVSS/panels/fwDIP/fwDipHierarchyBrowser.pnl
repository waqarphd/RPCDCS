V 10
1
LANG:1 21 fwDipHierarchyBrowser
PANEL,-1 -1 394 458 N "_3DFace" 6
"$bBrowser"
"$iChildType"
"$noAdd"
"$sApiManagerDp"
"$sChildName"
"$sInitialAddress"
"/**
 * As for now, this function requires that somebody has already queried the API manager
 * about the starting address and passed the obtained results as the $parameters.
 *
 * Additionally text fields of the panel are being used to pass the data to the functions
 * that are invoked from the TreeView.
 */

/*
 This panel has been modified by Erik Morset.  The only difference with the panel is that 
 it now uses the tree widget in PVSS instead of the list-view. 
*/ 
main()
{
	AddPublication.enabled = false;
	Details.enabled = false;

	string tmp1, tmp2;
	
	tmp1	 = $sChildName;
	tmp2	 = $iChildType;
	strreplace(tmp1, \" |\", \"|\");
	strreplace(tmp1, \"| \", \"|\");
	strreplace(tmp2, \" |\", \"|\");
	strreplace(tmp2, \"| \", \"|\");

	// Whether to display the ADD button	
	if($bBrowser==1)
		AddPublication.visible = false;
	else
		AddPublication.visible = true;
	if(isDollarDefined(\"$noDetails\"))
		Details.visible = false;
	if(isDollarDefined(\"$noAdd\")&&$noAdd==1)
		AddPublication.visible = false;
	
}" 0
 "main()
{
	int i;
}" 0
 E E E 1 0 0 0  120 187
""0  1
E "// icons used in the tree menu. (stored in C:\\ETM\\PVSS2\\3.6\\pictures)
const string BRANCH_ICON = \"dptree/struct.png\";
const string LEAF_ICON    = \"dpeMon_new.gif\";

// this array contains the id and the data type for tree nodes
// (1 - folder, 2 - item, 3 - both)
dyn_dyn_string treeData;

int expand(string id, bool progbar)
{
      // path to the icons used in the tree
      string iconFileBranch = getPath(ICONS_REL_PATH, BRANCH_ICON, 1, SEARCH_PATH_LEN);
      string iconFileLeaf = getPath(ICONS_REL_PATH, LEAF_ICON, 1, SEARCH_PATH_LEN);
 
      // variables for creation of the path to each item in the tree
      string thisparent = id;
  
      // variables for the DIP query
      dyn_string childName;
      dyn_int childType;
      dyn_string fieldName;
      dyn_string fieldType;
      dyn_string exceptionInfo;
      int resultType;

      int timeout;    
      dpGet($sApiManagerDp+\".queryTimeout\", timeout);
  
      if(progbar) 
        fwOpenProgressBar(\"Information\", \"Querying API Manager\", 1);

      resultType = fwDIP_DipQuery($sApiManagerDp, id, childName, childType, fieldName, fieldType, exceptionInfo, timeout);
  
      if (dynlen(exceptionInfo) != 0){
           if(progbar)
             fwCloseProgressBar(\"There were errors while querying API Manager\");
           this.setOpen(id,FALSE);
           fwExceptionHandling_display(exceptionInfo);
           return;
      } 
      else 
      {
           if(progbar)
             fwCloseProgressBar(\"No errors\"); 
      } 
  
      // string manipulation
      string tmp1 = childName;
      string tmp2 = childType;
      strreplace(tmp1,\" |\",\"|\");
      strreplace(tmp1,\"| \",\"|\");
      strreplace(tmp2,\" |\",\"|\");
      strreplace(tmp2,\"| \",\"|\");
      dyn_string treeChild = strsplit(tmp1,\"|\");
      dyn_string treeChildType = strsplit(tmp2,\"|\");
  
      /*
      // these next few lines are not neccessary. It only makes sure that the items in the 
      // list are \"refreshed\" everytime a branch is expanded. So it deletes all children under
      // the expanded item/parent
      if(id!=\"\"){
        string deleteItems;
        string itblw = id; 
        while(patternMatch(id+\"*\",this.itemBelow(itblw))){
          if(this.itemExit(itblw)){
           itblw = this.itemBelow(itblw);
           deleteItems = deleteItems+\" \"+itblw;
          }
        }  
        this.removeItems(strsplit(deleteItems, \" \"));
      }*/

  
      // lists the children of the expanded parent
      for(int i = 1; i <= dynlen(treeChild); i++)
      {
         // if the item don't exist create it
         if(!this.itemExists(id+\"/\"+treeChild[i]))
         {
             this.appendItem(id,id+\"/\"+treeChild[i],treeChild[i]);
         
             bool add = TRUE;
             // search through treeData to see if there is a match
             for(int j=1; j<=dynlen(treeData); j++)
                if(treeData[j][1]==id+\"/\"+treeChild[i])
                    add = FALSE;
         
             if(add)
               dynAppend(treeData,makeDynString(id+\"/\"+treeChild[i],treeChildType[i]));
     
             // if childtype is folder set expandable and use the folder icon
             if(treeChildType[i]==1 || treeChildType[i]==3)
             {
                 this.setIcon(id+\"/\"+treeChild[i], 0, iconFileBranch);      
                 this.setExpandable(id+\"/\"+treeChild[i],TRUE);  
             }
             else   // if not use the item icon
                this.setIcon(id+\"/\"+treeChild[i], 0, iconFileLeaf);  
         }
      }

      // makes sure that the item is visible
      this.ensureItemVisible(id);
  
      // sorting the children of the tree in alphabetic order
      this.setSorting(0,TRUE);
      
      return 0;
}" 0
 2
"CBRef" "1"
"EClose" "main()
{
	int i;
}" 0

""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 16
"Text2"
""
1 8 8 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 10 10 216 36
0 2 0 "0s" 0 0 0 64 0 0  10 10 1
1
LANG:1 84 -*-Arial-*-r-normal-*-19-*-100-100-*-*-iso8859-1|-19,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 11 DIP Browser
13 4
"Cancel"
""
1 330 420 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 328 418 382 452

T 
1
LANG:1 6 Cancel
"main()
{
	PanelOffReturn(makeDynFloat(0), makeDynString(\"cancel\"));
}" 0
 E E E
13 5
"Details"
""
1 260 420 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 258 418 312 452

T 
1
LANG:1 7 Details
"main()
{
	string selectedPublication, selectedField;
	dyn_string ds;
	dyn_float df;
	//selectedPublication = Selected_TreeView_Node.text;
        selectedPublication = TREE1.selectedItem();

	if(strlen(selectedPublication)==0)
		return;

	ChildPanelOnRelativModalReturn(\"fwDIP/fwDipPublicationContents.pnl\",
		\"Contents of the publication\",
//		myPanelName(),
		makeDynString(\"$sPublicationAddress:\"+selectedPublication,
									\"$sApiManagerDp:\"+$sApiManagerDp,
//									\"$iInvokedFromMain:0\",
									\"$bBrowser:\"+$bBrowser),
		0,0,
		df,ds);
	if(df[1] == 0)
		return;
	else
	{
		selectedField = ds[1];
		PanelOffReturn(makeDynFloat(1), makeDynString(selectedPublication, selectedField, ds[2]));
	}
}" 0
 E E E
14 6
"Selected_TreeView_Node"
""
1 10 387 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-*-90-100-100-*-*-iso8859-1|-12,0,0,0,505,0,0,0,0,0,0,0,0,Arial
0 ""
 8 385 382 410
2 "0s" 0 0 0 0 0 -1  E E E
13 13
"AddPublication"
""
1 190 420 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 188 418 242 452

T 
1
LANG:1 3 Add
"main()
{
	string selectedPublication;
	selectedPublication = Selected_TreeView_Node.text;

	if(strlen(selectedPublication)==0)
		return;
	
	PanelOffReturn(makeDynFloat(1), makeDynString(selectedPublication, \"\"));
}" 0
 E E E
1 19 1 "" 0
0
29 18
"TREE1"
""
1 10 50 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
13 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
 10 50 381 381
10 TreeWidget
7
0 "expanded" "(string id)"
"  // this function you can find in the Scope lib of this panel
  expand(id,FALSE);"
0 "collapsed" "(string id)"
""
0 "selectionChanged" "(string id)"
""
0 "clicked" "(string id, int column)"
"    int nodeType = 0;

    // no item selected
    if(id==\"\")
      return;
  
    // search through treeData to see if there is a match
    for(int i = 1; i <= dynlen(treeData); i++)
        if(treeData[i][1]==id)
             nodeType = treeData[i][2];

    // error handling
    if(nodeType==0)
    {
        DebugN(\"Error: Could not find item in treeData array..\", id);  
        return;
    }
      
    string clickedItem;
    clickedItem=this.selectedItem();
  
    string path;
    if(patternMatch(\"/*\", clickedItem))
         path = substr(clickedItem,1);
  
    // node types: 1 folder, 2 item, 3 both
    if(nodeType==2 || nodeType==3)
    {    
        Selected_TreeView_Node.text = path;   // display path to the selected item in the textfield   
        Details.enabled(TRUE); // enable the show details button
        AddPublication.enabled(TRUE);
    } 
    else 
    {
        Selected_TreeView_Node.text = \"\";  // empty the textfield
        Details.enabled(FALSE); // disable the show details button 
        AddPublication.enabled(FALSE);    
    }"
0 "doubleClicked" "(string id, int column)"
""
0 "rightClicked" "(string id, int column)"
""
0 "itemRenamed" "(string id, int column, string text)"
""
"main()
{
  this.addColumn(\"DIP\");
  this.showHeader(false);
  this.font = \"Arial,9,-1,5,50,0,0,0,0,0\";
  // lists the first level of the tree
  expand(\"\",FALSE);  
  
  // if someone typed in a initial address the tree will expand
  // to the exact path in the tree  
  dyn_string initAddress = strsplit($sInitialAddress,\"/\");
  int j;
  string pathid;

  for(j = 1; j <= dynlen(initAddress); j++)
  {
   if(initAddress[j]!=\"\")
   {   
       pathid = pathid+\"/\"+initAddress[j]; 
       this.setOpen(pathid,TRUE);
       // delay is added because it takes some time to load the data and to draw the tree.
       delay ( 0 , 100 );
   }
  }
}" 0
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
3 1 "Group3"
"objects\\fwGeneral\\fwHelpButton.pnl" 410 20 T 12 1 0 1 -50 -10
1
"$sPanelRelativePath""fwDIP/fwDipHierarchyBrowser"
0