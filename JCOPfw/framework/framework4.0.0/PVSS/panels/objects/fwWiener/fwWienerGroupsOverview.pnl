V 10
1
LANG:1 8 (NoName)
PANEL,-1 -1 511 266 N "_3DFace" 1
"$sDpName"
E E E E E 1 -1 -1 0  -544 -527
""0  1
E "dyn_string gListOfDpElementToConnect;
dyn_string voltageDpes, currentDpes;

getExisting(string sDpName, dyn_string &groupNumbers)
{
	int i, length;
	string groupName, systemName;
	dyn_string names, crateGroups, exceptionInfo;

        systemName = dpSubStr(sDpName, DPSUB_SYS);
	crateGroups = dpNames(systemName + \"_WienerGroup_\" + dpSubStr($sDpName, DPSUB_DP) +
				fwDevice_HIERARCHY_SEPARATOR + \"Group*\", \"FwWienerMarathonGroup\");

	length = dynlen(crateGroups);
	for(i=1; i<=length; i++)
		fwDevice_getPosition(crateGroups[i], groupName, groupNumbers[i], exceptionInfo);

	dynSortAsc(groupNumbers);
	dynInsertAt(groupNumbers, \"ALL\", 1);
}

showGroupChannels(string groupNumber, string sDpName, dyn_string &exceptionInfo)
{
	dyn_string groupContents;
	
	getGroupChannels(groupNumber, sDpName, groupContents, exceptionInfo);
	connectVoltagesInTable(groupContents, exceptionInfo);
}

getGroupChannels(string groupNumber, string sDpName, dyn_string &groupChannels, dyn_string &exceptionInfo)
{
	int i, length;
	string query, systemName, crateName;
	dyn_dyn_anytype result;
	
	fwDevice_getName($sDpName, crateName, exceptionInfo);

        groupChannels = makeDynString();
        systemName = dpSubStr(sDpName, DPSUB_SYS);
//DebugN(systemName, crateName);        
	if(groupNumber == \"ALL\")
	{
		fwDevice_getChildren($sDpName, fwDevice_HARDWARE, groupChannels, exceptionInfo);
	}
	else
	{
	  query = \"SELECT '.ReadbackSettings.GroupNumber:_online.._value' FROM 'Wiener\"
			+ fwDevice_HIERARCHY_SEPARATOR + crateName + fwDevice_HIERARCHY_SEPARATOR + \"*'\";
                        
          if(systemName != getSystemName())
            query += \" REMOTE '\" + strrtrim(systemName, \":\") + \"'\";
    
          query += \" WHERE '.ReadbackSettings.GroupNumber:_online.._value' == \" + groupNumber +
	                  \" AND _DPT = \\\"FwWienerMarathonChannel\\\"\";

	  dpQuery(query, result);
	//DebugN(query, result);
		
	  length = dynlen(result);
	  for(i=2; i<=length; i++)
		dynAppend(groupChannels, result[i][1]);
	}
//DebugN(groupChannels);
}


connectVoltagesInTable(dyn_string channels, dyn_string &exceptionInfo)
{
	int i, length, numberOfChannels;
	string voltageElement, currentElement, parentDp, parentName, dataValidElement;
	dyn_int positions, alertExists;
	dyn_string summaryDpes, channelNames, voltageUnits, currentUnits;

	numberOfChannels = dynlen(channels);
	for(i=1; i<=numberOfChannels; i++)
	{
		if(channels[i]!=\"\")
		{
			if(strpos(dpTypeName(channels[i]), \"Marathon\") > 0)
			{
				voltageElement = \".MeasurementSenseVoltage\";
				currentElement = \".MeasurementCurrent\";
				dataValidElement = \".MeasurementSenseVoltage\";
			}
			else
			{
				voltageElement = \".Actual.VoltageValue\";
				currentElement = \".Actual.CurrentValue\";
				dataValidElement = \".Actual.VoltageValue\";
			}

			if(dpExists(channels[i] + voltageElement))
			{
				voltageDpes[i] = channels[i] + voltageElement;
				voltageUnits[i] = dpGetUnit(channels[i] + voltageElement);
			}
			else
				voltageUnits[i] = \"\";
				
			if(dpExists(channels[i] + currentElement))
			{
				currentDpes[i] = channels[i] + currentElement;
				currentUnits[i] = dpGetUnit(channels[i] + currentElement);
			}
			else
				currentUnits[i] = \"\";

			fwDevice_getPosition(channels[i], channelNames[i], positions[i], exceptionInfo);
			fwDevice_getName(channels[i], channelNames[i], exceptionInfo);
			
			fwDevice_getParent(channels[i], parentDp, exceptionInfo);
			fwDevice_getName(parentDp, parentName, exceptionInfo);
			channelNames[i] = parentName + fwDevice_HIERARCHY_SEPARATOR + channelNames[i];
			
			summaryDpes[i] = channels[i] + \".\";
		}
		else
		{
			voltageDpes[i] = \"\";
			voltageUnits[i] = \"\";
			currentDpes[i] = \"\";
			currentUnits[i] = \"\";
			summaryDpes[i] = \"\";
		}
	}
	
	Chantab.deleteAllLines;

	Chantab.appendLines(dynlen(channels), \"Number\", positions, \"Name\", channelNames,
						\"vUnit\", voltageUnits, \"iUnit\", currentUnits);
		
	gListOfDpElementToConnect = summaryDpes;
	length = dynlen(summaryDpes);

	for(i=1; i<=length; i++) 
	{
		if(dpExists(summaryDpes[i]))
		{
			_fwConfigs_getConfigTypeAttribute(makeDynString(summaryDpes[i]), fwConfigs_PVSS_ALERT_HDL, alertExists, exceptionInfo);
			if(alertExists[1] == DPCONFIG_NONE)
			{
				dpConnect(	\"fwShowStatusWithoutAlert\",
										summaryDpes[i] + strltrim(dataValidElement, \".\") + \":_original.._invalid\"); 
			}
			else
			{
				dpConnect(	\"fwShowStatusWithAlert\",
										summaryDpes[i] + \":_alert_hdl.._act_state_color\", 
										summaryDpes[i] + \":_alert_hdl.._active\",
										summaryDpes[i] + strltrim(dataValidElement, \".\") + \":_original.._invalid\"); 
			}
		}
		else
				this.cellBackColRC(i-1, \"status\", \"_3DFace\");		
	}

	Chantab.lineVisible(0);

	length = dynlen(voltageDpes);
	for(i=1; i <= length; i++)
	{
		if(dpExists(voltageDpes[i]))
		{
			dpConnect(\"fwWriteVoltageValue\", TRUE, voltageDpes[i] + \":_online.._value\");
		}
	}	

	length = dynlen(currentDpes);
	for(i=1; i <= length; i++)
	{
		if(dpExists(currentDpes[i]))
		{
			dpConnect(\"fwWriteCurrentValue\", TRUE, currentDpes[i] + \":_online.._value\");
		}
	}	
}

fwWriteVoltageValue(string dpe, float value)
{
	int cellPos;
	string cleanValue, format;
	string dpName;
	dyn_string exceptionInfo;

	dpName = dpSubStr(dpe, DPSUB_SYS_DP_EL);
	cellPos = dynContains(voltageDpes, dpName);
//DebugN(dpName, value);
	if(cellPos >= 1)
	{
		format = dpGetFormat(voltageDpes[cellPos]);
		if(format == \"\")
			format = \"%.3f\";
		else
			format = \"%\" + substr(format, strpos(format, \".\"));

		sprintf(cleanValue, format, value);
		Chantab.cellValueRC(cellPos-1, \"voltage\", cleanValue);
	}
}

fwWriteCurrentValue(string dpe, float value)
{
	int cellPos;
	string cleanValue, format;
	string dpName;
	dyn_string exceptionInfo;

	dpName = dpSubStr(dpe, DPSUB_SYS_DP_EL);
	cellPos = dynContains(currentDpes, dpName);
//DebugN(dpName, value);
	if(cellPos >= 1)
	{
		format = dpGetFormat(currentDpes[cellPos]);
		if(format == \"\")
			format = \"%.3f\";
		else
			format = \"%\" + substr(format, strpos(format, \".\"));

		sprintf(cleanValue, format, value);
		Chantab.cellValueRC(cellPos-1, \"current\", cleanValue);
	}
}

fwShowStatusWithAlert(string dpe1, string alertColour, string dpe2, bool alarmActive, string dpe3, bool dataInvalid)
{
	int cellPos;
	string elementColour, dpName;
	dyn_string exceptionInfo;

	dpName = dpSubStr(dpe1, DPSUB_SYS_DP) + \".\";
	cellPos = dynContains(gListOfDpElementToConnect, dpName);

	fwColour_convertStatusToColour(elementColour, alertColour, !alarmActive, dataInvalid, exceptionInfo);
	if(cellPos >= 1)
		Chantab.cellBackColRC(cellPos - 1, \"status\", elementColour);
}

fwShowStatusWithoutAlert(string dpe1, bool dataInvalid)
{
	int cellPos;
	string elementColour, dpName;
	dyn_string exceptionInfo;

	dpName = dpSubStr(dpe1, DPSUB_SYS_DP) + \".\";
	cellPos = dynContains(gListOfDpElementToConnect, dpName);

	fwColour_convertStatusToColour(elementColour, \"_3DFace\", FALSE, dataInvalid, exceptionInfo);
	if(cellPos >= 1)
		Chantab.cellBackColRC(cellPos - 1, \"status\", elementColour);
}" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 1
"Text2"
""
1 59 117 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 12 14 100 31
0 2 0 "0s" 0 0 0 192 0 0  12 14 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 13 Group Number:
30 3
"Frame2"
""
1 10 120 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
3 0 0 0 0 0
E E E
1
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 10 50 180 120
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 8 Commands
2 9
"Text1"
""
1 40 185 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 20 82 60 99
0 2 0 "0s" 0 0 0 192 0 0  20 82 1
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
1
LANG:1 6 Power:
22 2
"currentGroupList"
""
1 110 10 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 108 8 183 35
0

"main()
{
	string deviceType;
	dyn_string groupNumbers, exceptionInfo;

	getExisting($sDpName, groupNumbers);
	this.items = groupNumbers;
	this.selectedPos(1);
	
	showGroupChannels(this.text, $sDpName, exceptionInfo);
}" 0

"main()
{
	string crateName;
	dyn_string exceptionInfo;

	showGroupChannels(this.text, $sDpName, exceptionInfo);
}" 0

E
 0 0
13 5
"Button1"
""
1 62 73 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 60 71 114 105

T 
1
LANG:1 2 On
"main()
{
	string groupNumber, dpElement, systemName;

        systemName = dpSubStr($sDpName, DPSUB_SYS);
	groupNumber = currentGroupList.text;
	if(groupNumber == \"ALL\")
		dpElement = $sDpName + \".Settings.OnOffAllGroups\";
	else
		dpElement = systemName + \"_WienerGroup_\" + dpSubStr($sDpName, DPSUB_DP) +
								fwDevice_HIERARCHY_SEPARATOR + \"Group\" +
								groupNumber + \".Settings.OnOffGroup\";
		
	dpSet(dpElement + \":_original.._value\", TRUE);
}" 0
 E E E
13 6
"Button2"
""
1 118 73 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 116 71 170 105

T 
1
LANG:1 3 Off
"main()
{
	string groupNumber, dpElement, systemName;

        systemName = dpSubStr($sDpName, DPSUB_SYS);
	groupNumber = currentGroupList.text;
	if(groupNumber == \"ALL\")
		dpElement = $sDpName + \".Settings.OnOffAllGroups\";
	else
		dpElement = systemName + \"_WienerGroup_\" + dpSubStr($sDpName, DPSUB_DP) +
								fwDevice_HIERARCHY_SEPARATOR + \"Group\" +
								groupNumber + \".Settings.OnOffGroup\";
		
	dpSet(dpElement + \":_original.._value\", FALSE);
}" 0
 E E E
13 7
"manageDps"
""
1 10 220 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 8 218 152 252

T 
1
LANG:1 16 Manage Groups...
"main()
{
	int pos;
	string currentSelection;
  dyn_float df;
	dyn_string ds, exceptionInfo;

  ChildPanelOnCentralModalReturn(\"fwWiener/fwWienerManageGroups.pnl\",
      \"Manage Channel Groups\",
      makeDynString(\"$sDpName:\" + $sDpName), df, ds);
      
//  DebugN(ds);
  
  currentSelection = currentGroupList.text;
  dynInsertAt(ds, \"ALL\", 1);
	currentGroupList.items(ds);

	pos = dynContains(ds, currentSelection);
	if(pos > 0)
		currentGroupList.selectedPos(pos);
	else
		currentGroupList.selectedPos(1);

	showGroupChannels(currentGroupList.text, $sDpName, exceptionInfo);
}
" 0
 E E "main()
{
  if(getSystemName() != dpSubStr($sDpName, DPSUB_SYS))
  {
    this.enabled = FALSE;
    this.toolTipText = \"The group data points can only be managed from the local system\"; 
  }
}" 0

25 10
"Chantab"
""
1 -178 -547 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 188 8 502 257
"main()
{
	this.sortOnClick = FALSE;
}" 0
"main(int xpos,string columnName,string value)
{
	int i, length;
	string deviceName, crateName, parentName, model;
	dyn_string exceptionInfo, crateNameParts, panelNames;

	getValue(\"\",\"cellValueRC\",xpos,\"Name\",deviceName);

	crateName = $sDpName;
	crateNameParts = strsplit(crateName, fwDevice_HIERARCHY_SEPARATOR);		
	length = dynlen(crateNameParts);
	
	for(i=1; i<length; i++)
		parentName += crateNameParts[i] + fwDevice_HIERARCHY_SEPARATOR; 

//DebugN(parentName);
	if(deviceName!=\"\")
	{	
		deviceName = parentName + deviceName;
//DebugN(deviceName);
		fwDevice_getModel(makeDynString(deviceName), model, exceptionInfo);
		fwDevice_getDefaultOperationPanels(dpTypeName(deviceName), panelNames, exceptionInfo, model);

		if(!isModuleOpen(panelNames[1] + \".pnl\")) 
				ModuleOn(panelNames[1] + \".pnl\",100,100,100,100,1,1,1,\"\");
	
		RootPanelOnModule(panelNames[1] + \".pnl\",
					deviceName,panelNames[1] + \".pnl\",
					makeDynString(\"$sDpName:\"+deviceName));
	}
}
" 0
 1 0 1 7 1 "Number" 3 0 0 "s" 1
LANG:1 3 Pos
E
1
LANG:1 0 

44 "Name" 13 1 0 "s" 1
LANG:1 12 Channel Name
E
1
LANG:1 0 

160 "voltage" 6 1 0 "s" 1
LANG:1 7 Voltage
E
1
LANG:1 0 

80 "vUnit" 3 0 0 "s" 1
LANG:1 4 Unit
E
1
LANG:1 0 

45 "current" 6 0 0 "s" 1
LANG:1 7 Current
E
1
LANG:1 0 

80 "iUnit" 3 0 0 "s" 1
LANG:1 4 Unit
E
1
LANG:1 0 

45 "status" 3 1 0 "s" 1
LANG:1 6 Status
E
1
LANG:1 0 

50 
26 26 "" 1 1
LANG:1 2 #1
8 30
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
0 1 1 1 7
1 0
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0