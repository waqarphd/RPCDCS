# ascii dump of database

# DpType
TypeName
_FwCtrlFsm._FwCtrlFsm	1#1
	currentState	25#2
	sendCommand	25#3
	executingAction	25#4
	currentParameters	9#5
_FwFsmObjectType._FwFsmObjectType	1#1
	panel	25#6
	components	9#7
	states	9#8
	actions	9#9
	parameters	9#11
_FwCtrlInternal._FwCtrlInternal	1#1
	action	25#2
	params	9#4
	ctrlPid	21#5
	status	25#6
	baseTypes	9#7
	apiPid	21#8
	dim_dns_node	25#9
	dim_dns_up	21#10
	autoStart	21#11
	startAllSystems	21#12
	disallowedOperationStates	9#13
	noSummaryAlarms	21#14
	openOnSingleClick	21#15
_FwCtrlUi._FwCtrlUi	1#1
	label	25#2
	panels	9#3
	visible	23#4
	operatorControl	23#5
_FwCtrlUnit._FwCtrlUnit	1#1
	mode	1#9
		owner	25#12
		exclusivity	23#31
		childrenOperatorControl	23#42
		modeBits	24#43
	running	21#44
	message	25#45
	ctrlDUFlag	21#46
_FwFsmVersion._FwFsmVersion	1#1
	version	21#3
_FwTreeNode._FwTreeNode	1#1
	children	9#2
	device	25#3
	type	25#7
	parent	25#8
	cu	23#9
	userdata	9#10
_FwTreeType._FwTreeType	1#1
	name	25#2
	modes	9#3
	root	25#4
	nodeTypes	25#8
	nodeNames	25#9
	refresh	21#10
FwDevMode.FwDevMode	1#1
	n_devices	21#3
	disabled	9#6
FwDevMajority.FwDevMajority	1#1
	threshold	21#2
	bad_states	9#3
	bad_devices	9#4
	disabled	23#5
	enabled	23#6
	reverse	21#8
	low_threshold	21#9
_FwCtrlMode._FwCtrlMode	1#1
	enabled	21#7
	modeBits	24#3
_FwFsmObject._FwFsmObject	1#1
	fsm	41#2:_FwCtrlFsm
	type	25#18
	ui	41#23:_FwCtrlUi
	mode	41#34:_FwCtrlMode
	tnode	25#39
	hasAlarms	23#43
	part	25#57
_FwFsmDevice._FwFsmDevice	1#1
	fsm	41#2:_FwCtrlFsm
	type	25#16
	ui	41#17:_FwCtrlUi
	mode	41#49:_FwCtrlMode
	tnode	25#53
	part	25#67
_FwFsmUiManager._FwFsmUiManager	1#1
	info	25#2

# Datapoint/DpId
DpName	TypeName	ID
ToDo	_FwCtrlInternal	2336
fwOT_FwChildMode	_FwFsmObjectType	5732
fwOT_FwChildrenMode	_FwFsmObjectType	5733
fwOT_FwMode	_FwFsmObjectType	5734
fwFsmVersion	_FwFsmVersion	5735
fwTN_FSM	_FwTreeNode	17009
fwTN_---ClipboardFSM---	_FwTreeNode	17010
fwTT_FSM	_FwTreeType	17037
fwOT_FwDevMode	_FwFsmObjectType	17746
fwOT_FwDevMajority	_FwFsmObjectType	22237

# DpValue
ElementName	TypeName	_original.._value	_original.._status	_original.._stime
fwOT_FwChildMode.panel	_FwFsmObjectType	"FwChildMode.pnl"	0x101	17.12.2008 13:11:31.964
fwOT_FwChildMode.components	_FwFsmObjectType		0x141	22.07.2008 13:44:31.123
fwOT_FwChildMode.states	_FwFsmObjectType	"Excluded", "FwStateOKNotPhysics", "", "", "", "Included", "FwStateOKPhysics", "when (  $ASS$FwMode in_state Excluded )  move_to EXCLUDED
|when (  $ASS$FwMode in_state Ignored )  move_to IGNORED
|when (  $ASS$FwMode in_state Manual )  move_to MANUAL
|when ( $ASS$FwMode in_state Dead )  do Manual
|", "", "", "Manual", "FwStateOKNotPhysics", "!when (  $ASS$FwMode in_state Included )  do Include|when (  $ASS$FwMode in_state Included )  move_to EXCLUDED|!when ( $ASS$FwMode in_state Excluded ) move_to EXCLUDED|!when ( $ASS$FwMode in_state Excluded ) do Manual|!when ( $ASS$FwMode in_state Excluded ) do Include|", "", "", "Ignored", "FwStateOKNotPhysics", "when (  $ASS$FwMode in_state Included )  move_to INCLUDED
|when ( $ASS$FwMode in_state Excluded ) move_to EXCLUDED
|when ( $ASS$FwMode in_state Dead )  do Exclude
|", "", "", "LockedOut", "FwStateOKNotPhysics", "", "", "", "ExcludedPerm", "FwStateOKNotPhysics", "", "", "", "LockedOutPerm", "FwStateOKNotPhysics", "", "", ""	0x101	17.12.2008 13:11:32.746
fwOT_FwChildMode.actions	_FwFsmObjectType	"Excluded/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "if ( $ASS$FwMode not_in_state {Excluded, Manual} ) then
!    if ( $ASS$FwMode in_state Manual ) then
!        do Take(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
!    else
        move_to Excluded
!    endif
else
    do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
endif
move_to Included", "0", "Excluded/Manual", "", "0", "do Manual $ASS$FwMode
move_to Manual
", "0", "Excluded/Ignore", "", "0", "do Ignore $ASS$FwMode
move_to Ignored
", "0", "Excluded/LockOut", "", "1", "move_to LockedOut
", "0", "Excluded/Exclude", "string OWNER = \"\"
", "1", "do Exclude(OWNER=OWNER) $ASS$FwMode
move_to Excluded
", "0", "Excluded/ExcludePerm", "string OWNER = \"\"
", "0", "move_to ExcludedPerm", "0", "Excluded/Exclude&LockOut", "string OWNER = \"\"
", "0", "move_to LockedOut", "0", "Included/Exclude", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state Included ) then
    if ( $ASS$FwMode in_state InManual ) then
        do Release(OWNER=OWNER) $ASS$FwMode
    else
        if ( $ASS$FwMode in_state Dead ) then
            do Exclude(OWNER=OWNER) $ASS$FwMode
       else
            move_to Included
        endif
    endif
else
    do Exclude(OWNER=OWNER) $ASS$FwMode
endif
move_to Excluded", "0", "Included/Manual", "string OWNER = \"\"
", "1", "do Manual(OWNER=OWNER) $ASS$FwMode
move_to Manual
", "0", "Included/Ignore", "string OWNER = \"\"
", "1", "do Ignore(OWNER=OWNER) $ASS$FwMode
move_to Ignored
", "0", "Included/ExcludeAll", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state {Included,Ignored,Manual} ) then
    if ( $ASS$FwMode in_state InManual ) then
        do ReleaseAll(OWNER=OWNER) $ASS$FwMode
    else
        move_to Included
    endif
else
    do ExcludeAll(OWNER=OWNER) $ASS$FwMode
endif
move_to Excluded
", "0", "Included/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
move_to Included
", "0", "Included/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ASS$FwMode
move_to Included
", "0", "Included/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
", "0", "Included/ExcludePerm", "string OWNER = \"\"
", "0", "if ( $ASS$FwMode not_in_state Included ) then
    if ( $ASS$FwMode in_state InManual ) then
        do Release(OWNER=OWNER) $ASS$FwMode
    else
        move_to Included
    endif
else
    do Exclude(OWNER=OWNER) $ASS$FwMode
endif
move_to ExcludedPerm", "0", "Included/Exclude&LockOut", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state Included ) then
    if ( $ASS$FwMode in_state InManual ) then
        do Release(OWNER=OWNER) $ASS$FwMode
    else
        if ( $ASS$FwMode in_state Dead ) then
            do Exclude(OWNER=OWNER) $ASS$FwMode
       else
            move_to Included
        endif
    endif
else
    do Exclude(OWNER=OWNER) $ASS$FwMode
endif
move_to LockedOut", "0", "Manual/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "if ( $ASS$FwMode in_state Dead) then
  move_to Manual
endif
if ( $ASS$FwMode not_in_state InManual ) then
  do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
endif
  if ( $ASS$FwMode in_state Included ) then
    move_to Included
  endif
move_to Manual", "0", "Manual/Exclude", "string OWNER = \"\"
", "1", "!if ( $ASS$FwMode in_state {Manual, Included} ) then
    do Exclude(OWNER=OWNER) $ASS$FwMode
!    move_to Excluded
!endif
!if ( $ASS$FwMode not_in_state Included ) then
!    if ( $ASS$FwMode in_state InManual ) then
!        do Release(OWNER=OWNER) $ASS$FwMode
!    else
!        do Exclude(OWNER=OWNER) $ASS$FwMode
!    endif
!else
!    do Exclude(OWNER=OWNER) $ASS$FwMode
!endif
!if ( $ASS$FwMode in_state Excluded ) then
!    move_to Excluded
!endif
!move_to Manual
if ( $ASS$FwMode in_state InManual ) then
     do SetInLocal $ASS$FwMode
endif
move_to Excluded", "0", "Manual/Ignore", "", "0", "do Ignore $ASS$FwMode
move_to Ignored
", "0", "Manual/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ASS$FwMode
!move_to Manual
if ( $ASS$FwMode in_state InManual ) then
     do SetInLocal $ASS$FwMode
endif
move_to Excluded", "0", "Manual/ExcludeAll", "string OWNER = \"\"
", "1", "!if ( $ASS$FwMode not_in_state {Included,Ignored,Manual} ) then
!    if ( $ASS$FwMode in_state InManual ) then
!        do ReleaseAll(OWNER=OWNER) $ASS$FwMode
!    else
!        move_to Included
!    endif
!else
!    do ExcludeAll(OWNER=OWNER) $ASS$FwMode
!endif
!if ( $ASS$FwMode not_in_state InManual ) then
  do ExcludeAll(OWNER=OWNER) $ASS$FwMode
!endif
!move_to Manual
if ( $ASS$FwMode in_state InManual ) then
     do SetInLocal $ASS$FwMode
endif
move_to Excluded", "0", "Manual/Manual", "", "0", "do Manual $ASS$FwMode
move_to Manual", "0", "Manual/Exclude&LockOut", "string OWNER = \"\"
", "1", "!if ( $ASS$FwMode in_state {Manual, Included} ) then
    do Exclude(OWNER=OWNER) $ASS$FwMode
!    move_to Excluded
!endif
!if ( $ASS$FwMode not_in_state Included ) then
!    if ( $ASS$FwMode in_state InManual ) then
!        do Release(OWNER=OWNER) $ASS$FwMode
!    else
!        do Exclude(OWNER=OWNER) $ASS$FwMode
!    endif
!else
!    do Exclude(OWNER=OWNER) $ASS$FwMode
!endif
!if ( $ASS$FwMode in_state Excluded ) then
!    move_to Excluded
!endif
!move_to Manual
if ( $ASS$FwMode in_state InManual ) then
     do SetInLocal $ASS$FwMode
endif
move_to LockedOut", "0", "Ignored/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
move_to Included
", "0", "Ignored/Exclude", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state Included ) then
    if ( $ASS$FwMode in_state InManual ) then
        do Release(OWNER=OWNER) $ASS$FwMode
    else
        do Exclude(OWNER=OWNER) $ASS$FwMode
    endif
else
    do Exclude(OWNER=OWNER) $ASS$FwMode
endif
move_to Excluded
", "0", "Ignored/Manual", "string OWNER = \"\"
", "0", "do Manual(OWNER=OWNER) $ASS$FwMode
move_to Manual
", "0", "Ignored/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
", "0", "Ignored/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ASS$FwMode
move_to Included
", "0", "Ignored/ExcludeAll", "string OWNER = \"\"
", "1", "if ( $ASS$FwMode not_in_state {Included,Ignored,Manual} ) then
    if ( $ASS$FwMode in_state InManual ) then
        do ReleaseAll(OWNER=OWNER) $ASS$FwMode
    else
        move_to Included
    endif
else
    do ExcludeAll(OWNER=OWNER) $ASS$FwMode
endif
move_to Excluded
", "0", "LockedOut/UnLockOut", "", "1", "move_to Excluded
", "0", "LockedOut/UnLockOut&Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "if ( $ASS$FwMode not_in_state Excluded ) then
!    if ( $ASS$FwMode in_state Manual ) then
!        do Take(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
!    else
        move_to LockedOut
!    endif
else
    do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
endif
move_to Included", "0", "LockedOut/LockOutPerm", "", "0", "move_to LockedOutPerm", "0", "ExcludedPerm/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "!if ( $ASS$FwMode not_in_state Excluded ) then
!    if ( $ASS$FwMode in_state Manual ) then
!        do Take(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
!    else
!        move_to Excluded
!    endif
!else
!    do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
!endif
!move_to Included
if ( $ASS$FwMode not_in_state {Excluded, Manual} ) then
    move_to ExcludedPerm
else
    do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
endif
move_to Included", "0", "ExcludedPerm/LockOut", "", "1", "move_to LockedOut", "0", "ExcludedPerm/Exclude", "string OWNER = \"\"
", "0", "move_to Excluded", "0", "LockedOutPerm/UnLockOut", "", "1", "move_to Excluded
", "0", "LockedOutPerm/UnLockOut&Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "if ( $ASS$FwMode not_in_state Excluded ) then
!    if ( $ASS$FwMode in_state Manual ) then
!        do Take(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
!    else
        move_to LockedOutPerm
!    endif
else
    do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ASS$FwMode
endif
move_to Included", "0", "LockedOutPerm/LockOut", "", "0", "move_to LockedOut", "0"	0x101	17.12.2008 13:11:32.746
fwOT_FwChildMode.parameters	_FwFsmObjectType		0x101	22.07.2008 13:44:31.217
fwOT_FwChildrenMode.panel	_FwFsmObjectType	"FwChildrenMode.pnl"	0x101	17.10.2008 17:33:54.382
fwOT_FwChildrenMode.components	_FwFsmObjectType		0x141	22.07.2008 13:44:31.279
fwOT_FwChildrenMode.states	_FwFsmObjectType	"Complete", "_3DFace", "when ( $ANY$FwChildrenMode in_state Incomplete )  move_to Incomplete|when ( $ANY$FwChildrenMode in_state IncompleteDev )  move_to IncompleteDev|when ( $ANY$FwChildMode not_in_state {Included,ExcludedPerm,LockedOutPerm} )  move_to Incomplete|when ( $ANY$FwDevMode in_state DISABLED )  move_to IncompleteDev|", "", "", "Incomplete", "FwStateAttention2", "when ( ( $ALL$FwChildMode in_state {Included,ExcludedPerm,LockedOutPerm} ) and
       ( $ALL$FwChildrenMode not_in_state Incomplete ) )  move_to Complete|", "", "", "IncompleteDev", "FwStateAttention1", "when ( ( $ALL$FwDevMode not_in_state DISABLED ) and
       ( $ALL$FwChildrenMode not_in_state IncompleteDev ) ) move_to Complete|when ( ( $ANY$FwChildMode not_in_state {Included,ExcludedPerm,LockedOutPerm} ) or
       ( $ANY$FwChildrenMode in_state Incomplete ) )  move_to Incomplete|", "", ""	0x101	08.12.2008 10:09:39.612
fwOT_FwChildrenMode.actions	_FwFsmObjectType		0x101	08.12.2008 10:09:39.597
fwOT_FwChildrenMode.parameters	_FwFsmObjectType		0x141	22.07.2008 13:44:31.373
fwOT_FwMode.panel	_FwFsmObjectType	"FwMode.pnl"	0x101	07.04.2008 17:37:49.513
fwOT_FwMode.components	_FwFsmObjectType		0x141	07.04.2008 09:46:50.858
fwOT_FwMode.states	_FwFsmObjectType	"Excluded", "FwStateOKNotPhysics", "", "", "", "Included", "FwStateOKPhysics", "", "", "", "InLocal", "FwStateOKNotPhysics", "", "", "", "Manual", "FwStateOKNotPhysics", "", "", "", "InManual", "FwStateOKNotPhysics", "", "", "", "Ignored", "FwStateOKNotPhysics", "", "", ""	0x101	05.05.2008 15:47:20.684
fwOT_FwMode.actions	_FwFsmObjectType	"Excluded/Take", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
move_to InLocal
", "0", "Excluded/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
move_to Included
", "0", "Excluded/Manual", "", "0", "move_to Manual
", "0", "Excluded/Ignore", "", "0", "move_to Ignored
", "0", "Included/Exclude", "string OWNER = \"\"
", "0", "!do Exclude $ALL$FwChildMode
do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded
", "0", "Included/Manual", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Manual
", "0", "Included/Ignore", "string OWNER = \"\"
", "0", "move_to Ignored
", "0", "Included/ExcludeAll", "string OWNER = \"\"
", "0", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded
", "0", "Included/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
move_to Included
", "0", "Included/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Included
", "0", "Included/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
", "0", "InLocal/Release", "string OWNER = \"\"
", "1", "!do Exclude $ALL$FwChildMode
do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded
", "0", "InLocal/ReleaseAll", "string OWNER = \"\"
", "1", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded
", "0", "InLocal/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
", "0", "InLocal/Take", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "1", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
move_to InLocal
", "0", "Manual/Include", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do Include(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
move_to Included
", "0", "Manual/Take", "string OWNER = \"\"
", "1", "do Include(OWNER=OWNER) $ALL$FwChildMode
move_to InManual
", "0", "Manual/Exclude", "string OWNER = \"\"
", "0", "do Exclude(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded
", "0", "Manual/Ignore", "", "0", "move_to Ignored
", "0", "Manual/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded", "0", "Manual/ExcludeAll", "string OWNER = \"\"
", "0", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded
", "0", "InManual/Release", "string OWNER = \"\"
", "1", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Manual
", "0", "InManual/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
", "0", "InManual/ReleaseAll", "string OWNER = \"\"
", "0", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded
", "0", "InManual/SetInLocal", "", "0", "move_to InLocal", "0", "Ignored/Include", "", "0", "move_to Included
", "0", "Ignored/Exclude", "string OWNER = \"\"
", "0", "do Exclude(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded
", "0", "Ignored/Manual", "", "0", "move_to Manual
", "0", "Ignored/SetMode", "string OWNER = \"\"
string EXCLUSIVE = \"YES\"
", "0", "do SetMode(OWNER=OWNER,EXCLUSIVE=EXCLUSIVE) $ALL$FwChildMode
", "0", "Ignored/Free", "string OWNER = \"\"
", "0", "do Free(OWNER=OWNER) $ALL$FwChildMode
move_to Included
", "0", "Ignored/ExcludeAll", "string OWNER = \"\"
", "0", "do ExcludeAll(OWNER=OWNER) $ALL$FwChildMode
move_to Excluded
", "0"	0x101	05.05.2008 15:47:20.684
fwOT_FwMode.parameters	_FwFsmObjectType		0x141	07.04.2008 09:46:50.858
fwOT_FwDevMode.panel	_FwFsmObjectType	"FwDevMode.pnl"	0x101	08.05.2007 15:29:20.716
fwOT_FwDevMode.components	_FwFsmObjectType	"dyn_string disabled
", "", "int Busy = 0; 
 
dyn_dyn_string Dis_ids; 
dyn_string Children; 
dyn_int Indexes;
dyn_string Lunits; 
dyn_dyn_string Incompletes;
dyn_string ChildrenInc; 
dyn_string Refered, Reference;

FwDevMode_initialize(string domain, string device)
{ 
dyn_string objs, children, items, exInfo; 
int index, i, pos; 
string lunit, lunit_name; 
dyn_int lus, flags; 
string subdomain, subobj, child; 
 
    while(Busy)  
	delay(0, 100);  
    Busy = 1;  
    pos = strpos(device,\"_FWDM\"); 
    lunit = substr(device, 0, pos); 
    lunit_name = lunit; 
    if((pos = strpos(lunit,\"/\")) >= 0) 
        lunit_name = substr(lunit, pos+1);
    children = fwFsm_getLogicalUnitDevices(domain, lunit_name); 
    for(i = 1; i <= dynlen(children); i++) 
        dynAppend(lus,0); 
    objs = fwFsm_getLogicalUnitObjects(domain, lunit_name); 
    for(i = 1; i <= dynlen(objs); i++) 
    {
	  items = fwFsm_getObjChildren(domain, objs[i], flags); 
        if(dynlen(items)) 
            dynAppend(lus,1); 
        else 
            dynAppend(lus,0); 
    } 
    dynAppend(children, objs);
    if(index = dynContains(children, device)) 
    {
        dynRemove(children, index); 
        dynRemove(lus, index); 
    }
    dpSetWait(lunit+\"_FWDM.n_devices\",dynlen(children)); 
    dpSetWait(lunit+\"_FWDM.disabled\",makeDynString());  
    if(!(index = dynContains(Lunits, lunit))) 
    { 
        index = dynAppend(Lunits, lunit); 
        Dis_ids[index] = makeDynString(); 
        Incompletes[index] = makeDynString(); 
    }
    for(i = 1; i <= dynlen(children); i++) 
    {
        child = children[i];
        strreplace(child,\"::\",\"|\"); 
        dynAppend(Children, child); 
        dynAppend(Indexes, index);
        fwUi_connectEnabled(\"change_state\",domain, children[i]); 
        if(lus[i]) 
        { 
            fwUi_connectDUModeBits(\"change_incomplete\", domain, children[i], 0); 
        } 
/*
	  if(fwFsm_isAssociated(children[i]))  
        {
            subdomain = fwFsm_getAssociatedDomain(children[i]); 
            subobj = fwFsm_getAssociatedObj(children[i]); 
            if(subdomain != subobj) 
                fwUi_connectDUModeBits(\"change_reference\", subdomain, subobj, 0);  
            else 
                fwUi_connectCUModeBits(\"change_reference\", subdomain, subobj, 0, 0);    
DebugN(\"check ref\",domain, children[i]);  
              dynAppend(Refered,subdomain+\"|\"+subobj); 
              dynAppend(Reference, domain+\"|\"+children[i]); 
        } 
*/  
    } 
    Busy = 0;
}
 
change_state(string dp, int value) 
{ 
int n, index, lunit_index; 
dyn_string items;
string domain, id, lunit; 
int done = 0; 
 
    items = strsplit(dp,\":|.\");  
    domain = items[2];  
    id = items[3]; 
    if(items[4] != \"mode\") 
        id += \"|\"+items[4];
 
    while(Busy) 
	delay(0, 100); 
    Busy = 1; 
  
    compute(domain, id, value); 
    Busy = 0; 
} 
 
change_incomplete(string dp, bit32 value)  
{  
int n, index, lunit_index, inc;  
dyn_string items; 
string domain, id, lunit;  
int done = 0; 
bit32 bits;
  
    items = strsplit(dp,\":|.\");   
    domain = items[2];   
    id = items[3];  
    if(items[4] != \"mode\")  
        id += \"|\"+items[4]; 
  
    while(Busy)  
	delay(0, 100);  
    Busy = 1; 
  
    inc = getBit(value, FwIncompleteDevBit);  
    compute(domain, id, !inc, \"Tree\"); 
    Busy = 0;  
} 
 
change_reference(string dp, bit32 value)   
{   
int n, index, lunit_index, inc;   
dyn_string items;  
string domain, id, lunit, obj;   
int done = 0;  
bit32 bits; 
   
    items = strsplit(dp,\":|.\");    
    domain = items[2];    
    id = items[3];   
    if(items[4] != \"mode\")   
        id += \"|\"+items[4];  
   
    while(Busy)   
	delay(0, 100);   
    Busy = 1;  
   
    if(strpos(domain, \"fwCU_\") == 0) 
    { 
        domain = substr(domain, 5); 
        id = domain; 
    } 
    if((index = dynContains(Refered, domain+\"|\"+id))) 
        obj = Reference[index];
DebugN(dp, domain, id, obj, value); 
//    inc = getBit(value, FwIncompleteDevBit);   
//    compute(domain, id, !inc, \"Tree\");  
    Busy = 0;   
}  
  

compute(string domain, string id, int value, string inv = \"\") 
{  
int index, lunit_index;   
string lunit;   
int done = 0;  
 
    index = dynContains(Children, id);  
    lunit_index = Indexes[index];  
      
//    dpGet(domain+\"_FWDM.disabled\", dis_ids); 
    id += inv;
    if(value == 1)  
    {  
        if(index = dynContains(Dis_ids[lunit_index], id))  
        { 
            dynRemove(Dis_ids[lunit_index], index);  
            done = 1;  
        }   
    }  
    else if(value == 0)
    {  
        if(!dynContains(Dis_ids[lunit_index], id))  
        {   
            dynAppend(Dis_ids[lunit_index], id);  
            done = 1;  
        }   
    }  
    else if(value == -1) 
    {   
        if(index = dynContains(Dis_ids[lunit_index], id))   
        {  
            dynRemove(Dis_ids[lunit_index], index);   
            done = 1;   
        }    
    }   
    if(done)  
    { 
        lunit = Lunits[lunit_index];   
        dpSetWait(lunit+\"_FWDM.disabled\", Dis_ids[lunit_index]);   
    } 
}
", "FwDevMode_valueChanged( string domain, string device,
      dyn_string disabled, string &fwState )
{
	if (dynlen(disabled))
	{
		fwState = \"DISABLED\";
	}
	else 
	{
		fwState = \"ENABLED\";
	}
}


", "FwDevMode_doCommand(string domain, string device, string command)
{
}

"	0x101	08.05.2007 15:29:20.779
fwOT_FwDevMode.states	_FwFsmObjectType	"ENABLED", "FwStateOKPhysics", "", "", "", "DISABLED", "FwStateAttention1", "", "", ""	0x101	08.05.2007 15:29:20.747
fwOT_FwDevMode.actions	_FwFsmObjectType		0x101	08.05.2007 15:29:20.747
fwOT_FwDevMode.parameters	_FwFsmObjectType		0x141	27.02.2007 10:10:41.303
fwOT_FwDevMajority.panel	_FwFsmObjectType	"FwDevMajority.pnl"	0x101	17.01.2007 18:44:27.343
fwOT_FwDevMajority.components	_FwFsmObjectType	"dyn_string bad_devices
", "", "int BusyThreshold = 0; 

dyn_string Types; 
dyn_dyn_string Devices; 
dyn_dyn_string States;  
dyn_dyn_int Enableds; 
dyn_dyn_string Bad_states; 
dyn_int And_enabled; 
dyn_int Or_disabled; 
 
dyn_int N_devices; 
dyn_int Threshold; 
dyn_int LowThreshold;  

dyn_dyn_string Bad_devices;
 
FwDevMajority_initialize(string domain, string device)
{ 
dyn_string children, items; 
int maj_index, index, i; 
string type, modeObj, lunit, dp, typeindex, dom; 
  
 
    while(BusyThreshold)   
	delay(0, 100);   
    BusyThreshold = 1;  
 
    typeindex = get_lunittype(device, dom, lunit, type);   
    maj_index = get_maj_index(typeindex);  
 
    BusyThreshold = 0;   
 
    children = fwFsm_getLogicalUnitChildrenOfType(domain, lunit, type); 
//    fwFsm_getDomainObjectsOfType(domain, type, children);   
    if(index = dynContains(children, domain))  
      dynRemove(children, index); 
    N_devices[maj_index] = dynlen(children);     
    if(domain == lunit) 
        dp = domain+\"/\"+type+\"_FWMAJ\"; 
    else 
        dp = domain+\"/\"+lunit+\"/\"+type+\"_FWMAJ\"; 
    dpConnect(\"new_settings\",  
          dp+\".bad_states\",    
          dp+\".disabled\",   
          dp+\".enabled\", 
          dp+\".threshold\", 
          dp+\".low_threshold\",
          dp+\".reverse\");     
 
    dpSetWait(dp+\".bad_devices\",makeDynString()); 
    for(i = 1; i <= dynlen(children); i++) 
    { 
        States[maj_index][i] = \"\"; 
        Enableds[maj_index][i] = -2; 
        Devices[maj_index][i] = children[i];
        fwUi_connectCurrentState(\"change_state_threshold\",domain, children[i]);
	  modeObj = fwUi_getModeObj(domain, children[i]); 
        if(modeObj == domain) 
        { 
//            if(fwFsm_isDU(domain, children[i]))
                fwUi_connectEnabled(\"change_enabled\",domain, children[i]); 
//            else 
//                Enableds[maj_index][i] = 1; 
        } 
        else
		fwUi_connectCurrentState(\"change_excluded\", domain, modeObj+\"_FWM\"); 
    } 
}

new_settings(string dp1, dyn_string bad_states, 
             string dp2, int or_enabled,
             string dp3, int and_enabled, 
             string dp4, int threshold, 
             string dp5, int low_threshold, 
             string dp6, int reverse) 
{ 
int maj_index, tmp;   
dyn_string items;   
string domain, lunit, type, typeindex;   
 
    items = strsplit(dp1,\":.\"); 

    typeindex = get_lunittype(items[2], domain, lunit, type); 
    maj_index = get_maj_index(typeindex);  
  
    Bad_states[maj_index] = bad_states; 
    And_enabled[maj_index] = and_enabled; 
    Or_disabled[maj_index] = or_enabled;  
    if(low_threshold == 0) 
        low_threshold = 1;
    LowThreshold[maj_index] = low_threshold;  

    if(reverse) 
    { 
        tmp = reverse - threshold; 
        Threshold[maj_index] = N_devices[maj_index] - tmp;  
    } 
    else 
        Threshold[maj_index] = threshold; 

    recalculate_all(domain, maj_index); 
}  
 
string get_lunittype(string device,  
    string &domain, string &lunit, string &type) 
{ 
int pos;  
dyn_string items;  
string typeindex;  
   
    items = strsplit(device,\"/\"); 
    domain = items[1];  
    if(dynlen(items) == 3) 
    { 
        lunit = items[2];
        type = items[3]; 
        typeindex = lunit+\"/\";  
    }
    else 
    { 
        lunit = domain;
        type = items[2]; 
        typeindex = \"\";  
    }  
    strreplace(type,\"_FWMAJ\",\"\"); 
    typeindex += type;  
    return typeindex; 
} 

int get_maj_index(string type) 
{ 
int index; 
 
    if(!(index = dynContains(Types, type))) 
    { 
        index = dynAppend(Types, type); 
	  States[index] = makeDynString(); 
        Enableds[index] = makeDynInt();  
        Devices[index] = makeDynString(); 
        Bad_states[index] = makeDynString();
        Bad_devices[index] = makeDynString(); 
    } 
    return index; 
} 
  
int find_maj_index(string device) 
{ 
    int i; 
 
    for(i = 1; i <= dynlen(Devices); i++) 
    { 
        if(dynContains(Devices[i], device)) 
        { 
            return i; 
        } 
    } 
    return 0; 
} 

change_state_threshold(string dp, string state) 
{ 
int n, maj_index, index; 
dyn_string items, dis_ids, bad_states, bad_devices; 
string domain, device, type; 
 
    items = strsplit(dp,\":.\");   
    items = strsplit(items[2],fwFsm_separator);  
    domain = items[1];  
    device = items[2]; 
    if(dynlen(items) > 2) 
    {
        device += \"::\"+items[3]; 
    } 
 
    maj_index = find_maj_index(device);
 
    index = dynContains(Devices[maj_index], device); 
    States[maj_index][index] = state; 
    calculate_bad_devices(domain, maj_index, index); 
} 
 
change_excluded(string dp, string state)  
{  
int n, maj_index, index, cu;  
dyn_string items, dis_ids, bad_states, bad_devices;  
string domain, device, type, modeObj, mode;  
  
    items = strsplit(dp,\":.\");    
    items = strsplit(items[2],fwFsm_separator);   
    domain = items[1];   
    modeObj = items[2];  
    device = modeObj; 
    strreplace(device,\"_FWM\",\"\");
    device += \"::\"+device;  
   
    maj_index = find_maj_index(device); 
 
    index = dynContains(Devices[maj_index], device);  
    fwUi_getCurrentState(domain, modeObj, mode); 
    fwUi_convertObjState(domain, modeObj, mode); 
    if((mode == \"Included\") || (mode == \"Manual\"))
      Enableds[maj_index][index] = 1; 
    else 
      Enableds[maj_index][index] = 0;   
    calculate_bad_devices(domain, maj_index, index);  
}  
 
change_enabled(string dp, int enabled)  
{  
int n, maj_index, index, or_disabled;  
dyn_string items, dis_ids, bad_states, bad_devices;  
string domain, device, type;  
    
    items = strsplit(dp,\":.\");   
    items = strsplit(items[2],fwFsm_separator);  
    domain = items[1];  
    device = items[2];  
    if(dynlen(items) > 2)  
    { 
        device += \"::\"+items[3];  
    }  
    
    maj_index = find_maj_index(device); 
 
    index = dynContains(Devices[maj_index], device); 
    Enableds[maj_index][index] = enabled; 
    calculate_bad_devices(domain, maj_index, index); 
} 
 
calculate_bad_devices(string domain, int maj_index, int index) 
{ 
dyn_string bad_devices;  
string device, typeindex, state; 
int enabled, done;  
      
    if((States[maj_index][index] == \"\") ||  
       (Enableds[maj_index][index] == -2)) 
        return; 
 
    while(BusyThreshold)  
	delay(0, 100);  
    BusyThreshold = 1; 
  
    done = 0;
    device = Devices[maj_index][index]; 
    state = States[maj_index][index]; 
    enabled = Enableds[maj_index][index]; 
    typeindex = Types[maj_index]; 
    if(dynContains(Bad_states[maj_index], state))  
    { 
        if(And_enabled[maj_index])  
        { 
            if(enabled == 1)   
            {   
                if(!dynContains(Bad_devices[maj_index], device)) 
                {
                    dynAppend(Bad_devices[maj_index], device); 
                    done = 1; 
                } 
            } 
            else  
            {    
                if(index = dynContains(Bad_devices[maj_index], device))     
                { 
                    dynRemove(Bad_devices[maj_index], index);  
                    done = 1; 
                }  
            }   
        } 
        else 
        { 
            if(!dynContains(Bad_devices[maj_index], device))    
            { 
                dynAppend(Bad_devices[maj_index], device); 
                done = 1; 
            }  
        } 
    }  
    else  
    {   
        if(Or_disabled[maj_index])   
        {  
            if(enabled <= 0)    
            {    
                if(!dynContains(Bad_devices[maj_index], device))      
                { 
                    dynAppend(Bad_devices[maj_index], device);      
                    done = 1; 
                }  
            }    
            else   
            {     
                if(index = dynContains(Bad_devices[maj_index], device))      
                { 
                    dynRemove(Bad_devices[maj_index], index);      
                    done = 1; 
                }  
            }  
        } 
        else 
        {   
            if(index = dynContains(Bad_devices[maj_index], device))    
            { 
                dynRemove(Bad_devices[maj_index], index); 
                done = 1; 
            }  
        }  
    } 
    if(done)
        dpSetWait(domain+\"/\"+typeindex+\"_FWMAJ.bad_devices\", Bad_devices[maj_index]);    
    BusyThreshold = 0;  
} 
 
recalculate_all(string domain, int maj_index) 
{ 
int i; 
 
    for(i = 1; i <= dynlen(Devices[maj_index]); i++) 
        calculate_bad_devices(domain, maj_index, i); 
}", "FwDevMajority_valueChanged( string domain, string device,
      dyn_string bad_devices, string &fwState )
{ 
int threshold, low_threshold, maj_index; 
string type, typeindex, dom, lunit; 
 
//      type = get_type(device); 
//      maj_index = get_maj_index(type); 
 
      typeindex = get_lunittype(device, dom, lunit, type); 
      maj_index = get_maj_index(typeindex);   
   
      threshold = Threshold[maj_index]; 
      low_threshold = LowThreshold[maj_index]; 
//DebugN(device, threshold, low_threshold, dynlen(bad_devices));
      if (dynlen(bad_devices) > threshold) 
	    fwState = \"MAJORITY_ERROR\"; 
      else if (dynlen(bad_devices) >= low_threshold) 
	    fwState = \"MAJORITY_WARNING\"; 
	else  
	    fwState = \"MAJORITY_OK\"; 
/*
	if (!dynlen(bad_devices))
	{
		fwState = \"MAJORITY_OK\";
	}
	else if (dynlen(bad_devices) > threshold)
	{
		fwState = \"MAJORITY_WARNING\";
	}
	else 
	{
		fwState = \"MAJORITY_ERROR\";
	} 
*/
}

", "FwDevMajority_doCommand(string domain, string device, string command)
{
}
"	0x101	16.02.2007 17:33:52.591
fwOT_FwDevMajority.states	_FwFsmObjectType	"MAJORITY_OK", "FwStateOKPhysics", "", "", "", "MAJORITY_WARNING", "FwStateAttention2", "", "", "", "MAJORITY_ERROR", "FwStateAttention3", "", "", ""	0x101	16.02.2007 17:33:52.559
fwOT_FwDevMajority.actions	_FwFsmObjectType		0x101	16.02.2007 17:33:52.559
fwOT_FwDevMajority.parameters	_FwFsmObjectType		0x141	17.01.2007 18:44:27.343
fwTT_FSM.name	_FwTreeType	"FSM"	0x101	04.08.2005 14:05:22.032
fwTT_FSM.modes	_FwTreeType	"editor", "navigator"	0x101	04.08.2005 14:05:22.032
fwTT_FSM.root	_FwTreeType	"dist_4:"	0x101	04.08.2005 14:06:19.783
fwTT_FSM.nodeTypes	_FwTreeType	""	0x101	04.08.2005 14:05:22.032
