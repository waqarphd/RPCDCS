V 10
1
LANG:1 8 (NoName)
PANEL,284 141 445 95 N "FwTrendingViewBackground" 1
"$sRefName"
EEE E E 1 -1 -1 0  0 0
"" 0 1
E"int REFRESH_DELAY = 100;" 0
 2
"CBRef""1"
"EClose"E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
6 39
"Border1"
""
1 304 11 E E E 1 E 1 E N "FwTrendingFaceplateBackground" E N "FwTrendingFaceplateBackground" E E
 E E
10 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  1 E 304 1 404 11
2 34
"curvesTimeRangeHidden"
""
1 10 65 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
6 0 0 0 0 0
EE E
0
1
LANG:1 0 
1
"dashclr"N "_Transparent"
E E 1 1 1 0 1 E U  1 E 12 67 152 83
1 2 0 "s" 0 0 0 64 0 0  12 67
 1
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
1
LANG:1 24 hiddenUserCurveTimerange
13 22
"StopButton"
""
1 0 0 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
1 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
-2 -2 43 22
T 
1
LANG:1 6 Freeze
"main() {
	string buttonState = this.text;
	string ref = $sRefName;
	
	if(buttonState == \"Run\") { // in stop->run
		fwTrending_trendRun(ref, true, ref + \".\");
	} else { // in Run -> stop
		fwTrending_trendRun(ref, false, ref + \".\");
	}
}" 0
 E E E
26 23
"TimeCascadeButton"
""
1 41 0 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
2 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
39 -2 110 22
0 1
LANG:1 10 Time Range
"" 0 0 0 0 0
6 1 1
LANG:1 10 10 minutes
"10minutes" 0 0 0 0 0
1 1
LANG:1 6 1 hour
"1hour" 0 0 0 0 0
1 1
LANG:1 7 8 hours
"8hours" 0 0 0 0 0
1 1
LANG:1 5 1 day
"1day" 0 0 1 49 0
1 1
LANG:1 7 10 days
"10days" 0 0 0 0 0
1 1
LANG:1 14 User specified
"userSpec" 0 0 0 0 0
E "main(string id) {
	dyn_string ids = makeDynString(\"10minutes\", \"1hour\", \"8hours\", \"1day\", \"10days\", \"userSpec\", \"xzoomin\", \"xzoomout\");
	dyn_string texts = makeDynString(\"10 minutes\", \"1 hour\", \"8 hours\", \"1 day\", \"10 days\", \"User Specified\");
	string sTimeRange;
	dyn_string ds; 
	dyn_float df;
	int d, h, m, t; 
	string activeTrend, trendRunning;
	string ref = $sRefName;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	switch (id) 
	{
		case \"10minutes\": {
			fwTrending_changeTrendTimeRange(ref, 600, ref + \".\", \"  0 d  0 h 10 m\", 0, texts[1] + \"  *\");
			break;	
		}
		case \"1hour\" : {
			fwTrending_changeTrendTimeRange(ref, 3600, ref + \".\", \"  0 d  1 h  0 m\", 1, texts[2] + \"  *\");
			break;	
		}
		case \"8hours\" : {
			fwTrending_changeTrendTimeRange(ref, 28800, ref + \".\", \"  0 d  8 h  0 m\", 2, texts[3] + \"  *\");
			break;	
		}
		case \"1day\" : {
			fwTrending_changeTrendTimeRange(ref, 86400, ref + \".\", \"  1 d  0 h  0 m\", 3, texts[4] + \"  *\");
			break;	
		}
		case \"10days\" : {
			fwTrending_changeTrendTimeRange(ref, 864000, ref + \".\", \" 10 d  0 h  0 m\", 4, texts[5] + \"  *\");
			break;	
		}
		case \"userSpec\" : {	
			fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);
			sTimeRange = plotData[fwTrending_PLOT_OBJECT_TIME_RANGE];

			sscanf(sTimeRange,\"%d\",t);
			d = t / 86400;
			h = t % 86400 / 3600;
			m = t % 3600 / 60;
			ChildPanelOnCentralModalReturn(\"fwTrending/fwTrendingTimeSpec.pnl\", \"Specify a Time Period\",
				makeDynString(\"$iDays:\"+d,\"$iHours:\"+h,\"$iMins:\"+m), df, ds);
			if(dynlen(ds) > 0 && ds[1] == \"ok\") {
				d = df[1]; h = df[2]; m = df[3];
				//this.textItem(prev - 1, texts[prev] + \"  *\");
				t = d * 86400 + h * 3600 + m * 60;
				d = t / 86400;
				h = t % 86400 / 3600;
				m = t % 3600 / 60;
				if(t > 0) {
					sprintf(sTimeRange,\"%3d d %2d h %2d m\",d,h,m);

					plotData[fwTrending_PLOT_OBJECT_TIME_RANGE] = t;
					fwTrending_setRuntimePlotDataWithStrings(ref, trendRunning, plotData, exceptionInfo, FALSE);
					fwTrending_changeTrendTimeRange(ref, t, ref + \".\", sTimeRange, 5, texts[6] + \" (\" + d + \"d \" + h + \"h \" + m + \"m)  *\");
				}
			}
			break;
		}
	}
}" 0
 0 
26 41
"ZoomCascadeButton"
""
1 155 451 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
13 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
106 -2 157 22
0 1
LANG:1 4 Axes
"" 0 0 0 0 0
3 1 1
LANG:1 4 Axes
"axesVisible" 0 0 0 0 0
0 1
LANG:1 6 X Axis
"xzoom" 0 0 0 0 0
2 1 1
LANG:1 7 Zoom in
"xzoomin" 0 0 0 0 0
1 1
LANG:1 8 Zoom out
"xzoomout" 0 0 0 0 0
0 1
LANG:1 6 Y Axis
"yzoom" 0 0 0 0 0
2 1 1
LANG:1 7 Zoom in
"yzoomin" 1 0 0 50 0
1 1
LANG:1 8 Zoom out
"yzoomout" 1 0 0 56 0
E "main(string id)
{
	bool isRunning, showWithAxes;
	int i;
	string currentTrendObj, boolAsText;
	dyn_string plotShapes, exceptionInfo;
	dyn_dyn_string plotData;
	string ref = $sRefName;


	switch(id)
	{
		case \"axesVisible\":
			fwTrending_getRuntimePlotDataWithExtendedObject(ref, isRunning, plotShapes, plotData, exceptionInfo, FALSE);
			if(strpos(this.textItem(\"0\"), \"*\") > 0)
			{
				this.textItem(\"0\", \"Axes\");
				showWithAxes = FALSE;
				boolAsText = \"FALSE\";
			}
			else
			{
				this.textItem(\"0\", \"Axes\" + \"   *\");
				showWithAxes = TRUE;
				boolAsText = \"TRUE\";
			}
			
			plotData[fwTrending_PLOT_OBJECT_AXII] = makeDynString();
			for(i=1; i<=fwTrending_MAX_NUM_CURVES; i++)
				dynAppend(plotData[fwTrending_PLOT_OBJECT_AXII], boolAsText);
			
			fwTrending_setRuntimePlotDataWithExtendedObject(ref, isRunning, plotData, exceptionInfo, FALSE);
			if(showWithAxes)
				setValue(ref+\"trend.activeTrendText\", \"text\", plotShapes[fwTrending_LINEAR_TREND_NAME]);
			else
				setValue(ref+\"trend.activeTrendText\", \"text\", plotShapes[fwTrending_LOG_TREND_NAME]);

			getValue(ref+\"trend.activeTrendText\", \"text\", currentTrendObj);
			plotShapes[fwTrending_ACTIVE_TREND_NAME] = currentTrendObj;
			fwTrending_initTrendWithObject(ref, currentTrendObj, plotShapes, plotData, isRunning, FALSE, exceptionInfo, TRUE);
			fwTrending_showStandardTrend(showWithAxes, plotShapes[fwTrending_LINEAR_TREND_NAME], plotShapes[fwTrending_LOG_TREND_NAME]);
			break;
		case \"xzoomin\":
			fwTrending_trendZoomX(ref, true);
			break;
		case \"xzoomout\":
			fwTrending_trendZoomX(ref, false);
			break;
		case \"yzoomin\":
			fwTrending_trendZoomY(ref, true);
			break;
		case \"yzoomout\":
			fwTrending_trendZoomY(ref, false);
			break;
	}
}" 0
 0 
13 40
"trendRefreshButton"
""
1 422 0 E E E 0 E 0 E N "_3DText" E N "_3DFace" E E
 E E
12 0 0 0 0 0
EE E
0
1
LANG:1 20 Refresh plotted data
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
420 -2 446 22
P 
12434877
"pictures/refresh.gif"
1
LANG:1 0 
"main()
{
	string ref = $sRefName;

	fwTrending_trendRefresh(ref);
}
" 0
 E E E
13 25
"saveSettings"
""
1 155 0 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
3 1 0 0 82 0
EE E
0
1
LANG:1 37 Save configuration to plot data point
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
153 -2 233 22
T 
1
LANG:1 13 Save Settings
"main()
{
	string ref = $sRefName;

	setValue(ref+\"trend.refreshTrend\", \"text\", \"FALSE\");
	this.enabled = FALSE;

	fwTrending_pageSavePlotSettings(ref);

	delay(0,REFRESH_DELAY);
	setValue(ref+\"trend.refreshTrend\", \"text\", \"TRUE\");
	this.enabled = TRUE;
}" 0
 E E E
26 26
"OtherCascadeButton"
""
1 10 10 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
4 0 0 0 0 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
229 -2 270 22
0 1
LANG:1 5 Other
"" 0 0 0 0 0
10 1 1
LANG:1 13 Zoomed Window
"zoom" 0 0 0 0 0
1 1
LANG:1 21 Export plot to CSV...
"export" 0 0 0 0 0
1 1
LANG:1 10 Print plot
"print" 0 0 0 0 0
1 1
LANG:1 3 ___
"new_sep" 0 0 0 0 0
1 1
LANG:1 6 Legend
"Legends" 0 0 0 0 0
1 1
LANG:1 8 Controls
"Controls" 0 0 0 0 0
1 1
LANG:1 4 Grid
"grid" 0 0 0 0 0
1 1
LANG:1 3 ___
"new_sep" 0 0 0 0 0
1 1
LANG:1 18 Plot configuration
"Plot configuration" 0 0 0 0 0
1 1
LANG:1 24 Save plot settings as...
"saveas" 0 0 0 0 0
E "bool controls = false;

main(string id) {
	string trendRunning;
	bool grid, isLog, legend, isRunning, enabledState, isOk;
	string minForLog;
	string maxPercentageForLog;
	dyn_bool axii = makeDynBool(false, false, false, false, false,false,false,false);
	string tempAxii, temp;
	dyn_float df;
	dyn_string ds, split, dsParameters, split2;
	string activeTrend, tempString;
	string ref = $sRefName, currentParameterValues;
	shape activeTrendShape, standardTrendShape, logTrendShape;
	dyn_string dsTemp, tempColour, exceptionInfo;
	dyn_string panelsList, plotShapes, plotData, modifiedPlotData, oldCurves, curvesVisible, parameters;
	dyn_dyn_string extendedPlotData;
	int i, length;
	
	string sDpName, title, proposedName;
	int currentTimeSettings;

	this.enabled(false);
				
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, plotShapes, plotData, exceptionInfo, FALSE);

// get the log and standard trend shape
	activeTrendShape = getShape(plotShapes[fwTrending_ACTIVE_TREND_NAME]);
	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

// get minforlog and maxpercentageforlog
	minForLog = plotData[fwTrending_PLOT_OBJECT_EXT_MIN_FOR_LOG];
	maxPercentageForLog = plotData[fwTrending_PLOT_OBJECT_EXT_MAX_PERCENTAGE_FOR_LOG];
	
// get the active trend shape
	activeTrendShape = getShape(plotShapes[fwTrending_ACTIVE_TREND_NAME]);
	
	switch(id) {
		case \"print\" : 
			printPanel(myModuleName(), myPanelName());
			break;
		case \"zoom\" : {
// open the zoom window
// get all the param and open the zoom window with the $param, the $sDpName and $sRefName are set to \"\" (only one plot)
// get the list of DPE
			dynAppend(dsParameters, \"$dsCurveDPE:\"+plotData[fwTrending_PLOT_OBJECT_DPES]);

// get the legend and cut it if too big, because the zoomed window contains the fwTrending/fwTrendingMultiplePlotCaption.pnl
			split = strsplit(plotData[fwTrending_PLOT_OBJECT_LEGENDS], \";\");		
			temp = \"\";
			for(i=1;i<=fwTrending_TRENDING_MAX_CURVE;i++) {
				if(strlen(split[i]) >= fwTrending_ZOOMED_WINDOW_MAX_LEGEND_SIZE) {
// legend too big to for the zoomed window just take the leaf DPE.
					split2=strsplit(split[i], \".\");
					temp+=split2[dynlen(split2)]+\";\";
				}
				else
					temp+=split[i]+\";\";
			}
			dynAppend(dsParameters, \"$dsCurveLegend:\"+temp);

// get the tooltiptext
			dynAppend(dsParameters, \"$dsCurveToolTipText:\"+plotData[fwTrending_PLOT_OBJECT_EXT_TOOLTIPS]);

// get the curves ranges, format min:max
			dynAppend(dsParameters, \"$dsCurveRange:\"+plotData[fwTrending_PLOT_OBJECT_EXT_MIN_MAX_RANGE]);

// get the colors
			dynAppend(dsParameters, \"$dsCurveColor:\"+plotData[fwTrending_PLOT_OBJECT_COLORS]);
			dynAppend(dsParameters, \"$sForeColor:\"+plotData[fwTrending_PLOT_OBJECT_FORE_COLOR]);
			dynAppend(dsParameters, \"$sBackColor:\"+plotData[fwTrending_PLOT_OBJECT_BACK_COLOR]);

// get the DPE unit
			dynAppend(dsParameters, \"$dsUnit:\"+plotData[fwTrending_PLOT_OBJECT_EXT_UNITS]);

// get the curve type
			dynAppend(dsParameters, \"$dsCurvesType:\"+plotData[fwTrending_PLOT_OBJECT_CURVE_TYPES]);
			
// get the curve scale visibility state
			dynAppend(dsParameters, \"$dsCurveScaleVisible:\"+plotData[fwTrending_PLOT_OBJECT_AXII]);

// get the curve visibility
			dynAppend(dsParameters, \"$dsCurveVisible:\"+plotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN]);

			dynAppend(dsParameters, \"$bShowGrid:\"+plotData[fwTrending_PLOT_OBJECT_GRID]);

			dynAppend(dsParameters, \"$bShowLegend:\"+plotData[fwTrending_PLOT_OBJECT_LEGEND_ON]);

// get minforlog and maxpercentageforlog
			dynAppend(dsParameters, \"$fMinForLog:\" + plotData[fwTrending_PLOT_OBJECT_EXT_MIN_FOR_LOG]);
			dynAppend(dsParameters, \"$fMaxPercentageForLog:\" + plotData[fwTrending_PLOT_OBJECT_EXT_MAX_PERCENTAGE_FOR_LOG]);

// $sRefName is set to \"\" because in the zoomed window there is only one plot and one caption
			dynAppend(dsParameters, \"$sRefName:\");

// $sDpName is set to \"\", no possibility to configure or save the trend settings
			getValue(ref+\"trend.dpNameText\", \"text\", sDpName);
			dynAppend(dsParameters, \"$sDpName:\");// + sDpName);

// get if log trend or not
			dynAppend(dsParameters, \"$bTrendLog:\"+plotData[fwTrending_PLOT_OBJECT_IS_LOGARITHMIC]);

// get the current time range			
			dynAppend(dsParameters, \"$sTimeRange:\"+ plotData[fwTrending_PLOT_OBJECT_TIME_RANGE]);
			
// get the zoom window title
			strreplace(plotData[fwTrending_PLOT_OBJECT_TITLE], \"\\\\_\", \" \");
			if(plotData[fwTrending_PLOT_OBJECT_TITLE]==\"\")
			{ 
				plotData[fwTrending_PLOT_OBJECT_TITLE] = \"Trend Zoom\";
			}
			dynAppend(dsParameters, \"$ZoomWindowTitle:\"+plotData[fwTrending_PLOT_OBJECT_TITLE]);

			getValue(ref+\"trend.parameterValues\", \"text\", currentParameterValues);
			dynAppend(dsParameters, \"$templateParameters:\"+currentParameterValues);

// open the zoomed window
			ChildPanelOnCentral(\"fwTrending/fwTrendingZoomedWindow.pnl\", \"Zoomed Window: \" + plotData[fwTrending_PLOT_OBJECT_TITLE], 
				dsParameters
			);
			break;
		}
		case \"export\": {
			getValue(ref+\"trend.parameterValues\", \"text\", currentParameterValues);
			fwTrending_pageExportTrend(makeDynString(ref), currentParameterValues);
			break;
		}
		case \"Legends\":
			tempString = plotData[fwTrending_PLOT_OBJECT_LEGEND_ON];
			if((tempString == \"TRUE\") || (tempString == TRUE))
				fwTrending_legendOnOff(ref, FALSE, ref + \".\", exceptionInfo);
			else
				fwTrending_legendOnOff(ref, TRUE, ref + \".\", exceptionInfo);
// end 
			break;
		case \"grid\":
			tempString = plotData[fwTrending_PLOT_OBJECT_GRID];
			if((tempString == \"TRUE\") || (tempString == TRUE))
				fwTrending_gridOnOff(ref, FALSE, ref + \".\", exceptionInfo);
			else
				fwTrending_gridOnOff(ref, TRUE, ref + \".\", exceptionInfo);
			break;
		case \"Controls\":
			if(controls)	
				this.textItem(5, \"Controls\");
			else
				this.textItem(5, \"Controls\" + \"  *\");
			controls = !controls;
// added by Herve 
//			activeTrendShape.manageCommands(controls);
			standardTrendShape.manageCommands(controls);
			logTrendShape.manageCommands(controls);
// end 
			//setValue(\"TrendRef.normalTrend\", \"manageCommands\", controls);
			break;
		case \"Plot configuration\":
			getValue(ref+\"trend.dpNameText\", \"text\", sDpName);

			fwTrending_convertStringToDyn(plotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN], curvesVisible, exceptionInfo); 
			_fwTrending_switchCurvesHiddenVisible(curvesVisible, exceptionInfo);
			fwTrending_convertDynToString(curvesVisible, plotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN], exceptionInfo); 

			fwDevice_getDefaultConfigurationPanels(fwTrending_PLOT, panelsList, exceptionInfo);

			ChildPanelOnModalReturn(panelsList[1] + \".pnl\",\"Plot Configuration\",
				makeDynString(\"$Command:onlineedit\", \"$sDpName:\" + sDpName,
											\"$dsPlotData:\" + plotData, \"$dsShowButtons:\" + makeDynString(\"ok\", \"cancel\")),0,0, df, ds);

			if(ds[1] != \"Cancel\")
			{
				strreplace(ds[3], \" | \", \"|\");
				modifiedPlotData = strsplit(ds[3], \"|\");
				for(i=1; i<=fwTrending_SIZE_PLOT_OBJECT; i++)
				{
					modifiedPlotData[i] = strltrim(modifiedPlotData[i], \" \");
					modifiedPlotData[i] = strrtrim(modifiedPlotData[i], \" \");
				}

				fwTrending_convertStringToDyn(modifiedPlotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN], curvesVisible, exceptionInfo); 
				_fwTrending_switchCurvesHiddenVisible(curvesVisible, exceptionInfo);
				fwTrending_convertDynToString(curvesVisible, modifiedPlotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN], exceptionInfo); 

				setValue(ref+\"trend.trendInfo\", \"items\", modifiedPlotData);

				fwTrending_getRuntimePlotDataWithExtendedObject(ref, trendRunning, plotShapes, extendedPlotData, exceptionInfo, FALSE);
				activeTrendShape = getShape(plotShapes[fwTrending_ACTIVE_TREND_NAME]);

				fwTrending_convertStringToDyn(plotData[fwTrending_PLOT_OBJECT_DPES], oldCurves, exceptionInfo); 
				length = dynlen(oldCurves);
				if(length > fwTrending_TRENDING_MAX_CURVE)
					length = fwTrending_TRENDING_MAX_CURVE;

				for(i=1; i<=length; i++)
				{
					if(oldCurves[i] != extendedPlotData[fwTrending_PLOT_OBJECT_DPES][i])
					{
						activeTrendShape.disconnectDirectly(\"curve_\" + i);
						activeTrendShape.curveRemoveData(\"curve_\" + i, getCurrentTime());
					}
				}

				if((extendedPlotData[fwTrending_PLOT_OBJECT_IS_LOGARITHMIC][1] == \"TRUE\") || (extendedPlotData[fwTrending_PLOT_OBJECT_IS_LOGARITHMIC][1] == TRUE))
				{
					isLog = TRUE;					
					setValue(ref+\"trend.activeTrendText\", \"text\", plotShapes[fwTrending_LOG_TREND_NAME]);
					plotShapes[fwTrending_ACTIVE_TREND_NAME] = plotShapes[fwTrending_LOG_TREND_NAME];
				}
				else
				{
					isLog = FALSE;
					setValue(ref+\"trend.activeTrendText\", \"text\", plotShapes[fwTrending_LINEAR_TREND_NAME]);
					plotShapes[fwTrending_ACTIVE_TREND_NAME] = plotShapes[fwTrending_LINEAR_TREND_NAME];
				}
														
				getValue(ref+\"trend.parameterValues\", \"text\", currentParameterValues);
				fwTrending_checkAndGetAllTemplateParameters(ref, extendedPlotData, fwTrending_PLOT, currentParameterValues, exceptionInfo, TRUE);
				setValue(ref+\"trend.parameterValues\", \"text\", currentParameterValues);

				_fwTrending_evaluateTemplate(currentParameterValues, extendedPlotData[fwTrending_PLOT_OBJECT_DPES], exceptionInfo);    
				_fwTrending_evaluateTemplate(currentParameterValues, extendedPlotData[fwTrending_PLOT_OBJECT_LEGENDS], exceptionInfo);    
				_fwTrending_evaluateTemplate(currentParameterValues, extendedPlotData[fwTrending_PLOT_OBJECT_EXT_TOOLTIPS], exceptionInfo);    
	
				fwTrending_convertUnicosDpeListToPvssDpeList(extendedPlotData[fwTrending_PLOT_OBJECT_DPES], extendedPlotData[fwTrending_PLOT_OBJECT_DPES], exceptionInfo);

				getValue(\"saveSettings\", \"enabled\", enabledState);
				fwTrending_initTrendWithObject(ref, plotShapes[fwTrending_ACTIVE_TREND_NAME], plotShapes, extendedPlotData, trendRunning, TRUE, exceptionInfo, TRUE);
				fwTrending_showStandardTrend(!isLog, plotShapes[fwTrending_LINEAR_TREND_NAME], plotShapes[fwTrending_LOG_TREND_NAME]);			
				fwTrending_initControlTrendButtons(extendedPlotData[fwTrending_PLOT_OBJECT_TIME_RANGE][1], ref, sDpName, extendedPlotData[fwTrending_PLOT_OBJECT_IS_LOGARITHMIC][1]);
				setValue(\"saveSettings\", \"enabled\", enabledState);
			}				
			break;
		case \"saveas\":
			setValue(ref+\"trend.refreshTrend\", \"text\", \"FALSE\");
			getValue(ref+\"trend.dpNameText\", \"text\", sDpName);
			proposedName = dpGetAlias(sDpName + \".\");
			if(proposedName == \"\")
				proposedName = dpSubStr(sDpName, DPSUB_DP);
			if(proposedName == \"\")
				proposedName = plotData[fwTrending_PLOT_OBJECT_TITLE];

			ChildPanelOnCentralReturn(\"fwTrending/fwTrendingSaveAsSelector.pnl\", \"Save plot settings as...\",
																	makeDynString(\"$sDpType:\" + fwTrending_PLOT, \"$sProposedName:\" + proposedName), df, ds);
			if(ds[1] == \"ok\")
				fwTrending_saveCurrentSettings(ref, ds[2], fwTrending_PLOT, TRUE, TRUE, exceptionInfo, TRUE);		

			delay(0,REFRESH_DELAY);
			setValue(ref+\"trend.refreshTrend\", \"text\", \"TRUE\");
			break;
	}
	if(dynlen(exceptionInfo)>0)
		fwExceptionHandling_display(exceptionInfo);
		
	this.enabled(true);

}

" 0
 0 
13 27
"resetTrendZoomButton"
""
1 268 0 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
5 1 0 0 82 0
EE E
0
1
LANG:1 37 Reset zooming on Y axis and Time axis
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
266 -2 293 22
T 
1
LANG:1 3 1:1
"main()
{
	string ref = $sRefName;

	fwTrending_trendUnzoom(ref);
}" 0
 E E E
14 35
"rigthArrow"
""
1 400 1 E E E 1 E 1 E N "FwTrendingFaceplateForeground" E N "FwTrendingFaceplateBackground" E E
 E E
7 0 0 0 0 0
EE E
1
1
LANG:1 0 
0
1
LANG:1 119 -microsoft windows-Courier New-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-12,0,0,0,400,0,0,0,0,3,2,1,49,Courier New
0 ""
398 -1 424 21
2 "s" 0 0 0 0 0 0 
E
E
E
14 36
"leftArrow"
""
1 291 1 E E E 1 E 1 E N "FwTrendingFaceplateForeground" E N "FwTrendingFaceplateBackground" E E
 E E
8 0 0 0 0 0
EE E
1
1
LANG:1 0 
0
1
LANG:1 119 -microsoft windows-Courier New-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-12,0,0,0,400,0,0,0,0,3,2,1,49,Courier New
0 ""
289 -1 314 21
2 "s" 0 0 0 0 0 0 
E
E
E
14 37
"curvesTimeRange"
""
1 313 2 E E E 1 E 1 E N "FwTrendingFaceplateForeground" E N "FwTrendingFaceplateBackground" E E
 E E
9 0 0 0 0 0
EE E
1
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-11,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
311 0 401 21
2 "15s" 15 0 0 0 0 0 
E
E
E
13 42
"xzoomin"
""
1 10 25 E E E 0 E 0 E N "_3DText" E N "_3DFace" E E
 E E
11 1 0 0 54 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-12,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
8 23 82 47
T 
1
LANG:1 7 xzoomin
"main()
{
	string activeTrend, trendRunning;
	string ref = $sRefName;
	shape standardTrendShape, logTrendShape;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);

	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

	standardTrendShape.trendTimePlus();
	standardTrendShape.trendRefresh();

	logTrendShape.trendTimePlus();
	logTrendShape.trendRefresh();
}" 0
 E E E
13 43
"xzoomout"
""
1 10 45 E E E 0 E 0 E N "_3DText" E N "_3DFace" E E
 E E
14 1 0 0 52 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-12,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
8 43 82 67
T 
1
LANG:1 8 xzoomout
"main()
{
	string activeTrend, trendRunning;
	string ref = $sRefName;
	shape standardTrendShape, logTrendShape;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);

	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

	standardTrendShape.trendTimeMinus();
	standardTrendShape.trendRefresh();

	logTrendShape.trendTimeMinus();
	logTrendShape.trendRefresh();
}" 0
 E E E
13 44
"yzoomin"
""
1 80 25 E E E 0 E 0 E N "_3DText" E N "_3DFace" E E
 E E
15 1 0 0 50 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-12,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
78 23 152 47
T 
1
LANG:1 7 yzoomin
"main()
{
	string activeTrend, trendRunning;
	string ref = $sRefName;
	shape standardTrendShape, logTrendShape;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);

	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

	standardTrendShape.trendValuePlus();
	standardTrendShape.trendRefresh();

	logTrendShape.trendValuePlus();
	logTrendShape.trendRefresh();
}" 0
 E E E
13 45
"yzoomout"
""
1 80 45 E E E 0 E 0 E N "_3DText" E N "_3DFace" E E
 E E
16 1 0 0 56 0
EE E
0
1
LANG:1 0 
0
1
LANG:1 107 -microsoft windows-Arial-normal-r-normal-*-*-110-100-100-*-*-iso8859-1|-12,0,0,0,400,0,0,0,0,3,2,1,34,Arial
0 ""
78 43 152 67
T 
1
LANG:1 8 yzoomout
"main()
{
	string activeTrend, trendRunning;
	string ref = $sRefName;
	shape standardTrendShape, logTrendShape;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);

	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

	standardTrendShape.trendRefresh();
	standardTrendShape.trendValueMinus();

	logTrendShape.trendRefresh();
	logTrendShape.trendValueMinus();
}" 0
 E E E
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0