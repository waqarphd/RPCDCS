V 10
1
LANG:1 8 (NoName)
PANEL,394 138 1270 835 N "unSynopticBackground" 0
"main()
{
/*	test_initTrends(\"\", \"un-Q_180-ATVAC-AnaDig-00002\", 
								  makeDynString(\"PosSt\",\"OutOVSt\", \"\",
								  \"\", \"\", \"\", \"\", \"\"),
								  makeDynString(\"PosSt\",\"PosSt\",\"\",
								  \"\", \"\", \"\", \"\", \"\"),
								  makeDynString(\"unDisplayValue_Status\",\"unDisplayValue_Output\",\"\",
								  \"\", \"\", \"\", \"\", \"\"), 10, 10,
								  makeDynString(true, true, false, false,false,false,false,false),
								  makeDynString(false, true, false, false,false,false,false,false), false, 600,
								  0, 5, \"\");



	test_initTrends(\"\", \"un-Q_180-ATVAC-Controller-00001\", 
//									makeDynString(\"MV\",\"AtSPo\",\"OutOVSt\"),
//									makeDynString(\"AtSPo\",\"AtSPo\",\"OutOVSt\"),
//									makeDynString(\"unDisplayValue_Status\", \"unDisplayValue_Request\",\"unDisplayValue_Output\"),
									makeDynString(\"MV\",\"AtSPo\",\"OutOVSt\",
												\"\", \"\", \"\", \"\", \"\"),
									makeDynString(\"AtSPo\",\"AtSPo\",\"OutOVSt\",
												\"\", \"\", \"\", \"\", \"\"),
									makeDynString(\"unDisplayValue_Status\", \"unDisplayValue_Request\",\"unDisplayValue_Output\",
												\"\", \"\", \"\", \"\", \"\"),
									0, 0,
									makeDynString(true, false, true, true,true,true,true,true),
									makeDynString(false, false, false, false,false,false,false,false), true,
									28800,
									0.1, 10, \"dl\");
*/

	test_initTrends(\"\", \"un-Q_180-ATVAC-Controller-00001\", 
//									makeDynString(\"MV\",\"AtSPo\",\"OutOVSt\"),
//									makeDynString(\"AtSPo\",\"AtSPo\",\"OutOVSt\"),
//									makeDynString(\"unDisplayValue_Status\", \"unDisplayValue_Request\",\"unDisplayValue_Output\"),
									makeDynString(\"MV\",\"AtSPo\",\"OutOVSt\",
												\"MPosRSt\", \"AuPosRSt\", \"AtSPoL\", \"AtSPoH\", \"AtOutOH\"),
									makeDynString(\"AtSPo\",\"AtSPo\",\"OutOVSt\",
												\"AtSPo\",\"AtSPo\",\"OutOVSt\", \"AtSPo\",\"AtSPo\"),
									makeDynString(\"unDisplayValue_Status\", \"unDisplayValue_Request\",\"unDisplayValue_Output\",
												\"\", \"\", \"\", \"\", \"\"),
									0, 0,
									makeDynString(false, true, true, true,false,true,true,false),
									makeDynString(false, false, false, false,false,false,false,false), true,
									28800,
									0.1, 10, \"pl1\");

/*
	test_initTrends(\"\", \"un-Q_180-ATVAC-Controller-00001\", 
//									makeDynString(\"MV\",\"AtSPo\",\"OutOVSt\"),
//									makeDynString(\"AtSPo\",\"AtSPo\",\"OutOVSt\"),
//									makeDynString(\"unDisplayValue_Status\", \"unDisplayValue_Request\",\"unDisplayValue_Output\"),
									makeDynString(\"MV\",\"AtSPo\",\"OutOVSt\",
												\"MPosRSt\", \"AuPosRSt\", \"AtSPoL\", \"AtSPoH\", \"AtOutOH\"),
									makeDynString(\"AtSPo\",\"AtSPo\",\"OutOVSt\",
												\"AtSPo\",\"AtSPo\",\"OutOVSt\", \"AtSPo\",\"AtSPo\"),
									makeDynString(\"unDisplayValue_Status\", \"unDisplayValue_Request\",\"unDisplayValue_Output\",
												\"\", \"\", \"\", \"\", \"\"),
									500, 300,
									makeDynString(false, true, true, true,false,true,true,false),
									makeDynString(false, false, false, false,false,false,false,false), true,
									28800,
									0.1, 10, \"pl1\");
*/
}
test_initTrends(string ref, string sDpName, dyn_string dsAnalog, dyn_string dsRange, dyn_string dsColor, int x, int y,
				dyn_bool bVisible, dyn_bool bSVisible, bool isLog, int timeRange, float min, float perc, string dp)
{
	string deviceName, sRangeMin, sRangeMax;
	float fRangeMin, fRangeMax;
	int iRangeType, iRes, position, i, length;
	dyn_string dsDpe, dsCurveLegend, dsCurveColor, dsCurveRange, dsCurveDPE, dsCurveParameters;
	dyn_float dfMax, dfMin;
	string alias = dpGetAlias(sDpName+\".\");
	string systName = getSystemName();
	string deviceSystemName, deviceAlias, deviceDescription;
	dyn_string dpeUnit=makeDynString(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\");
	string curveDPE, curveLegend, curveToolTipText, curveColor, curveRange, curveUnit, curveVisibility, axiiText, curvesType;
	

	// 1. Init : get range configuration
	deviceName = unGenericDpFunctions_getDpName(sDpName);
	unGenericDpFunctions_getFaceplateRange(deviceName, dsDpe, dfMax, dfMin);
	deviceSystemName = unGenericDpFunctions_getSystemName(sDpName);
	deviceAlias = unGenericDpFunctions_getAlias(sDpName);
	deviceDescription = unGenericDpFunctions_getDescription(deviceName);

	// 2. For each value to plot
	length = dynlen(dsAnalog);
	while (dynlen(dsRange)<=length)
		{
		dynAppend(dsRange, \"\");
		}
	while (dynlen(dsColor)<=length)
		{
		dynAppend(dsColor, \"\");
		}
	for(i=1;i<=length;i++)
		{
		if (dpExists(deviceName + \".ProcessInput.\" + dsAnalog[i]))	// Good value to plot
			{
			dynAppend(dsCurveDPE, deviceName + \".ProcessInput.\" + dsAnalog[i] + \":_online.._value\");
			dpeUnit[i] = dpGetUnit(deviceName + \".ProcessInput.\" + dsAnalog[i]);
			dynAppend(dsCurveLegend, deviceSystemName+deviceAlias+\".\"+dsAnalog[i]);
			position = dynContains(dsDpe, dsAnalog[i]);
			if (position > 0)								// A config exists for this dpe
				{
				sRangeMin = dfMin[position];
				sRangeMax = dfMax[position];
				}
			else											// Search for pv_range
				{
				if (dsRange[i] != \"\")
					{
					if (dpExists(deviceName + \".ProcessInput.\" + dsRange[i]))
						{
						dpGet(deviceName + \".ProcessInput.\" + dsRange[i] + \":_pv_range.._type\", iRangeType);
						if (iRangeType == DPCONFIG_MINMAX_PVSS_RANGECHECK)
							{
							iRes = dpGet(deviceName + \".ProcessInput.\" + dsRange[i] + \":_pv_range.._min\", fRangeMin,
										 deviceName + \".ProcessInput.\" + dsRange[i] + \":_pv_range.._max\", fRangeMax);
							}
						}
					else
						{
						iRangeType = DPCONFIG_NONE;
						}
					}
				else
					{
					iRangeType = DPCONFIG_NONE;
					}
				if ((iRangeType != DPCONFIG_MINMAX_PVSS_RANGECHECK) || (iRes < 0))
					{
					fRangeMin = UN_RANGE_MIN_DEFAULT;		// Default values
					fRangeMax = UN_RANGE_MAX_DEFAULT;
					}
				sRangeMin = fRangeMin;
				sRangeMax = fRangeMax;
				}
			dynAppend(dsCurveRange, sRangeMin + \":\" + sRangeMax);
			dynAppend(dsCurveColor, dsColor[i]);
			}
		else
			{
				dsCurveLegend[i] = \"\";
				dsCurveColor[i] = \"\";
				dsCurveRange[i] = \"\";
				dsCurveDPE[i] = \"\";
			}
		}

	// 3. Open trend panel
	while (dynlen(dsCurveLegend)<=UN_FACEPLATE_TRENDS_MAX)
		{
		dynAppend(dsCurveLegend, \"\");
		}
	while (dynlen(dsCurveRange)<=UN_FACEPLATE_TRENDS_MAX)
		{
		dynAppend(dsCurveRange, \"\");
		}
	while (dynlen(dsCurveDPE)<=UN_FACEPLATE_TRENDS_MAX)
		{
		dynAppend(dsCurveDPE, \"\");
		}
	while (dynlen(dsCurveColor)<=UN_FACEPLATE_TRENDS_MAX)
		{
		dynAppend(dsCurveColor, \"\");
		}


/* new added by Herve */
	for(i=1;i<=UN_FACEPLATE_TRENDS_MAX;i++)
		{
			curveDPE += dsCurveDPE[i]+\";\";
			if(dsAnalog[i] != \"\")
				curveVisibility +=true+\";\";
			else
				curveVisibility +=false+\";\";
			curveRange += dsCurveRange[i]+\";\";
			curveLegend += dsCurveLegend[i]+\";\";
			curveToolTipText += deviceSystemName+deviceAlias+\".\"+dsCurveLegend[i]+\" [\"+dpeUnit[i]+\"] \"+deviceDescription+\";\";
			curveUnit += dpeUnit[i]+\";\";
			axiiText += false+\";\";
			curvesType += fwTrending_PLOT_TYPE_STEPS+\";\";
			curveColor += dsCurveColor[i]+\";\";
		}
	for(i=UN_FACEPLATE_TRENDS_MAX;i<=fwTrending_TRENDING_MAX_CURVE;i++)
		{
			curveDPE += \";\";
			curveVisibility +=false+\";\";
			curveRange += \";\";
			curveLegend += \";\";
			curveToolTipText += \";\";
			curveUnit += \";\";
			axiiText += false+\";\";
			curvesType += fwTrending_PLOT_TYPE_STEPS+\";\";
			curveColor += \";\";
		}		

		dynAppend(dsCurveParameters, \"$dsCurveDPE:\"+curveDPE);
		dynAppend(dsCurveParameters, \"$dsCurveLegend:\"+curveLegend);
		dynAppend(dsCurveParameters, \"$dsCurveToolTipText:\"+curveToolTipText);
		dynAppend(dsCurveParameters, \"$dsCurveColor:\"+curveColor);
		dynAppend(dsCurveParameters, \"$dsCurveRange:\"+curveRange);
		dynAppend(dsCurveParameters, \"$dsUnit:\"+curveUnit);
		dynAppend(dsCurveParameters, \"$dsCurveVisible:\"+curveVisibility);
		dynAppend(dsCurveParameters, \"$dsCurveScaleVisible:\"+axiiText);
		dynAppend(dsCurveParameters, \"$dsCurvesType:\"+curvesType);
/* end */


/*	for(i=1;i<=8;i++)
		{
		dynAppend(dsCurveParameters, \"$CurveDPE\" + i + \":\" + dsCurveDPE[i]);
		dynAppend(dsCurveParameters, \"$CurveRange\" + i + \":\" + dsCurveRange[i]);
		dynAppend(dsCurveParameters, \"$CurveLegend\" + i + \":\" + systName+alias+\".\"+dsCurveLegend[i]);
		dynAppend(dsCurveParameters, \"$CurveToolTipText\" + i + \":\" + systName+alias+\".\"+dsCurveLegend[i]+\" [\"+dpeUnit[i]+\"]\");
		dynAppend(dsCurveParameters, \"$sUnit\" + i + \":\"+dpeUnit[i]);
		dynAppend(dsCurveParameters, \"$CurveColor\" + i + \":\" + dsCurveColor[i]);
		dynAppend(dsCurveParameters, \"$sCurveVisible\" + i + \":\"+bVisible[i]);
		dynAppend(dsCurveParameters, \"$sCurveScaleVisible\" + i + \":\"+bSVisible[i]);
		dynAppend(dsCurveParameters, \"$sCurvesType\" + i + \":\"+fwTrending_PLOT_TYPE_STEPS);	
		}
*/
		dynAppend(dsCurveParameters, \"$ZoomWindowTitle:\" + unGenericDpFunctions_getAlias(deviceName) + \",\" + unGenericDpFunctions_getDescription(deviceName));
		dynAppend(dsCurveParameters, \"$sRefName:\"+ref);
		dynAppend(dsCurveParameters, \"$sDpName:\"+dp);
		dynAppend(dsCurveParameters, \"$fMinForLog:\"+min);
		dynAppend(dsCurveParameters, \"$fMaxPercentageForLog:\"+perc);
		dynAppend(dsCurveParameters, \"$bTrendLog:\"+isLog);
		dynAppend(dsCurveParameters, \"$sTimeRange:\"+ timeRange);
		
//	ChildPanelOnCentral(\"objects/fwTrending/fwTrendingFaceplate.pnl\", \"ll\", dsCurveParameters );
//DebugN(dsCurveParameters);
	addSymbol(myModuleName(), myPanelName(), \"fwTrending/fwTrendingTrendControl.pnl\", ref, dsCurveParameters,
			0, 0, 1.0, 1.0, 1.0);

	addSymbol(myModuleName(), myPanelName(), \"fwTrending/fwTrendingOnePlot.pnl\", ref+\"trend\", dsCurveParameters,
			0, 20, 1.0, 1.0, 1.0);
//DebugN(ref+\".trendCaption\");

//delay(10);

}
" 0
EE E E 1 -1 -1 0  -1 -1
"" 0 1
EE 2
"CBRef""1"
"EClose"E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0