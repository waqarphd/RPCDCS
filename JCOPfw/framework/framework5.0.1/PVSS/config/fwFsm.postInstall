string proj_path, fsm_path, pvss_path, pvss_version;

main()
{
	string conf_path;
	int pos, ok, restart;

	addGlobal("os",STRING_VAR);
/*
	os = getenv("OSTYPE");
	if(strpos(os,"linux") >= 0)
		os = "Linux";
*/
	if(_UNIX)
		os = "Linux";
	conf_path = getPath(CONFIG_REL_PATH, "config");
	pos = strpos(conf_path,"/config/config");
	proj_path = substr(conf_path, 0, pos);
	DebugN("fwFSM.postInstall: project: " + proj_path);
		
	if(get_paths(conf_path) == 3)
	{
		DebugN("fwFSM.postInstall: " + fsm_path);
		copy_files();
		
		// not need to import dps, the installation tool takes care of it
		//import_dps();
		
		install_version();
	}
//	fwInstallation_appendManager(0,"fwFsmSrvr","WCCOActrl","always",30,3,5,"fwFsmSrvr");
  fwInstallationManager_append(0,"fwFsmSrvr","WCCOActrl","always",30,3,5,"fwFsmSrvr");
/*
	if(os == "Linux")
		fwInstallation_appendManager(0,"FW","WCCOAui","manual",5,3,5,
		"-p fwDeviceEditorNavigator/fwDeviceEditorNavigator.pnl -iconBar -menuBar");
	else
		fwInstallation_appendManager(0,"FW","PVSS00NV","manual",5,3,5,
		"-p fwDeviceEditorNavigator/fwDeviceEditorNavigator.pnl -iconBar -menuBar");
*/
	restart = 1;
	if(dpExists("ToDo.action"))
	{
		string action, status;

		dpGet("ToDo.action", action);
		if(action == "Installing")
			restart = 0;		
		dpSet("ToDo.status","");
	}
	if(restart)
	{
		DebugTN("fwFsm.postInstall: Restarting WCCOAdim Managers");
//		fwInstallation_executeAllManagerReconfigurationActions();
    fwInstallationManager_executeAllReconfigurationActions();
	}
	else
		DebugTN("fwFsm.postInstall: done");
}

copy_files()
{
	int ok;

	ok = copyAllFiles(fsm_path + "/smi", proj_path + "/smi");
	if(ok)
		DebugN("fwFSM.postInstall: SMI files copied");
	else
		DebugN("fwFSM.postInstall: failed copying SMI files");
/*		
	ok = copyAllFiles(fsm_path + "/panels/fwFSMuser", proj_path + "/panels/fwFSMuser");
	if(ok)
		DebugN("fwFSM.postInstall: user panels copied");
	else
		DebugN("fwFSM.postInstall: failed copying user panels");
*/
	ok = copyFile(fsm_path + "/panels/fwFSMuser/fwUi.pnl", proj_path + "/panels/fwFSMuser/fwUi.pnl");
	if(ok)
		DebugN("fwFSM.postInstall: fwUi.pnl copied");
	else
		DebugN("fwFSM.postInstall: failed copying fwUi.pnl");
	ok = copyFile(fsm_path + "/panels/fwFSMuser/logo.pnl", proj_path + "/panels/fwFSMuser/logo.pnl");
	if(ok)
		DebugN("fwFSM.postInstall: logo.pnl copied");
	else
		DebugN("fwFSM.postInstall: failed copying logo.pnl");
	if(!isdir(getPath(SCRIPTS_REL_PATH)+"/fsm"))
		mkdir(getPath(SCRIPTS_REL_PATH)+"/fsm");
}


install_version()
{
	const int FILE_SOURCE = 1, FILE_TARGET = 2;
	int ok, i;
//	dyn_dyn_string windowsFiles, linuxFiles, filesToProcess;
	string path;
	dyn_string windowsOldFiles, linuxOldFiles, filesToProcess;
	
	dynAppend(windowsOldFiles, proj_path + "/bin/WCCOAsmi.exe");
	dynAppend(windowsOldFiles, proj_path + "/bin/dim.dll");
	dynAppend(windowsOldFiles, proj_path + "/bin/smirtl.dll");
	dynAppend(windowsOldFiles, proj_path + "/bin/smiuirtl.dll");
	dynAppend(windowsOldFiles, proj_path + "/bin/msvcrtd.dll");
	dynAppend(windowsOldFiles, proj_path + "/bin/msvcp60d.dll");
/*
	windowsFiles[1] = makeDynString(fsm_path + "/bin/PVSS00smi" + pvss_version + ".exe", 	
		proj_path + "/bin/PVSS00smi.exe");
	windowsFiles[2] = makeDynString(fsm_path + "/bin/dim.dll",
		proj_path + "/bin/dim.dll");
	windowsFiles[3] = makeDynString(fsm_path + "/bin/smirtl.dll",
		proj_path + "/bin/smirtl.dll");
	windowsFiles[4] = makeDynString(fsm_path + "/bin/smiuirtl.dll",
		proj_path + "/bin/smiuirtl.dll");
	windowsFiles[5] = makeDynString(fsm_path + "/bin/msvcrtd.dll",
		proj_path + "/bin/msvcrtd.dll");
	windowsFiles[6] = makeDynString(fsm_path + "/bin/msvcp60d.dll",
		proj_path + "/bin/msvcp60d.dll");

	linuxFiles[2] = makeDynString(fsm_path + "/bin/PVSS00smi" + pvss_version+ ".sh",
		proj_path + "/bin/PVSS00smi");

	if(fsm_path != proj_path+"/")
	{
		linuxFiles[1] = makeDynString(fsm_path + "/bin/PVSS00smi" + pvss_version, 
			proj_path + "/bin/PVSS00smi" + pvss_version);
		linuxFiles[3] = makeDynString(fsm_path + "/bin/libwklin.so.4", 
			proj_path + "/bin/libwklin.so.4");
	}
*/								
	dynAppend(linuxOldFiles, proj_path + "/bin/WCCOAsmi");
	dynAppend(linuxOldFiles, proj_path + "/bin/WCCOAsmi" + pvss_version);
	dynAppend(linuxOldFiles, proj_path + "/bin/libwklin.so.4");

	if(os == "Linux")
	{
		filesToProcess = linuxOldFiles;
	}
	else
	{
		filesToProcess = windowsOldFiles;
	}

	if(fsm_path != proj_path)
	{
		for(i = 1; i <= dynlen(filesToProcess); i++)
		{
//DebugN("****************", i, filesToProcess[i], ok);
			if(access(filesToProcess[i], F_OK) == 0)
				ok = moveFile(filesToProcess[i], filesToProcess[i]+"_old");
		}
	}

	if(os == "Linux")
	{
		if(access(fsm_path + "/bin/WCCOAsmi", F_OK) == 0)
			ok = moveFile(fsm_path + "/bin/WCCOAsmi", fsm_path + "/bin/WCCOAsmi"+"_old");
		ok = copyFile(fsm_path + "/bin/WCCOAsmi" + pvss_version + ".sh", 
			fsm_path + "/bin/WCCOAsmi");
	}
	else
	{
		if(access(fsm_path + "/bin/WCCOAsmi.exe", F_OK) == 0)
			ok = moveFile(fsm_path + "/bin/WCCOAsmi.exe", fsm_path + "/bin/WCCOAsmi.exe"+"_old");
		ok = copyFile(fsm_path + "/bin/WCCOAsmi" + pvss_version + ".exe", 
			fsm_path + "/bin/WCCOAsmi.exe");
	}

/*
	if(os == "Linux")
		filesToProcess = linuxFiles;
	else
		filesToProcess = windowsFiles;
											
	for(i = 1; i <= dynlen(filesToProcess); i++)
	{
		ok = copyFile(filesToProcess[i][FILE_SOURCE], filesToProcess[i][FILE_TARGET]);
		if(ok)
			DebugN("fwFSM.postInstall: copied file " + filesToProcess[i][FILE_SOURCE] + " to " +  filesToProcess[i][FILE_TARGET]);
		else
			DebugN("fwFSM.postInstall: failed to copy file " + filesToProcess[i][FILE_SOURCE] + " to " +  filesToProcess[i][FILE_TARGET]);
	}
*/ 
	if(os == "Linux")
	{
		string str;
		file f;
		system("chmod a+x "+fsm_path + "/bin/WCCOAsmi"+ pvss_version);
		system("chmod a+x "+fsm_path + "/bin/WCCOAsmi");
		system("chmod a+x "+fsm_path + "/bin/smiTrans");
		system("chmod a+x "+fsm_path + "/bin/smiSM");
		system("chmod a+x "+fsm_path + "/bin/dim_send_command");
		system("chmod a+x "+fsm_path + "/bin/smi_send_command");
		system("chmod a+x "+fsm_path + "/bin/dns");
		system("chmod a+x "+fsm_path + "/bin/xwindiff");
		str = "export LD_LIBRARY_PATH="+fsm_path+"/bin:"
			+"${LD_LIBRARY_PATH};"
			+fsm_path+"/bin/dns &";
		f = fopen(fsm_path+"/bin/Dns","w");
		fprintf(f,"%s",str); 
		fclose(f);
		system("chmod a+x "+fsm_path+ "/bin/Dns");
	}
	if(ok)
		DebugN("fwFSM.postInstall: WCCOAsmi for version " + pvss_version + " installed");
	else
		DebugN("fwFSM.postInstall: Failed installing WCCOAsmi for version " + pvss_version);
}

int get_paths(string conf_path)
{
	file fin;
	string s;
	int ok;
	int pos;
	int found = 0;
	dyn_anytype componentInfo;

	fin = fopen(conf_path, "r");
	if(fin == 0)
	{
		err=ferror(fin);
		DebugN("fwFSM.postInstall: could not open " + conf_path + " - Error No. " + err);
		return 0;
	} 

	ok = fwInstallation_getComponentInfo("fwFSM", "installationdirectory", componentInfo);
	if(ok == 0)
	{
		fsm_path = componentInfo[1];
		DebugN("fwFSM.postInstall: got installation directory for fwFSM " + fsm_path);
		found++;
	}
	else
	{
		DebugN("fwFSM.postInstall: could not get installation directory for fwFSM");
	}

	while(!feof(fin))
	{
		fgets(s, 2000, fin);
		/*if(strpos(s, "fwFSM") >= 0)
		{
			pos = strpos(s, "\"");
			fsm_path = substr(s, pos+1);
			pos = strpos(fsm_path, "\"");
			fsm_path = substr(fsm_path, 0, pos);
			found++;
		}*/
		if(strpos(s, "proj_version") >= 0)
		{
			pos = strpos(s, "\"");
			pvss_version = substr(s, pos + 1);
			pos = strpos(pvss_version, "\"");
			pvss_version = substr(pvss_version, 0, pos);
			found++;
		}
		if(strpos(s, "pvss_path") >= 0)
		{
			pos = strpos(s, "\"");
			pvss_path = substr(s, pos + 1);
			pos = strpos(pvss_path, "\"");
			pvss_path = substr(pvss_path, 0, pos);
			found++;
		}
		if(found == 3)
			break;
	}
	fclose(fin);
	return found;
}
