/**@file

This library contains function associated with the creation of front end config files,
using the framework hierarchy and the data stored in the device definitions.

@par Creation Date
	31/10/03

@par Modification History
	
@par Constraints
	WARNING: the functions use the dpGet or dpSetWait, problems may occur when using these functions 
    		in a working function called by a PVSS (dpConnect) or in a calling function 

@author 
	Oliver Holme (IT-CO)
*/

//@{ 
// constants definition
const int fwDeviceFrontEndConfigFile_OPENING_TAG = 1;
const int fwDeviceFrontEndConfigFile_CLOSING_TAG = 2;
const int fwDeviceFrontEndConfigFile_STARTING_HIERARCHY_LEVEL = 0;

const string fwDeviceFrontEndConfigFile_DPE_MARKER_START = "%dpe:";
const string fwDeviceFrontEndConfigFile_DPE_MARKER_END = "%";
//@}

//@{
/** Creates a string containing the required contents of a front end config file.  The string can be written directly
to a file.  The file is generated by moving down the hierarchy from a given starting point.  The file entries for
each device found are read from the device definitions and appended to the contents of the file.

@par Constraints
	None

@par Usage
	Public

@par PVSS managers
	VISION, CTRL

@param dpName 	the name of the dp at the top of the hierarchy from which to make the config file.
@param fileContents the contents of the file is returned here
@param exceptionInfo details of any exceptions are returned here
*/
fwDeviceFrontEndConfigFile_CreateContents(string dpName, string &fileContents, dyn_string &exceptionInfo)
{
	int i, length, position, hierarchyLevel;
	string newEntry, openingTag, closingTag;
	dyn_string fileData, closingTags, device;
	dyn_dyn_string hierarchyDps;

	fileContents = "";

	//set starting points
	hierarchyLevel = fwDeviceFrontEndConfigFile_STARTING_HIERARCHY_LEVEL;
	closingTags = makeDynString("");

	//get the information on dps below dpName in the hierarchy (including dpName itself)
	fwDeviceFrontEndConfigFile_GetBranchRecursive(dpName, hierarchyLevel+1, hierarchyDps, exceptionInfo);
//DebugN(hierarchyDps);
//	dynAppend(fileData, FILE_HEADER);
	
	//for each dp in the hierarchy
	length = dynlen(hierarchyDps[1]);
	for(i=1; i<=length; i++)
	{
		//get the start and end tags corresponding to this device
		device[fwDevice_DP_NAME] = hierarchyDps[1][i];
		device[fwDevice_DP_TYPE] = hierarchyDps[2][i];
		fwDeviceFrontEndConfigFile_GetDeviceTag(device, fwDeviceFrontEndConfigFile_OPENING_TAG, openingTag, exceptionInfo);
		fwDeviceFrontEndConfigFile_GetDeviceTag(device, fwDeviceFrontEndConfigFile_CLOSING_TAG, closingTag, exceptionInfo);

		//if the hierarchy depth reduces, we need to close the tags, previously opened for earlier devices
		while(hierarchyLevel >= hierarchyDps[3][i])
		{
			if(closingTags[hierarchyLevel] != "")
				dynAppend(fileData, closingTags[hierarchyLevel]);
			hierarchyLevel--;
		}

		//process the opening tag entry for any variables to be replaced
		fwDeviceFrontEndConfigFile_ProcessEntry(hierarchyDps[1][i], openingTag, newEntry, exceptionInfo);
		//append the line
		dynAppend(fileData, newEntry);
			
		//store the new level in the hierarchy
		hierarchyLevel = hierarchyDps[3][i];

		//process the closing tag entry and store for later when we will need to close the tag
		fwDeviceFrontEndConfigFile_ProcessEntry(hierarchyDps[1][i], closingTag, newEntry, exceptionInfo);
		closingTags[hierarchyLevel] = newEntry;
	}
	
	//at the end of the file, make sure that any unclosed tags are now closed
	while(hierarchyLevel >= 1)
	{
		if(closingTags[hierarchyLevel] != "")
			dynAppend(fileData, closingTags[hierarchyLevel]);
		hierarchyLevel--;
	}

//	dynAppend(fileData, FILE_FOOTER);

	//convert the dyn_string into a string before returning the value
	length = dynlen(fileData);
	for(i=1; i<=length; i++)
	{
		fileContents += fileData[i];
	}
}

/** Recursive function for finding details of the devices below a given device in the hierarchy

@par Constraints
	None

@par Usage
	Public

@par PVSS managers
	VISION, CTRL

@param dpName 	the name of the dp from which to find the devices below.
@param hierarchyLevel an unsigned giving the starting hierarchy level of dpName
						devices deeper in the hierarchy are given number relative to this starting number
						Note: this value can be chosen arbitrarily in any situation, but the most likely setting is 1
@param hierarchyData 	1- The dpNames of the dps in the hierarchy below dpName (including dpName)
						2- The dptypes of the dps listed in 1
						3- An unsigned representing the hierarhcy level of the dps listed in 1
						higher values represent devices deeper in the hierarchy
						eg. children of dpName will have a value of hierarchyLevel+1
@param exceptionInfo details of any exceptions are returned here
*/
fwDeviceFrontEndConfigFile_GetBranchRecursive(string dpName, unsigned hierarchyLevel, dyn_dyn_string &hierarchyData, dyn_string &exceptionInfo)
{
	int i, length;
	string dpType;
	dyn_string childrenDps;
	
	dpType = dpTypeName(dpName);

	//append details of current device to hierarchyData
	dynAppend(hierarchyData[1], dpName);
	dynAppend(hierarchyData[2], dpType);
	dynAppend(hierarchyData[3], hierarchyLevel);

	//get children of current device
	fwDevice_getChildren(dpName, fwDevice_HARDWARE, childrenDps, exceptionInfo);

	//call this function again for each child
	length = dynlen(childrenDps);
	for(i=1; i<=length; i++)
	{
		fwDeviceFrontEndConfigFile_GetBranchRecursive(childrenDps[i], hierarchyLevel+1, hierarchyData, exceptionInfo);
	}
}

/** Function to process the config file entries read from the device definitions.
Substitutions are made as with address templates eg. %name1% etc..
In addition %dpe:<dpElement>% is substituted with the value from dpElement
	eg. %dpe:.Settings.BaudRate% might be replaced with 125000

@par Constraints
	None

@par Usage
	Public

@par PVSS managers
	VISION, CTRL

@param deviceDpName 	the name of the dp for which to process the given entry text.
@param rawEntry 		the raw entry read from the device definitions
@param processedEntry 	the processed entry is returned here, ready to be inserted in the config file 
@param exceptionInfo	details of any exceptions are returned here
*/
fwDeviceFrontEndConfigFile_ProcessEntry(string deviceDpName, string rawEntry, string &processedEntry, dyn_string &exceptionInfo)
{
	int startPosition, endPosition;
	string textCopy, dpe, value;

	//use basic framework function to do the standard substitutions
	fwDevice_processAddressTemplate(deviceDpName, rawEntry, rawEntry, exceptionInfo);

	//do the %dpe:...% substitutions
	//first, search for occurences to replace
	while(patternMatch("*" + fwDeviceFrontEndConfigFile_DPE_MARKER_START + "*" + fwDeviceFrontEndConfigFile_DPE_MARKER_END + "*", rawEntry))
	{
		//find occurence in string and isolate the dpe name
		startPosition = strpos(rawEntry, fwDeviceFrontEndConfigFile_DPE_MARKER_START);
		textCopy = substr(rawEntry, startPosition + strlen(fwDeviceFrontEndConfigFile_DPE_MARKER_START));
		endPosition = strpos(textCopy, fwDeviceFrontEndConfigFile_DPE_MARKER_END);
		dpe = substr(textCopy, 0, endPosition);
		
		//get the value of the dpe
		dpGet(deviceDpName + dpe, value);
		//substitute the value into the original string
		strreplace(rawEntry, fwDeviceFrontEndConfigFile_DPE_MARKER_START + dpe + fwDeviceFrontEndConfigFile_DPE_MARKER_END, value);
	}

	processedEntry = rawEntry;
}

/** DEPRECATED - Function to read the config file tags from the device definitions for a specific device type
DEPRECRATED - Please use fwDeviceFrontEndConfigFile_GetDeviceTag instead
*/
fwDeviceFrontEndConfigFile_GetDpTypeTag(string deviceDpType, int tagType, string &configEntry, dyn_string &exceptionInfo)
{	
	dyn_string device;
	
	device[fwDevice_DP_TYPE] = deviceDpType;
	fwDeviceFrontEndConfigFile_GetDeviceTag(device, tagType, configEntry, exceptionInfo);
}

/** Function to read the config file tags from the model or device definitions for a specific device

@par Constraints
	None

@par Usage
	Public

@par PVSS managers
	VISION, CTRL

@param device	 the device object, must contains at least the dpName
@param tagType 	fwDeviceFrontEndConfigFile_OPENING_TAG to get opening tags
						fwDeviceFrontEndConfigFile_CLOSING_TAG to get closing tags
@param configEntry 	the contents of the relevant dyn_string in the device definitions returned as a single string
@param exceptionInfo details of any exceptions are returned here
*/
fwDeviceFrontEndConfigFile_GetDeviceTag(dyn_string device, int tagType, string &configEntry, dyn_string &exceptionInfo)
{	
	int i, length;
	string dpeToRead;
	dyn_string configEntries = makeDynString(), defDp = makeDynString();

	configEntry = "";

	if(tagType == fwDeviceFrontEndConfigFile_OPENING_TAG)
		dpeToRead = ".frontEnd.configFile.openingTag";
	else if(tagType == fwDeviceFrontEndConfigFile_CLOSING_TAG)
		dpeToRead = ".frontEnd.configFile.closingTag";

	if(dynlen(device) < fwDevice_MODEL)
		device[fwDevice_MODEL] = "";
	fwDevice_getModelDp(device, defDp, exceptionInfo);
	
	if(dynlen(defDp) > 0)
	{
		//get contents of either the opening of closing tags dpes
		dpGet(defDp[fwDevice_DP_NAME] + ".modelDefinition.definition" + dpeToRead, configEntries);
	}
	
	if(dynlen(configEntries) == 0)
	{
		fwDevice_getDefinitionDp(device, defDp, exceptionInfo);
		//get contents of either the opening of closing tags dpes
		dpGet(defDp[fwDevice_DP_NAME] + dpeToRead, configEntries);
	}

	//join entries from tag dpes into a single string seperated by \n
	length = dynlen(configEntries);
	for(i=1; i<=length; i++)
	{
		configEntry += configEntries[i] + "\n";
	}
}

//@}
