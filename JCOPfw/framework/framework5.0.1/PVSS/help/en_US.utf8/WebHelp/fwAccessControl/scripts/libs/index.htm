<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Access Control component: JCOP Framework Access Control component</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li class="current"><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>JCOP Framework Access Control component</h1><h2><a class="anchor" id="Introduction">
Introduction</a></h2>
<p>The JCOP Framework Access Control component allows to implement access control mechanisms at the level of the PVSS panels.</p>
<p>It provides the developers with a simplified infrastructure for implementing the access control in their panels. For advanced use, the API (Access Control library) also provides exhaustive set of functions that may be used to perform all the activities related to the management and configuration of the access rights. For convenience, however, the panels provided with the component should rather be used.</p>
<p>A distributed Access Control management tool ("Access Control Server") is also provided to ease the integration and management of the access control in large distributed systems.</p>
<h2><a class="anchor" id="ACImplementInPanel">
Integrating access control mechanism into a panel</a></h2>
<p>To implement access control mechanism in a panel requires the use of two functions:</p>
<ul>
<li><a class="el" href="a00004.htm#ga749bce3943c050ef06676b32341502e3">fwAccessControl_setupPanel</a></li>
<li><a class="el" href="a00006.htm#ga849cae607bc8b26edce17ad209aa252c">fwAccessControl_isGranted</a></li>
</ul>
<p>, adding two functions to the panel, and, unless already done, configuring the access control system to have domains, privileges, groups and users.</p>
<p>Assume an example panel, with a button called <code>ExpertAction</code>, which should be enabled only for the users who are authorized to perform the expert action. The access control is enforced by changing the state of the UI elements to enabled/disabled. To start with, implement a function that disabled all of the elements that you wish to protect with access control (note, however, that certain elements, such as "Cancel" button, should probably not be protected). <br/>
 The function performing this task may be called, according to conventions, <code>DisableAllInPanel</code> . For the case of the discussed example, it should be placed in the <em>General</em> section of panel's scripts, and should contain the statement that disables the <code>ExpertAction</code> button: </p>
<div class="fragment"><pre class="fragment"> <span class="keywordtype">void</span> DisableAllInPanel()
 {
     ExpertAction.enabled = FALSE;
     <span class="comment">// other UI elements might be disabled in the same way</span>
 } 
</pre></div><p>Then, implement a function that enables the UI elements, depending on the access rights of the user currently being logged in. The function needs to accept two (dummy) string parameters and, according to conventions, is called <code>ApplyPanelAccessControl</code> ; the function should be placed in the <em>general</em> section of the panel's scripts. For the case of the example discussed here, it might be implemented in the following way: </p>
<div class="fragment"><pre class="fragment"> <span class="keywordtype">void</span> ApplyPanelAccessControl(<span class="keywordtype">string</span> s1, <span class="keywordtype">string</span> s2)
 {
    <span class="comment">// at first, disable whatever was enabled to this moment</span>
    DisableAllInPanel();

    dyn_string exceptionInfo;
    <span class="keywordtype">bool</span> hasExpertPrivilege=FALSE;

    <span class="comment">// check if current user has privilege level &quot;Control&quot; in domain &quot;MyDCS&quot;:</span>
    <a class="code" href="a00006.htm#ga849cae607bc8b26edce17ad209aa252c">fwAccessControl_isGranted</a>(<span class="stringliteral">&quot;MyDCS:Control&quot;</span>, hasExpertPrivilege, exceptionInfo);

    <span class="comment">// check and handle exceptions that might have been thrown by the function above</span>
    <span class="keywordflow">if</span> (dynlen(exceptionInfo)) {<a class="code" href="a00004.htm#gaf1b96928b001fc70083bfb53fa41a9af">fwAccessControl_displayException</a>(exceptionInfo);<span class="keywordflow">return</span>;};

    <span class="comment">// enable UI elements, depending on the access rights:</span>
    <span class="keywordflow">if</span> (hasExpertPrivilege) ExpertAction.enabled = TRUE;
 }
</pre></div><p> The function above is going to be a "callback" function, called asynchronously whenever a user logs in or logs out.</p>
<p>The final step is therefore to register the function to the access control subsystem. to obtain this, the following piece of code needs to be put into the <em>Initialize</em> script of the panel: </p>
<div class="fragment"><pre class="fragment"> main()
 {
    DisableAllInPanel();
    dyn_string exceptionInfo;
    <a class="code" href="a00004.htm#ga749bce3943c050ef06676b32341502e3">fwAccessControl_setupPanel</a>(<span class="stringliteral">&quot;ApplyPanelAccessControl&quot;</span>,exceptionInfo);

    <span class="comment">// check and handle exceptions that might have been thrown by the function above</span>
    <span class="keywordflow">if</span> (dynlen(exceptionInfo)) {<a class="code" href="a00004.htm#gaf1b96928b001fc70083bfb53fa41a9af">fwAccessControl_displayException</a>(exceptionInfo);<span class="keywordflow">return</span>;};
 }
</pre></div><p> Note, that the name of the callback function is passed as the first argument to the <a class="el" href="a00004.htm#ga749bce3943c050ef06676b32341502e3">fwAccessControl_setupPanel</a> function. Note also that in the code samples we used the <a class="el" href="a00004.htm#gaf1b96928b001fc70083bfb53fa41a9af">fwAccessControl_displayException</a> function for handling the exceptions - this function is equivalent to the <code>fwExceptionHandling_display</code> function of the Framework core. For more details about exceptions in the Access Control component refer to subsection <a class="el" href="index.htm#ExceptionHandling">Exception Handling</a> below.</p>
<h2><a class="anchor" id="IntegratedACSetup">
Setting up integrated Access Control in a distributed system</a></h2>
<p>Since version 2.5.0 of the Access Control component it is possible to enable integrated mode for the management and configuration of the access control data in distributed systems, which run Framework-based projects. The integrated mode of operation allows to manage the access control - related data on a single system (referred to as <em>"Access Control Server"</em>), and automatically distribute any changes (new user accounts, group definitions, etc) to all systems that are managed by the Access Control Server.</p>
<p>To activate the Integrated Access Control mode of operation, perform the following steps:</p>
<ol type="1">
<li>Choose the PVSS system that you wish to use as the Access Control server. It does not need to be a dedicated system, yet it needs to be able to contact all the systems (in the distributed system) that you wish to manage. Verify the distributed systems connection.</li>
<li>Open the Access Control Toolbar on the server, and configure (create/update) the domains, groups and users. You may also want to import the AC objects (domains/groups/users definitions) from the "postInstall" scripts, the use of which is described in subsection <a class="el" href="index.htm#ImportACData">Using the exported Access Control data.</a> .</li>
<li>Activate the Access Control server in PMON: append a CTRL Manager running the <code>"fwAccessControl/fwAccessControl_Server.ctc"</code> script to the PVSS Project Console on the server machine.</li>
<li>Start the CTRL Manager that runs the AC Server (appended in the previous point).</li>
<li>Configure the "client" machines in your system to be managed by the server. Two ways are possible<ul>
<li>on each of the client machines you wish to be managed by the AC Server, open the AC Setup panel (available from Toolbar), and select the server name in the "Host" selector, in the "Integrated Mode" part of the panel.</li>
<li>alternatively, open the Access Control Server console panel on the system that runs the server. The panel will display the names of all systems currently connected to the server system. It will also indicate what is the current setting for AC Server on each of them. <br/>
 For each system you wish to manage with AC Server, right-click on its line in the table, and select "Bring up" - this will set its "AC Server" field to be the name of the server machine. Shortly after you should see that the machine is being managed by the server (see the output of the AC Server in the log window, and the status in the panel.</li>
</ul>
</li>
<li>To disable the integrated management for any of machines, either set empty "Host" in the AC Setup panel, or use the AC Server console to "release" the managed host, as above.</li>
</ol>
<dl class="note"><dt><b>Note:</b></dt><dd>Once a client machine is "managed" by the AC Server, all of its Access Control data is being overwritten by the data defined on the server, i.e. the user definitions, and password may be changed!</dd>
<dd>
Once the integrated mode is activated for a "client" system, it will not be possible to perform the management of domains, groups and users locally!</dd>
<dd>
A user may still change the password on a "client" system - the new password will be announced to the AC Server, and automatically populated to all managed hosts!</dd>
<dd>
the "Host" field of AC Setup panel on the server machine will automatically be set to the name of the local system. Do not try to change it!</dd></dl>
<h2><a class="anchor" id="ExportACData">
Exporting Access Control data for use with the Installation Tool</a></h2>
<p>To export (a subset of) Access Control data one might use the <em>Export</em>... button of the Access Control Setup panel, or make use of the <a class="el" href="a00004.htm#ga2106681fe7a3677682e1f4130505ba00">_fwAccessControl_exportToPostInstall</a> function. These will bring up the panel that allows to select the Domains, Groups and Users that are to be selected, then it will create the file with given name, that will contain the CTRL script, suitable for using as a postInstall script for the installation tool, with commands that will create/update the objects that were exported.</p>
<h3><a class="anchor" id="ImportACData">
Using the exported Access Control data.</a></h3>
<p>To import the Access Control data from the "postInstall" script, simply run the script through the CTRL Manager. Note, however, that the postInstall scripts are by default placed in the <code>config/</code> subdirectory, not in the <code>scripts/</code> subdirectory, hence you may need to copy the file in an appropriate place to make it accessible to the CTRL Manager.</p>
<p>The scripts are built of calls to <a class="el" href="a00004.htm#ga551e45e77afc32d678918edaf243893d">fwAccessControl_checkAddDomain</a> , <a class="el" href="a00004.htm#ga530acfee77e9fae36fdaa79671aa3d3e">fwAccessControl_checkAddGroup</a> and <a class="el" href="a00004.htm#gab8d680bc24e3529445919dea23036ce8">fwAccessControl_checkAddUser</a> functions. These function does not "overwrite" the existing account, but rather updates them (i.e. they "append" access rights or group memberships to the exising ones, rather than overwrite them). If this is not a desired way to import the data, consider a review of the scripts beforehand. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>In the current release, no backup copy is created when AC Data is imported! Consider making backups (e.g. ASCII exports) of the datapoints of type <code>_Users</code> for the critical systems!</dd></dl>
<h2><a class="anchor" id="UseOfAPI">
The use of API (advanced)</a></h2>
<p>This documentation contains the descriptions of the high-level functions that are supposed to be widely available for developers. We believe that the only functions that are of general interest are the ones already described in section <a class="el" href="index.htm#ACImplementInPanel">Integrating access control mechanism into a panel</a> . For all the access control management purposes we believe that the set of panels provided with the component are sufficient. Nevertheless, custom solutions may be implemented based on functions described here.</p>
<h3><a class="anchor" id="groups_fun_sec">
Groups of functions</a></h3>
<p>The functions are grouped in the following sections</p>
<ul>
<li><a class="el" href="a00004.htm">General-Purpose functions</a></li>
<li><a class="el" href="a00006.htm">Privilege-management functions</a></li>
<li><a class="el" href="a00007.htm">Domain-management functions</a></li>
<li><a class="el" href="a00008.htm">Group-management functions</a></li>
<li><a class="el" href="a00009.htm">User-management functions</a></li>
<li><a class="el" href="a00005.htm">Private functions</a></li>
<li><a class="el" href="a00010.htm">UNICOS-compatibility functions</a></li>
</ul>
<h4><a class="anchor" id="ExceptionHandling">
Exception Handling</a></h4>
<p>The use of dedicated exception-related routines in the Access Control component is motivated by the need of making the AC component independent of the Framework Core.</p>
<p>Exception handling in the Access Control component is fully compatible with exception handling provided by the Framework Core component. The <code>exceptionInfo</code> variables may be freely exchanged between both implementations. In fact, if the Core component is installed, the AC exception functions are only wrappers over the Framework Core's function: </p>
<table border="1" cellspacing="3" cellpadding="3">
<tr>
<td><p>fwAccessControl:</p>
</td><td><p>fwCore: </p>
</td></tr>
<tr>
<td><p><a class="el" href="a00004.htm#gaa16dd2718896502fe68362cdb4d94743">fwAccessControl_raiseException</a></p>
</td><td><p><code>fwException_raise</code>  </p>
</td></tr>
<tr>
<td><p><a class="el" href="a00004.htm#gaf1b96928b001fc70083bfb53fa41a9af">fwAccessControl_displayException</a></p>
</td><td><p><code>fwExceptionHandling_display</code>  </p>
</td></tr>
</table>
<p>there are however simplified implementations for the case when Fw core is not installed.</p>
<p>A similar "wrapper" functionality exists for the online-help buttons used in the panels.</p>
<h2><a class="anchor" id="IntegratedACTechnical">
Technical details of the AC Server</a></h2>
<ul>
<li>there is a request-response protocol for communication between clients and servers. it uses the elements of the internal AC datapoints, and a dpQueryConnect-based mechanism. Clients write their requests to their own datapoints, and these requests are tracked by the AC Server. For the clients managed by the AC Server, the requests are actually processed by the Server, and replies are sent as dpSets to the client's datapoints.</li>
<li>requests for password change that are sent from clients to the AC Server are encrypted using an algorithm based on a popular (yet non-trivial) symmetric key encryption scheme. Because of that we distribute the Access Control component in form of the encrypted PVSS library. If you are interested in the actual implementation details, or using the encryption/decryption functions for your projects, please contact the <code>ITCONTROLS.SUPPORT</code> team.</li>
<li>to protect your AC Server, you may consider "firewalling" the AC Server - either by means provided by the operating systems, or PVSS's Access Control Lists</li>
</ul>
<h2><a class="anchor" id="customization">
Customizing the Access Control component</a></h2>
<h3><a class="anchor" id="ACLogo">
How to change the default "logo" picture in the login an password-change panels?</a></h3>
<p>Copy the file containing the "logo" picture in the <em>BMP</em> format, into the <code>pictures/logo.bmp</code> file in your project (or components) folder.</p>
<ul>
<li>Hint: Note that the FSM component already contains the logos for the LHC experiments: you may want to reuse them - they are in the <code>pictures/logo_*</code>.bmp files of the FSM component installation directory.</li>
</ul>
<h3><a class="anchor" id="AuthMethod">
How to customize the authentication method?</a></h3>
<dl class="note"><dt><b>Note:</b></dt><dd>Customizing the authentication method (i.e. implementing a custom mechanism of password checking, based, for instance, on NICE, AFS, Kerberos, LDAP or Oracle) is not yet possible in version 2.5.0 of the component. </dd></dl>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on 7 May 2013 for Access Control component by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
