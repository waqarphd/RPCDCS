V 10
1
LANG:1 0 
PANEL,-1 -1 500 401 N "_3DFace" 0
E E E E E 1 -1 -1 0  132 84
""0  1
E E 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
13 0
"PUSH_BUTTON1"
""
1 126 26 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 124 24 276 98

T 
1
LANG:1 9 INIT FILE
"/*
* Created by Giovanni Polese (Lappeenranta University of Technology
*	date:08/03/2007
*	LastChange:03/03/2008
        _UXC added to fsm
        OPC group creation
        deleteOld()
        WBM script
*
*
*/
 #uses \"fwRDBArchiving/fwRDBConfig.ctl\"
main()
{
DebugN(\"START\");
//Start Database Connection and recive hardware and Logical schema
bool error = false;
//ConfigurationDBRecive(error);
Debug(\"Importing Configuration...\");
 ImportConfig(error);
DebugN(\"Imported\");
  string panel;
delay(2,0);
  dpGet(getSystemName()+\"CMS_RPCfwSupervisor.Status.panels\",panel);
	DebugN(panel,\"<---\");
  if((panel==\"OK\")&&(!error))
  {
    
    bool yes = fwInstallation_checkInstalledComponent(\"CMS_RPCfwHardwareBarrelUXC\");
  if(!yes)
    deleteOld();

    
  bool opcOn;
  dpGet(getSystemName()+\"_CAENOPCServer.Connected\",opcOn); 
  //opcOn = false;// to be removed 
    if(opcOn)
    {
       createGroup();
      ConfigurationDBRecive(error);
     
    }
    else
    {
      DebugN(\"OPC client not connected, please check if the manager is ON\");
    error = true;
    }
    //error = false;// to be removed
// Generate the FSM Device Tree
if(!error)
 generateTreeforDevice();

// Insert the device node using hardware created
// 
if(!error)
{
 InsertLV();
 InsertT(); 
 InsertLBB(); 
 InsertBoards(); 
 InsertBcMaoCrate(); 
fwFsmTree_generateAll();
fwFsmTree_refreshTree();
 Debug(\"Setting Alarm ....\"); 
SetAlarmDevice();
DebugN(\"Done\");
 Debug(\"Setting Archiving ....\"); 
 SetDeviceConditionDB();
 WBM();
  Debug(\"Done\"); 

   fwInstallation_appendManager(TRUE, \"StartUp\", \"PVSS00ctrl\", \"always\", 30, 2, 2, \"CMS_RPCfwHardwareBarrel/CMS_RPCfwHardwareUXCStartUp.ctl\");
DebugN(\"UXC Component successfully installed\");
 }
else
  DebugN(\"Installation interrupted, downloading configuration failed\");
// Set Alarm for devices
}
 
// Set archive for devices


}
void WBM(){
  
   dyn_string types;
 

  // Create dp for WBM refresh
  types = dpTypes(\"heartbeat\");
  //DebugN(types);
  if(dynlen(types)<1) 
  {
  int n;

  dyn_dyn_string xxdepes;

  dyn_dyn_int xxdepei;

 

// Create the data type

  xxdepes[1] = makeDynString (\"heartbeat\",\"\");

  xxdepes[2] = makeDynString (\"\",\"timechange\");
  //xxdepes[3] = makeDynString (\"\",\"offset\");


  xxdepei[1] = makeDynInt (1);

  xxdepei[2] = makeDynInt (0,25);

 

 

// Create the datapoint type

  n = dpTypeCreate(xxdepes,xxdepei);

  DebugN (\"Datapoint Type created \");

  }
  if(!dpExists(\"LVdbConnForWBM\"))
    dpCreate(\"LVdbConnForWBM\",\"heartbeat\");
  
  //***************** Set Archiving
  bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //\"ValueArchive_0000\";//Archive's name
int archiveType=DPATTR_ARCH_PROC_SIMPLESM,count=1,value,l;
dyn_string exceptionInfo;
 

fwArchive_set( \"LVdbConnForWBM.timechange\", archiveClassName,archiveType,DPATTR_COMPARE_OLD_NEW,
					0.2, 30,exceptionInfo);

  
  
    
}
string findPath()
{
  dyn_dyn_string comp;
  fwInstallation_getInstalledComponents(comp);
  for(int i =1;i<=dynlen(comp);i++)
    if(comp[i][1]==\"fwCore\")
      return comp[i][3];  
  }

void AlarmTemp(){
dyn_string deviceList,exceptionInfo,summary;//=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/T/*\",\"*\"));

for (int i=1;i<=dynlen(deviceList);i++)
 {
 dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\"),
       aTexts = makeDynString(\"OK\", \"Too High\") ;
 dyn_float limits; 
 dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\"),
       aClasses = makeDynString(\"\", \"_fwErrorAck.\");
  string alertPanel; dyn_string alertPanelParameters; string alertHelp;
 
 deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
 
  
///Set  Alarm channel for Imon
string  channel= deviceList[i]+\".actual.temperature\";
 
  fwAlertConfig_deactivate(channel,exceptionInfo);  
  limits = makeDynFloat( 23,24 );
  //DebugN(channel);
 fwAlertConfig_set(channel,DPCONFIG_ALERT_NONBINARYSIGNAL ,alertTexts,limits, alertClasses,summary,alertPanel,alertPanelParameters,
             alertHelp,exceptionInfo);
             if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
 fwAlertConfig_activate(channel,exceptionInfo);
}
  
  
  
  
}
void ImportConfig(bool error){
 string path;

 string paths = findPath();
 //fwInstallation_getProjPaths(paths);
 // DebugN(\"proj paths \", paths);
 string fname=\"/config/CMS_RPCfwHardwareBarrel/CMS_RPCfwHardwareBarrelUXCConfig.csv\",st;
 bool is = false;
    //DebugN(paths[i] + fname);
    if ((access(paths + fname, F_OK) == 0)) {
    fname = paths + fname;
    is = true;
    
    }
 

 if(is)
 {
//DebugN(sps,fname); 
file f;
int i = 1; 
string dummy;
dyn_dyn_string elenco;
f=fopen(fname,\"r\");//
//DebugN(i);
while (feof(f)==0) // so long as it is not at the end
{
 
fgets(dummy,100,f);  // reads from the file in dummy
elenco[i]=strsplit(dummy,\",\"); 
//DebugN(dummy);
i = i+1;
}
 
fclose(f);
// DebugN(elenco);
for(int j = 1; j<=dynlen(elenco);j++)
{
  //DebugN(elenco[j]);
  if(elenco[j]!=\"\")
  dpSet(getSystemName()+\"CMS_RPCfwSupervisor.\"+elenco[j][1],elenco[j][2]);
  
  }
}
 else
 {
   DebugN(\"Configuration File not found, Installation aborted\");
   error = true;
   }
}
void MovingHierarchy(string hName,string lName)
{
 dyn_string deviceList;

dyn_string exceptionInfo,exInfo;
dyn_dyn_mixed recipeObject;


dyn_string topDevice=makeDynString(getSystemName()+\"CAEN\",\"\");


  
 fwConfigurationDB_getDeviceConfigurationFromDB(hName,fwDevice_HARDWARE, recipeObject, exceptionInfo);
  if (dynlen(exceptionInfo)) { fwExceptionHandling_display(exceptionInfo); return; }


  //DebugTN(recipeObject[fwConfigurationDB_DLO_DPNAME]);
  DebugN(\"Checking Hierarchy consistency in DB\");	
  // find the system name in the db.
  dyn_string temp = strsplit(recipeObject[fwConfigurationDB_DLO_DPNAME][1], \":\");
  string sysName = temp[1]+\":\";

 //fwConfigurationDB_extractHierarchyFromDB(topDevice[2],hierarchyType[1], recipeObject,exceptionInfo,\"rpcdcs03:\");
  //DebugTN(sysName);
  string localSys = getSystemName();
  if(sysName != localSys)
  {
  fwConfigurationDB_reconnectDevices(recipeObject[1],hName,fwDevice_HARDWARE,localSys,exInfo);
   if (dynlen(exInfo)) { fwExceptionHandling_display(exInfo); return; }
  DebugN(\"Hierarchy Correctly Moved\");
  }
  else
    DebugN(\"DB Hierarchy consistets with SystemName\");
  
}
void completaBC(){
dyn_string bc = dpNames(\"*\",\"FwCaenBoardSY1527A1676\");
dyn_string names = makeDynString(\"UXC_WP2\");
for (int i=1;i<=dynlen(names);i++)
	{
	//dyn_string name = strsplit(sys[i],\"/\");
	dpSetAlias (bc[i]+\".\",\"RPCBarrel/BCs/RPC_\"+names[i]+\"_BC\");
	}



}

void ConfigurationDBRecive(bool & error)
{
string setupName=\"RPCConfig\";
dyn_string deviceList;

dyn_string exceptionInfo,exInfo,
hierarchyType=makeDynString(fwDevice_HARDWARE, fwDevice_LOGICAL);
dyn_dyn_mixed recipeObject;
dyn_string list,HvDeviceList, LvDeviceList;
dyn_string topDevice=makeDynString(getSystemName()+\"CAEN\",\"\");
dyn_string recipeName=makeDynString(\"Bue\",\"RPCUXCGeneral\");
dyn_string configurationName=makeDynString(\"RPCHWUXC\",\"RPCLWUXC\");


 dpGet(getSystemName()+\"CMS_RPCfwSupervisor.ConfDB.General\",recipeName[2]);
 dpGet(getSystemName()+\"CMS_RPCfwSupervisor.ConfDB.HardHierarchy\",configurationName[1]);
 dpGet(getSystemName()+\"CMS_RPCfwSupervisor.ConfDB.LogHierarchy\",configurationName[2]);
// DebugN();
//check if the connection is properly initialized
fwConfigurationDB_initialize(setupName,exceptionInfo);
if (fwConfigurationDB_handleErrors(exceptionInfo)) 
{
  error = true;
  return;
  }  

//download hierarchy from ConfigDB
//first hardware then logical
MovingHierarchy(configurationName[1],configurationName[2]);
for(int i=1;i<=2;i++)
	{
	DebugN(\"Hard : 1, Logical: 2\",i);
	
	fwConfigurationDB_updateDeviceConfigurationFromDB(configurationName[i],hierarchyType[i],exceptionInfo,0,\"\",\"\",fwConfigurationDB_deviceConfig_ALLDEVPROPS);
	
	if (fwConfigurationDB_handleErrors(exceptionInfo)) {
  error = true;
  return;
  }    
	
	if(i==2)
	{
	fwConfigurationDB_getHierarchyFromPVSS(\"\", hierarchyType[i], list,exceptionInfo,\"\",FALSE);
  if (fwConfigurationDB_handleErrors(exceptionInfo)){
  error = true;
  return;
  }	
 	fwConfigurationDB_getRecipeFromDB(\"\",list, hierarchyType[i],recipeName[i], recipeObject,exceptionInfo);
	 if (fwConfigurationDB_handleErrors(exceptionInfo)){
  error = true;
  return;
  }
	fwConfigurationDB_ApplyRecipe( recipeObject, hierarchyType[i],exceptionInfo); 
  if (fwConfigurationDB_handleErrors(exceptionInfo)){
  error = true;
  return;
  }
  DebugN(\"Recipe Applied\");  
  }
	}
	DebugN(\"Hierarchy Applied\");
		
}


void generateTreeforDevice()
{
dyn_string nodes, exInfo;
string chamber_node,ring_node,disc_node, top_node;
int chamberNum;

dyn_string discs=makeDynString(\"_WM2\",\"_WM1\",\"_W00\",\"_WP1\",\"_WP2\");
dyn_string rings=makeDynString(\"_S01\",\"_S02\",\"_S03\",\"_S04\",\"_S05\",\"_S06\",\"_S07\",
				\"_S08\",\"_S09\",\"_S10\",\"_S11\",\"_S12\");
dyn_string cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",
				\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//remove top node if already exists (all children are removed too)
//fwFsmTree_removeNode(\"CMS_RPC\",\"RPC_BARREL\");
//create top node (type DCSNode)
fwTree_getRootNodes(nodes,exInfo);
//DebugN(nodes, exInfo);
if(!fwFsmTree_isNode(\"RPC_BARREL_HW\"))
top_node=fwFsmTree_addNode(\"FSM\",\"RPC_BARREL_HWUXC\",\"RPC_Device\",1);
// if(fwFsmTree_isNode(\"RPC_LV\"))
//   fwFsmTree_removeNode(\"RPC_BARREL_HW\",\"RPC_LV\");
// top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_LV\",\"RPC_Device\",0);
// if(fwFsmTree_isNode(\"RPC_LBB\"))
//   fwFsmTree_removeNode(\"RPC_BARREL_HW\",\"RPC_LBB\");
// top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_LBB\",\"RPC_Device\",0);
// if(fwFsmTree_isNode(\"RPC_T\"))
//   fwFsmTree_removeNode(\"RPC_BARREL_HW\",\"RPC_T\");
// top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_T\",\"RPC_T\",0);
// if(!fwFsmTree_isNode(\"RPC_Boards\"))
// top_node=fwFsmTree_addNode(\"RPC_BARREL_HW\",\"RPC_Boards\",\"RPC_Boards\",0);
if(!fwFsmTree_isNode(\"RPC_BCsUXC\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HWUXC\",\"RPC_BCsUXC\",\"RPC_BC\",0);
if(!fwFsmTree_isNode(\"RPC_CratesUXC\"))
top_node=fwFsmTree_addNode(\"RPC_BARREL_HWUXC\",\"RPC_CratesUXC\",\"RPC_SY1527\",0);
fwTree_getRootNodes(nodes, exInfo);

//add list of children CU (type DiscNode)

for(int i=1; i<=dynlen(discs);i++)
	{
	//disc_node=fwFsmTree_addNode(top_node,\"RPC\"+discs[i],\"WheelNode\",1);
	//if(i==5)
	{
	//add list of children CU(type RingNode)
        chamber_node=fwFsmTree_addNode(\"RPC_BARREL_HWUXC\",\"RPC_UXC\"+discs[i],\"RPC_Device\",1);
        chamber_node=fwFsmTree_addNode(\"RPC_UXC\"+discs[i],\"RPC\"+discs[i]+\"_MAO\",\"RPC_MAO\",0);
	chamber_node=fwFsmTree_addNode(\"RPC_UXC\"+discs[i],\"RPC\"+discs[i]+\"_Bd\",\"RPC_Boards\",0);
	//chamber_node=fwFsmTree_addNode(\"RPC_Boards\",\"RPC_RB_SCX\"+discs[i]+\"_Boards\",\"RPC_Boards\",0);
	for(int j=1;j<=dynlen(rings);j++)
		{
		//ring_node=fwFsmTree_addNode(disc_node,\"RPC\"+discs[i]+rings[j],\"SectorNode\",1);
		
		//add list of children CU (type ChamberNode)
		if(j==4) 
			chamberNum=10;
		else if(j==9||j==11)
			{
			chamberNum=7;
			cham[7]=\"_RB4\";
			}
		else
			{
			chamberNum=8;
			cham[7]=\"_RB4minus\";
			}
			
		chamber_node=fwFsmTree_addNode(\"RPC_UXC\"+discs[i],\"RPC\"+discs[i]+rings[j]+\"_LBB\",\"RPC_LBBLV\",0);	
		for(int k=1;k<=chamberNum;k++)
			{
			chamber_node=fwFsmTree_addNode(\"RPC_UXC\"+discs[i],\"RPC\"+discs[i]+rings[j]+cham[k]+\"_T\",\"RPC_T\",0);
			//chamber_node=fwFsmTree_addNode(\"RPC_HV\",\"RPC\"+discs[i]+rings[j]+cham[k]+\"_HV\",\"RPC_HV\",0);
			chamber_node=fwFsmTree_addNode(\"RPC_UXC\"+discs[i],\"RPC\"+discs[i]+rings[j]+cham[k]+\"_LV\",\"RPC_LV\",0);
			
			}
		}
	}
	}
	

DebugN(\"Structure ready\");
//generate and refresh tree
fwFsmTree_generateAll();
//fwFsmTree_refreshTree();
}

string getCU(string name)
{
 int type;
 string parent;
 parent =  fwCU_getParent(type,name);
 //DebugN(parent,name);
  if(type==0)
    return getCU(parent);
  else
    return parent;
      
  
}
void InsertHV()
{dyn_string exInfo;

// Add HV

dyn_string deviceList=dpAliases(\"*/HV/*\",\"*\");
//DebugN(deviceList);
int pos;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		//DebugN(\"cHc\",names);
		if (fwTree_isNode(names,exInfo)!=0)
                  {
		  if (fwTree_isNode(deviceList[i],exInfo)==0) 
                  fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelHV\", 0);
                   //DebugN(\"we\",names,deviceList[i] );
                  }
	}
}
DebugN(\"HV ready\");

}
void InsertLV()
{
  dyn_string deviceList=dpAliases(\"*/LV/*\",\"*\");
  dyn_string exInfo;
//DebugN(\"cc\",deviceList);
int len;
int pos;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		len = strlen(names);
		names = substr(names,0,len-4);
		//DebugN(\"cc\",names);		
	        if (fwTree_isNode(names,exInfo)!=0)
                  {
		  if (fwTree_isNode(deviceList[i],exInfo)==0)
			fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLV\", 0);
              	}
                else if((strpos(names,\"RB3\")>-1)||(strpos(names,\"RB4\")>-1))
                {
                  strreplace(names,\"_LV\",\"plus_LV\");
                  if (fwTree_isNode(names,exInfo)!=0)
                    {
		    if (fwTree_isNode(deviceList[i],exInfo)==0)
                     {
			fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLV\", 0);
                        strreplace(names,\"plus\",\"minus\");
                        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                        //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
                        if((strpos(names,\"S04\")>-1)&&(strpos(names,\"RB4\")>-1))
                          {
                          strreplace(names,\"minus\",\"minusminus\");
                          fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                          strreplace(names,\"minusminus\",\"plusplus\");
                          fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelLV\", 0);
                                             
                          }
                      }
              	    } 
                  
                }
	}
}

	DebugN(\"LV ready\");
  
  
  }
void InsertT()
{
dyn_string exInfo;
int pos,pos1;
string names;
//Add ADCTemp

dyn_string deviceList=dpAliases(\"*/T/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
{
 pos =strpos(deviceList[i],\"RPC_W\");
 if(pos>-1)
 {
   names = substr(deviceList[i],pos);
   //DebugN(\"cHc\",names,names[pos1+2]);
   pos1 = strpos(names,\"RB\");
   
   switch(names[pos1+2])
   {
   case \"1\":
     if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //strreplace(names,\"plus\",\"minus\");
            //fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //DebugN(\"we\",names);
            }
          }  
         
    break;   
   case \"2\":
     strreplace(names,\"_T\",\"in_T\");
     if (fwTree_isNode(names,exInfo)!=0)
     {
	if (fwTree_isNode(deviceList[i],exInfo)==0)
        {
	fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        strreplace(names,\"in\",\"out\");
        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
        }
      }
     break;
    case \"3\":
      strreplace(names,\"_T\",\"plus_T\");
     if (fwTree_isNode(names,exInfo)!=0)
     {
	if (fwTree_isNode(deviceList[i],exInfo)==0)
        {
	fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        strreplace(names,\"plus\",\"minus\");
        fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
        //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
        }
      }
     break;
     case \"4\":
       
       if((strpos(names,\"S11\")==-1)&&(strpos(names,\"S09\")==-1)&&(strpos(names,\"S10\")==-1)&&(strpos(names,\"S04\")==-1))
       {
         DebugN(\"case 1: -->\",names);
        strreplace(names,\"_T\",\"plus_T\");
         if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            strreplace(names,\"plus\",\"minus\");
            fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
           // DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          } 
           
        }
       else  if(strpos(names,\"S04\")!=-1)
         {
         DebugN(\"case 2: -->\",names);
          if (fwTree_isNode(names,exInfo)!=0)
          {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            if(names[pos1+3]==\"p\")
            strreplace(names,\"plus\",\"plusplus\");
            else
              strreplace(names,\"minus\",\"minusminus\");
            fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          }          
         }
       else
       {
         DebugN(\"case 3: -->\",names);
        if (fwTree_isNode(names,exInfo)!=0)
         {
	    if (fwTree_isNode(deviceList[i],exInfo)==0)
            {
  	    fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
            //strreplace(names,\"plus\",\"minus\");
            //fwFsmTree_addNode(names,getCU(names)+\"::\"+deviceList[i] ,\"FwCaenChannelADCTemp\", 0);
           // DebugN(\"we\",names,getCU(names)+\"::\"+deviceList[i]);
            }
          }  
         
         }
       break;
     
   }
 }
}                
                 
     
 DebugN(\"T ready\");
  
  
  }
void InsertLBB()
{
dyn_string exInfo; 
dyn_string deviceList=dpAliases(\"*/LBB_LV/*\",\"*\"); 
 int pos,pos1;
string names;
for(int i=1;i<=dynlen(deviceList);i++)
{
	pos =strpos(deviceList[i],\"RPC_W\");
	if(pos>-1)
	{
		names = substr(deviceList[i],pos);
		pos1 = strpos(names,\"LBB\");
		names = substr(names,0,pos1+3);
		//DebugN(\"cHc\",names);
		if (fwTree_isNode(deviceList[i],exInfo)==0)
		 fwFsmTree_addNode(names,deviceList[i] ,\"FwCaenChannelLBBLV\", 0);
	}
}
DebugN(\"LBB ready\"); }
void InsertBoards()
{
   int pos,pos1;
string names;
  //Add Boards
  dyn_string exInfo;
dyn_string deviceList=dpAliases(\"*/Boards/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	pos =strpos(deviceList[i],\"_X\");
	if(pos>-1)
	{
	names = substr(deviceList[i],pos);
        //DebugN(pos,deviceList[i][22],deviceList[i][pos-1]);
		//pos1 = strpos(names,\"LBB\");
		//names = substr(names,0,pos1+3);
	fwFsmTree_addNode(\"RPC_W\"+deviceList[i][pos-2]+deviceList[i][pos-1]+\"_Bd\",deviceList[i] ,\"FwCaenBoardEasy\", 0);
	}
	}


DebugN(\"BOARDS ready\");
}
void InsertBcMaoCrate()
{
  //Add BC
 int pos,pos1;
string names;
dyn_string exInfo;
dyn_string deviceList=dpAliases(\"*/BCs/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	fwFsmTree_addNode(\"RPC_BCsUXC\",deviceList[i] ,\"FwCaenBoardSY1527A1676\", 0);
	}
DebugN(\"BC ready\");
//Add MAO

dyn_string deviceList=dpAliases(\"*/MAO/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
        if(fwFsm_isLogicalDeviceName(deviceList[i]))
          DebugN(\"SIIIIIII\");
        
        pos =strpos(deviceList[i],\"PC_\");
        names = substr(deviceList[i],pos-1);
        //DebugN(\"ss\",names,deviceList);
        pos =strpos(names,\"_X\");
        names = substr(names,0,pos);
       DebugN(names,deviceList);
	fwFsmTree_addNode(names+\"_MAO\",deviceList[i] ,\"FwCaenChannelMAO\", 0);
	}

DebugN(\"mao ready\");

//Add Crate
dyn_string deviceList=dpAliases(\"*/Crates/*\",\"*\");
for(int i=1;i<=dynlen(deviceList);i++)
	{
	fwFsmTree_addNode(\"RPC_CratesUXC\",deviceList[i] ,\"FwCaenCrateSY1527Basic\", 0);
	}

DebugN(\"crate ready\");
}

void SetAlarmDevice(){

float diff1,diff2,value;
dyn_string exceptionInfo,split,splitt,summary;
string channelName,channel;
dyn_string boolAlarms = makeDynString(\".actual.Trip\",\".actual.OvC\",\".actual.OvV\",
                   \".actual.UnV\",\".actual.UnC\",\".actual.overHvMax\");
dyn_string deviceList;//=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));
dynAppend(deviceList,dpAliases(\"*/LBB_LV/*\",\"*\"));
for (int i=1;i<=dynlen(deviceList);i++)
 {
 dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\"),
       aTexts = makeDynString(\"OK\", \"Not OK\") ;
 dyn_float limits; 
 dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\"),
       aClasses = makeDynString(\"\", \"_fwErrorAck.\");
  string alertPanel; dyn_string alertPanelParameters; string alertHelp;
 
 deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
 dpGet(deviceList[i]+\".settings.i0\", value);
 if(value != 0)
 {
 diff1=value*0.03;//primo limite al 5%
 diff2=value*0.05;//secondo limite al 10%
 
  
///Set  Alarm channel for Imon
 channel= deviceList[i]+\".actual.iMon\";
 
 dynAppend(summary,channel);
 fwAlertConfig_deactivate(channel,exceptionInfo);  
  limits = makeDynFloat( value-diff2,value-diff1 );
  DebugN(channel);
 fwAlertConfig_set(channel,DPCONFIG_ALERT_NONBINARYSIGNAL ,alertTexts,limits, alertClasses,summary,alertPanel,alertPanelParameters,
             alertHelp,exceptionInfo);
             if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
 fwAlertConfig_activate(channel,exceptionInfo);
 }
 //Set Digital alarm for channel
 for(int j =1;j<=dynlen(boolAlarms);j++)
  {
  
  fwAlertConfig_deactivate(deviceList[i]+boolAlarms[j],exceptionInfo); 
  
  fwAlertConfig_set(deviceList[i]+boolAlarms[j], DPCONFIG_ALERT_BINARYSIGNAL, aTexts, 
      limits, aClasses, summary,  alertPanel, alertPanelParameters, alertHelp,  exceptionInfo);
  
  
    
    fwAlertConfig_activate(deviceList[i]+boolAlarms[j],exceptionInfo); 
    dynAppend(summary, deviceList[i]+boolAlarms[j]) ;            
    }
  
  fwAlertConfig_deactivate(deviceList[i]+\".\",exceptionInfo); 
  fwAlertConfig_set(deviceList[i]+\".\",DPCONFIG_SUM_ALERT , aTexts, 
      limits, aClasses, summary,  alertPanel, alertPanelParameters, alertHelp,  exceptionInfo); 
 //DebugN(deviceList[i],exceptionInfo,summary);
 fwAlertConfig_activate(deviceList[i]+\".\",exceptionInfo); 
 dynClear(summary);
  
              
 }
  AlarmTemp();
 DebugN(\"Set Alarm configuration\");
}
void setRDBManager()
{
 
   string value;
  dyn_string name = makeDynString(\"cms_pvss_rdb\",\"CMS_RPC_PVSS_COND\",\"take_data\");
  //dpGet(getSystemName()+\"CMS_RPCfwSupervisor.ConfDB.RDBparam\",value);
  //name = strsplit(value,\";\");
  string user = fwRDBConfig_getUser();
  if((dynlen(name)==3)&&(user==\"\"))
  {
  DebugN(\"Setting parameters for oracle database\");
      fwRDBConfig_setHost(name[1]);
      fwRDBConfig_setUser(name[2]);
      fwRDBConfig_setPassword(name[3]);
  }
  else 
     DebugN(\"Setting parameter for Oracle DB not found or already set for user \",user,\", starting with default settings\");
}
  
  
  


void SetDeviceConditionDB(){
// Ricorda che dovrebbe partire anche il manager ed essere settato
dyn_string deviceList;//=dpAliases(\"*/HV/*\",\"*\");
setRDBManager();
bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //\"ValueArchive_0000\";//Archive's name
int archiveType=DPATTR_ARCH_PROC_SIMPLESM,count=1,value,l;
int smoothProcedure=DPATTR_TIME_AND_VALUE_SMOOTH ,pos;//set old/new comparition 
float deadband=0.2;
float timeInterval=3600; 
bool isActive; 
dyn_string exceptionInfo,channels,boards;


//dynClear(deviceList);
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));
dynAppend(deviceList,dpAliases(\"*/LBB_LV/*\",\"*\"));
dynAppend(deviceList,dpAliases(\"*/MAO/*\",\"*\"));

for(int i=1;i<=dynlen(deviceList);i++)
{

deviceList[i]=fwDU_getPhysicalName(deviceList[i]);

fwArchive_setMultiple(deviceList[i]+\".actual.iMon\" , archiveClassName,archiveType,smoothProcedure,
					0.2, timeInterval,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".actual.vMon\" , archiveClassName,archiveType,smoothProcedure,
					1, timeInterval,exceptionInfo);
					
// pos = strpos(deviceList[i],\"/chann\");
// boards[i] = substr(deviceList[i],0,pos); 

////************************Slow parameter
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.i0\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 10000,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.v0\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 10000,exceptionInfo);


// Every 6 hours
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.rDwn\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 20000,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.rUp\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 20000,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.tripTime\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 20000,exceptionInfo);
					
// Every Hour
fwArchive_setMultiple(deviceList[i]+\".actual.status\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, timeInterval,exceptionInfo);
					
}

dynClear(deviceList);
dynAppend(deviceList,dpAliases(\"*/T/*\",\"*\"));
for(int i=1;i<=dynlen(deviceList);i++)
{

deviceList[i]=fwDU_getPhysicalName(deviceList[i]);

fwArchive_setMultiple(deviceList[i]+\".actual.temperature\" , archiveClassName,archiveType,DPATTR_TIME_AND_VALUE_SMOOTH,
					0.2, 7200,exceptionInfo);
}



dynClear(deviceList);
dynAppend(deviceList,dpAliases(\"*/Boards/*\",\"*\"));


for(int i=1;i<=dynlen(deviceList);i++)
{
deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
fwArchive_setMultiple(deviceList[i]+\".Temp.Temp1\" , archiveClassName,archiveType,DPATTR_TIME_AND_VALUE_SMOOTH,
					2, 7200,exceptionInfo);

fwArchive_setMultiple(deviceList[i]+\".Information.SerNum\" , archiveClassName,archiveType,DPATTR_COMPARE_OLD_NEW,
					0.2, 7200,exceptionInfo);

}
dynClear(deviceList);


DebugN(\"Set archiving configuration\");
}
void createGroup()
{  
dyn_string dpName = dpNames(\"*\",\"_OPCGroup\");
//DebugN(dpName);
int error;
bool inExists = false,outExists =false;
string newDpIn = \"_FastGroupIn\";
string newDpOut = \"_FastGroupOut\";
string oldIn = \"_CAENOPCGroupIn\";
string oldOut = \"_CAENOPCGroupOut\";
string temp; 
for(int i = 1; i<=dynlen(dpName);i++)
{
  temp = dpSubStr(dpName[i],DPSUB_DP);
  //DebugN(temp);
  if(newDpIn == temp)
  {
    inExists = true;
  }
  if(newDpOut == temp)
    outExists = true;
} 
if(!inExists)
  {
  dpCreate(newDpIn,\"_OPCGroup\");
  dpCopyOriginal(oldIn,newDpIn,error);
  DebugN(\"error: \",error);
  }
  if(!outExists)
  {
  dpCreate(newDpOut,\"_OPCGroup\");
  dpCopyOriginal(oldOut,newDpOut,error);
  //DebugN(\"error: \",error);
  }


  dpSet(newDpIn +\".UpdateRateReq\",2000);
  dpSet(newDpIn +\".UpdateRateAct\",2000);
  dpSet(newDpOut +\".UpdateRateReq\",2000);
  dpSet(newDpOut +\".UpdateRateAct\",2000);
  dpSet(oldIn +\".UpdateRateReq\",10000);
  dpSet(oldIn +\".UpdateRateAct\",10000);
  dpSet(oldOut +\".UpdateRateReq\",10000);
  dpSet(oldOut +\".UpdateRateAct\",10000);

}
void deleteOld()
{
  //DeleteFSM();
  fwFsmTree_removeNode(\"FSM\",\"RPC_BARREL_HWUXC\");
  //DeleteHW();
  //DeleteDps();
  DeleteLogical();
  DebugN(\"FSM UXC component successfully deleted\");
  
  //DeleteDps();
  
  
  
  }
void DeleteLogical()
{
  string type;
  dyn_string exInfo;
  dyn_string deviceList = dpNames(\"*\",\"FwNode\");
  //DebugN(deviceList);
  fwDevice_initialize();  
  for(int i = 1 ;i<=dynlen(deviceList);i++)
    {
    dpGet(deviceList[i]+\".type\",type);
    if(strpos(type,\"LOGICAL\")>-1)
    {
    //  DebugN(deviceList[i]);
    dpDelete(deviceList[i]);  
    }
  }
}

void DeleteHW(){
   fwDevice_initialize();   
  dyn_string exceptionInfo;
  dyn_string localCrates = dpNames(getSystemName()+\"*CAEN?*\", \"FwCaenCrateSY1527\");
  
  DebugN(localCrates);
  for(int i = 1;i<=dynlen(localCrates);i++)
  {
   if(strpos(localCrates[1],\"lv\")>-1)
       fwDevice_delete(localCrates[i], exceptionInfo);  
  }
  
  DebugN(\"---Caen hardware deleted.\"); 
  
  }

void DeleteFSM()
{
  //dyn_string nodes,nnodes,exInfo,type = makeDynString(\"LV\",\"MAO\",\"T\",\"LBB\",\"UXC\"),nodesTypes;
  bool find = false, delAll = false;
  int f =1;
  fwTree_getChildren(\"RPC_BARREL_HWUXC\",nodes,exInfo);
  for(int i = 1; i<=dynlen(nodes);i++ )
  {
    DebugN(\"Deleting \",nodes[i]);
    for(int j = 1;j<=dynlen(type);j++)
    {
      if(strpos(nodes[i],type[j])>-1)
      {
        fwFsmTree_removeNode(\"RPC_BARREL_HWUXC\",nodes[i]);
        fwCU_getDp(nodes[i], nodesTypes[f]);
        f++;
      }
      else if(strpos(nodes[i],\"oard\")>-1)
      {
        fwTree_getChildren(nodes[i],nnodes,exInfo);
        for(int k = 1; k<=dynlen(nnodes);k++)
          if(strpos(nnodes[k],\"UXC\")>-1)
          {
            fwFsmTree_removeNode(nodes[i],nnodes[k]);
        fwCU_getDp(nodes[i], nodesTypes[f]);
        f++;
      }
        fwTree_getChildren(nodes[i],nnodes,exInfo);
        if(dynlen(nnodes)==0)
        {
          fwFsmTree_removeNode(\"RPC_BARREL_HWUXC\",nodes[i]);
          fwCU_getDp(nodes[i], nodesTypes[f]);
        f++;
      }
          
        }
        
              
      }
   }
  fwTree_getChildren(\"RPC_BARREL_HWUXC\",nodes,exInfo);
  if(dynlen(nodes)==0)
  {
          fwFsmTree_removeNode(\"FSM\",\"RPC_BARREL_HWUXC\");
           fwCU_getDp(\"RPC_BARREL_HWUXC\", nodesTypes[f]);
        f++;
        delAll = true;
        }
  dynUnique(nodesTypes);
  if(delAll)
  {
      for (int i = 1; i <= dynlen(nodesTypes); i++)
  {
    DebugN(\"Starting delete all nodes type \", nodesTypes[i]);  
     //   dpDelete(nodesTypes[i]); 
  }
  
    }
   
  
  }

" 0
 E E E
13 3
"PUSH_BUTTON3"
""
1 280 122 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 278 120 462 204

T 
1
LANG:1 13 Deletescript

"/*
* Created by Giovanni Polese (Lappeenranta University of Technology
*	date:08/05/2007
*	LastChange:28/11/2007
*
*
*/
main()
{
 deleteOld();

}
void deleteOld()
{
  //DeleteFSM();
  fwFsmTree_removeNode(\"FSM\",\"RPC_BARREL_HWUXC\");
  //DeleteHW();
  //DeleteDps();
  DeleteLogical();
  DebugN(\"FSM UXC component successfully deleted\");
  
  //DeleteDps();
  
  
  
  }
void DeleteLogical()
{
  string type;
  dyn_string exInfo;
  dyn_string deviceList = dpNames(\"*\",\"FwNode\");
  //DebugN(deviceList);
  fwDevice_initialize();  
  for(int i = 1 ;i<=dynlen(deviceList);i++)
    {
    dpGet(deviceList[i]+\".type\",type);
    if(strpos(type,\"LOGICAL\")>-1)
    {
    //  DebugN(deviceList[i]);
    dpDelete(deviceList[i]);  
    }
  }
}

void DeleteHW(){
   fwDevice_initialize();   
  dyn_string exceptionInfo;
  dyn_string localCrates = dpNames(getSystemName()+\"*CAEN?*\", \"FwCaenCrateSY1527\");
  
  DebugN(localCrates);
  for(int i = 1;i<=dynlen(localCrates);i++)
  {
   if(strpos(localCrates[1],\"lv\")>-1)
       fwDevice_delete(localCrates[i], exceptionInfo);  
  }
  
  DebugN(\"---Caen hardware deleted.\"); 
  
  }

void DeleteFSM()
{
  //dyn_string nodes,nnodes,exInfo,type = makeDynString(\"LV\",\"MAO\",\"T\",\"LBB\",\"UXC\"),nodesTypes;
  bool find = false, delAll = false;
  int f =1;
  fwTree_getChildren(\"RPC_BARREL_HWUXC\",nodes,exInfo);
  for(int i = 1; i<=dynlen(nodes);i++ )
  {
    DebugN(\"Deleting \",nodes[i]);
    for(int j = 1;j<=dynlen(type);j++)
    {
      if(strpos(nodes[i],type[j])>-1)
      {
        fwFsmTree_removeNode(\"RPC_BARREL_HWUXC\",nodes[i]);
        fwCU_getDp(nodes[i], nodesTypes[f]);
        f++;
      }
      else if(strpos(nodes[i],\"oard\")>-1)
      {
        fwTree_getChildren(nodes[i],nnodes,exInfo);
        for(int k = 1; k<=dynlen(nnodes);k++)
          if(strpos(nnodes[k],\"UXC\")>-1)
          {
            fwFsmTree_removeNode(nodes[i],nnodes[k]);
        fwCU_getDp(nodes[i], nodesTypes[f]);
        f++;
      }
        fwTree_getChildren(nodes[i],nnodes,exInfo);
        if(dynlen(nnodes)==0)
        {
          fwFsmTree_removeNode(\"RPC_BARREL_HWUXC\",nodes[i]);
          fwCU_getDp(nodes[i], nodesTypes[f]);
        f++;
      }
          
        }
        
              
      }
   }
  fwTree_getChildren(\"RPC_BARREL_HWUXC\",nodes,exInfo);
  if(dynlen(nodes)==0)
  {
          fwFsmTree_removeNode(\"FSM\",\"RPC_BARREL_HWUXC\");
           fwCU_getDp(\"RPC_BARREL_HWUXC\", nodesTypes[f]);
        f++;
        delAll = true;
        }
  dynUnique(nodesTypes);
  if(delAll)
  {
      for (int i = 1; i <= dynlen(nodesTypes); i++)
  {
    DebugN(\"Starting delete all nodes type \", nodesTypes[i]);  
     //   dpDelete(nodesTypes[i]); 
  }
  
    }
   
  
  }

" 0
 E E E
13 5
""
""
1 20 128 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 18 126 224 240

T 
1
LANG:1 4 feb

"bool flag = true;
main()
{
  //string num;
  createFebDp();
  //createMap();
  Debug(\"end\");
}
string findPath()
{
  dyn_dyn_string comp;
  fwInstallation_getInstalledComponents(comp);
  for(int i =1;i<=dynlen(comp);i++)
    if(comp[i][1]==\"fwCore\")
      return comp[i][3];  
  }

CreatedpMap(string num)
{
  dyn_dyn_string names;
  dyn_dyn_int types;
  //DebugN(dpSubStr($2,DPSUB_SYS)+\"Board\"+num);
  dyn_string typi = dpNames(\"*\",\"RpcFebGeo\");
  //DebugN(\"No tipi\",typi);
  if(dynlen(typi)<1)
    CreateTypeMap();
  //DebugN(num,types);
  dpCreate(num,\"RpcFebGeo\");
  
  //dyn_float values = makeDynFloat(-1,-1,-1,-1,-1,-1);
}
CreateTypeMap()
{
  int n;

dyn_dyn_string xxdepes;

dyn_dyn_int xxdepei;

 

// Create the data type

xxdepes[1] = makeDynString (\"RpcFebGeo\",\"\");
xxdepes[2] = makeDynString (\"\",\"febIds\");

xxdepei[1] = makeDynInt (1);
xxdepei[2] = makeDynInt (0,DPEL_STRING);

 

// Create the datapoint type

n = dpTypeCreate(xxdepes,xxdepei);

DebugN (\"Datapoint Type created \",n);


  
  
  }
void createMap(){
  
string path;

 string paths = findPath();
// fwInstallation_getProjPaths(paths);
 // DebugN(\"proj paths \", paths);
 string fname=\"/config/CMS_RPCfwHardwareBarrel/barrel.csv\",st;
 bool is = false;
    //DebugN(paths + fname);
    if ((access(paths + fname, F_OK) == 0)) {
    fname = paths + fname;
    is = true;
     }
dyn_dyn_string elenco;
 if(is)
 {
//DebugN(sps,fname); 
file f;
int i = 1; 
string dummy;

f=fopen(fname,\"r\");//
//DebugN(i);
while (feof(f)==0) // so long as it is not at the end
{
 
fgets(dummy,100,f);  // reads from the file in dummy
elenco[i]=strsplit(dummy,\",\"); 
//DebugN(dummy);
i = i+1;
}
 dyn_string tempp;
fclose(f);
 DebugN(elenco[dynlen(elenco)]);
 int pos;
for(int y = 1 ;y<=dynlen(elenco);y++)
 {
  if(dynlen(elenco[y])>1)
  {
//   if(strpos(elenco[y][2],\"/\")>-1)
//     strreplace(elenco[y][2],\"/\",\"_\");
   
   tempp = strsplit(elenco[y][2],\"/\");
  
  if(strpos(tempp[1],\"-\")>-1)
    strreplace(tempp[1],\"-\",\"M\");
  if(strpos(tempp[1],\"+\")>-1)
    strreplace(tempp[1],\"+\",\"P\");
  if(strpos(tempp[1],\"W0\")>-1)
    strreplace(tempp[1],\"W0\",\"W00\");
 
  pos = strpos(tempp[3],\"-\"); 
  if(pos>-1)
  {
    tempp[2] = tempp[2] + \"minus\";
    if(strpos(tempp[3],\"--\")>-1)
      tempp[2] = tempp[2] + \"minus\";
    tempp[3] = substr(tempp[3],0,pos);
  }
  pos = strpos(tempp[3],\"+\");
  if(pos>-1)
  {
     tempp[2] = tempp[2] + \"plus\";
      if(strpos(tempp[3],\"++\")>-1)
      tempp[2] = tempp[2] + \"plus\";
     tempp[3] = substr(tempp[3],0,pos);
   }
  if(strlen(tempp[3])==1)
    tempp[3] = \"0\"+ tempp[3];
  //DebugN(tempp[1]+\"_S\"+tempp[3]+\"_\"+tempp[2]);
  
  insertFeb(\"Feb_\"+ tempp[1]+\"_S\"+tempp[3]+\"_\"+tempp[2],elenco[y][1]);
  } 
}
 }  
  
}
void insertFeb(string name,string id)
{
  string temp;
  DebugN(name,id);
  if(!dpExists(name))
      {
      //DebugN(\"si crea\");
      CreatedpMap(name);    
      dpSet(name+\".febIds\",id);
      }
  else
  {
    dpGet(name+\".febIds\",temp);
    temp = temp + \";\"+id;
    dpSet(name+\".febIds\",temp);
    }
  
  
  
  
  }

void createFebDp()
{
   int num;
   for(int i =1;i<=7720;i++)
   {
     if((i<2269)||(i>3000))
     {
      if(!dpExists(\"Feb\"+i))
      {
      CreateDP(\"Feb\"+i);    
      //setArch(sysName+\"Board\"+num);
      }
  //FillTable(num); 
    }
   }   
  DebugN(\"end\"); 
  
  }
void setArch(string value){
  
// string archiveClassName=\"RDB-99) EVENT\"; //\"ValueArchive_0000\";//Archive's name
// int archiveType=DPATTR_ARCH_PROC_SIMPLESM,count=1,value,l;
// int smoothProcedure=DPATTR_COMPARE_OLD_NEW,pos;//set old/new comparition 
// float deadband=0.2;
// float timeInterval=3600; 
// bool isActive; 
// dyn_string exceptionInfo,channels,boards;
// 
// fwArchive_setMultiple(value , archiveClassName,archiveType,smoothProcedure,
// 					0.3, timeInterval,exceptionInfo);
  
  }
CreateDP(string num)
{
  dyn_dyn_string names;
  dyn_dyn_int types;
  //DebugN(dpSubStr($2,DPSUB_SYS)+\"Board\"+num);
  dyn_string typi = dpNames(\"*\",\"RpcFeb\");
  //DebugN(\"rr\",typi);
  if(dynlen(typi)<1)
    CreateType();
  //DebugN(num,types);
  dpCreate(num,\"RpcFeb\");
  if(flag)
    dpSet(num + \".temperature\",20);
  else
    dpSet(num + \".temperature\",21);
  flag = !flag;
  
  //dyn_float values = makeDynFloat(-1,-1,-1,-1,-1,-1);
}
CreateType()
{
  int n;

dyn_dyn_string xxdepes;

dyn_dyn_int xxdepei;

 

// Create the data type

xxdepes[1] = makeDynString (\"RpcFeb\",\"\");

xxdepes[2] = makeDynString (\"\",\"vth1\");
xxdepes[3] = makeDynString (\"\",\"vth2\");
xxdepes[4] = makeDynString (\"\",\"vth3\");
xxdepes[5] = makeDynString (\"\",\"vth4\");
xxdepes[6] = makeDynString (\"\",\"vmon1\");
xxdepes[7] = makeDynString (\"\",\"vmon2\");
xxdepes[8] = makeDynString (\"\",\"vmon3\");
xxdepes[9] = makeDynString (\"\",\"vmon4\");
xxdepes[10] = makeDynString (\"\",\"temperature\");
xxdepes[11] = makeDynString (\"\",\"position\");

xxdepei[1] = makeDynInt (1);
xxdepei[2] = makeDynInt (0,DPEL_FLOAT);
xxdepei[3] = makeDynInt (0,DPEL_FLOAT);
xxdepei[4] = makeDynInt (0,DPEL_FLOAT);
xxdepei[5] = makeDynInt (0,DPEL_FLOAT);
xxdepei[6] = makeDynInt (0,DPEL_FLOAT);
xxdepei[7] = makeDynInt (0,DPEL_FLOAT);
xxdepei[8] = makeDynInt (0,DPEL_FLOAT);
xxdepei[9] = makeDynInt (0,DPEL_FLOAT);
xxdepei[10] = makeDynInt (0,DPEL_FLOAT);
xxdepei[11] = makeDynInt (0,DPEL_STRING);

 

// Create the datapoint type
dyn_string dd = dpTypes(\"RpcFeb\");
if(dynlen(dd)==0)
{
  n = dpTypeCreate(xxdepes,xxdepei);
  DebugN (\"Datapoint Type created \",n);
}
else
  DebugN (\"Datapoint Type already created \");

  
  
  }
" 0
 E E E
13 6
"PUSH_BUTTON5"
""
1 292 238 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 290 236 416 274

T 
1
LANG:1 12 Crea Logical
"main()
{
dyn_string exInfo;

fillWheel(\"WP2\",0);
fillWheel(\"WP1\",2);
fillWheel(\"WM1\",8);
 fillWheel(\"WM2\",10);
// fillWheel(\"WP2\");
// fillWheel(\"WP2\");
fillZero(4,6);

/* Il +1s10 
*/
// HV(numero canale, branch, crate, 1)
// LV (nome,numero,branch,crate)
/* completaLV(\"RPC_WP2_S01\",1,0,2);
 completaLV(\"RPC_WP2_S02\",13,0,2);
 completaLV(\"RPC_WP2_S03\",25,0,2);
 
 completaLV(\"RPC_WP2_S04\",1,0,3);
 completaLV(\"RPC_WP2_S05\",13,0,3);
 completaLV(\"RPC_WP2_S06\",25,0,3);
 
 completaLV(\"RPC_WP2_S07\",1,0,5);
 completaLV(\"RPC_WP2_S08\",13,0,5);
 completaLV(\"RPC_WP2_S09\",25,0,5);
 
 completaLV(\"RPC_WP2_S10\",1,0,0);
 completaLV(\"RPC_WP2_S11\",13,0,0);
 completaLV(\"RPC_WP2_S12\",25,0,0);
 
 //LBB


*/

//completaT(\"RPC_WP1_S10\",32,1,0,6);//2 LV + 1 pl = 30ch.
// 
// completaT(\"RPC_WP2_S01\",1,0,0,5);
// completaT(\"RPC_WP2_S02\",6,0,0,5);
// completaT(\"RPC_WP2_S03\",11,0,0,5);
// completaT(\"RPC_WP2_S10\",16,0,0,6);
// completaT(\"RPC_WP2_S11\",22,0,0,5);
// completaT(\"RPC_WP2_S12\",27,0,0,5);
// 
// 
// completaT(\"RPC_WP2_S04\",1,0,5,6);
// completaT(\"RPC_WP2_S05\",7,0,5,5);
// completaT(\"RPC_WP2_S06\",12,0,5,5);
// completaT(\"RPC_WP2_S07\",17,0,5,5);
// completaT(\"RPC_WP2_S08\",22,0,5,5);
// completaT(\"RPC_WP2_S09\",27,0,5,5);

// Boards
/*

 completaBoard(\"RPC_WP2_X1N\",0,0);
 completaBoard(\"RPC_WP2_X2N\",0,1);
 completaBoard(\"RPC_WP2_X3N\",0,2);
 completaBoard(\"RPC_WP2_X1F\",0,5);
 completaBoard(\"RPC_WP2_X2F\",0,4);
 completaBoard(\"RPC_WP2_X3F\",0,3);
 
 // MAO
 completaMAO(\"RPC_WP2_X2F\",0,5);
 //completaMAO(\"RPC_WP2_X2F\",1,4);
 
 
*/

 
 completaCrate();
fwNode_initialize();
// 
 fwNode_createLogical(\"RPCBarrel\",\"\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"1\",exInfo);
 fwNode_createLogical(\"LV\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
//DebugN(\"2\",exInfo);
fwNode_createLogical(\"LBB_LV\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
//DebugN(\"3\",exInfo);
 fwNode_createLogical(\"Crates\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"4\",exInfo);
 fwNode_createLogical(\"T\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"5\",exInfo);
 fwNode_createLogical(\"Boards\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"6\",exInfo);
 fwNode_createLogical(\"BCs\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"7\",exInfo);
 fwNode_createLogical(\"MAO\",\"RPCBarrel\",makeDynString(\"fwDevice/fwDeviceManage\"),makeDynString(\"fwDevice/fwDeviceManage\"),exInfo);
// DebugN(\"8\",exInfo);
 DebugN(\"DONE\");

}
void fillZero(int bc1, int bc2)
{
  string num = \"W00\";
  completaLV(\"RPC_\"+num+\"_S01\",1,bc1,2);
 completaLV(\"RPC_\"+num+\"_S02\",13,bc1,2);
 completaLV(\"RPC_\"+num+\"_S03\",25,bc1,2);
 
 completaLV(\"RPC_\"+num+\"_S04\",1,bc2,2);
 completaLV(\"RPC_\"+num+\"_S05\",13,bc2,2);
 completaLV(\"RPC_\"+num+\"_S06\",25,bc2,2);
 
 completaLV(\"RPC_\"+num+\"_S07\",1,bc2,1);
 completaLV(\"RPC_\"+num+\"_S08\",13,bc2,1);
 completaLV(\"RPC_\"+num+\"_S09\",25,bc2,1);
 
 completaLV(\"RPC_\"+num+\"_S10\",1,bc1,1);
 completaLV(\"RPC_\"+num+\"_S11\",13,bc1,1);
 completaLV(\"RPC_\"+num+\"_S12\",25,bc1,1);
  
 completaLVLBB(\"RPC_\"+num+\"_S10\",1,bc1,0);
 completaLVLBB(\"RPC_\"+num+\"_S11\",5,bc1,0);
 completaLVLBB(\"RPC_\"+num+\"_S12\",9,bc1,0);
 completaLVLBB(\"RPC_\"+num+\"_S01\",13,bc1,0);
 completaLVLBB(\"RPC_\"+num+\"_S02\",17,bc1,0);
 completaLVLBB(\"RPC_\"+num+\"_S03\",21,bc1,0);
 
 completaLVLBB(\"RPC_\"+num+\"_S04\",1,bc2,0);
 completaLVLBB(\"RPC_\"+num+\"_S05\",5,bc2,0);
 completaLVLBB(\"RPC_\"+num+\"_S06\",9,bc2,0);
 completaLVLBB(\"RPC_\"+num+\"_S07\",13,bc2,0);
 completaLVLBB(\"RPC_\"+num+\"_S08\",17,bc2,0);
 completaLVLBB(\"RPC_\"+num+\"_S09\",21,bc2,0);
  
 
completaT(\"RPC_\"+num+\"_S01\",3,bc1,1,5);
completaT(\"RPC_\"+num+\"_S02\",10,bc1,1,5);
completaT(\"RPC_\"+num+\"_S03\",17,bc1,1,5);
completaT(\"RPC_\"+num+\"_S10\",34,bc1,1,6);
completaT(\"RPC_\"+num+\"_S11\",42,bc1,1,5);
completaT(\"RPC_\"+num+\"_S12\",49,bc1,1,5);


completaT(\"RPC_\"+num+\"_S04\",2,bc2,1,6);
completaT(\"RPC_\"+num+\"_S05\",10,bc2,1,5);
completaT(\"RPC_\"+num+\"_S06\",17,bc2,1,5);
completaT(\"RPC_\"+num+\"_S07\",35,bc2,1,5);
completaT(\"RPC_\"+num+\"_S08\",42,bc2,1,5);
completaT(\"RPC_\"+num+\"_S09\",49,bc2,1,5);

 completaBoard(\"RPC_\"+num+\"_X1N\",bc1,0);
 completaBoard(\"RPC_\"+num+\"_X2N\",bc1,1);
 completaBoard(\"RPC_\"+num+\"_X3N\",bc1,2);
 completaBoard(\"RPC_\"+num+\"_X1F\",bc2,0);
 completaBoard(\"RPC_\"+num+\"_X2F\",bc2,1);
 completaBoard(\"RPC_\"+num+\"_X3F\",bc2,2);

completaMAO(\"RPC_\"+num+\"_X2F\",bc2,0);
completaMAO(\"RPC_\"+num+\"_X2N\",bc1,0);
completaBC(bc1,num+\"_N\");  
completaBC(bc2,num+\"_F\");   
   
  }
void fillWheel(string num,int bc)
{
 completaLV(\"RPC_\"+num+\"_S01\",1,bc,2);
 completaLV(\"RPC_\"+num+\"_S02\",13,bc,2);
 completaLV(\"RPC_\"+num+\"_S03\",25,bc,2);
 
 completaLV(\"RPC_\"+num+\"_S04\",1,bc,3);
 completaLV(\"RPC_\"+num+\"_S05\",13,bc,3);
 completaLV(\"RPC_\"+num+\"_S06\",25,bc,3);
 
 completaLV(\"RPC_\"+num+\"_S07\",1,bc,5);
 completaLV(\"RPC_\"+num+\"_S08\",13,bc,5);
 completaLV(\"RPC_\"+num+\"_S09\",25,bc,5);
 
 completaLV(\"RPC_\"+num+\"_S10\",1,bc,0);
 completaLV(\"RPC_\"+num+\"_S11\",13,bc,0);
 completaLV(\"RPC_\"+num+\"_S12\",25,bc,0);
  
 completaLVLBB(\"RPC_\"+num+\"_S10\",1,bc,1);
 completaLVLBB(\"RPC_\"+num+\"_S11\",5,bc,1);
 completaLVLBB(\"RPC_\"+num+\"_S12\",9,bc,1);
 completaLVLBB(\"RPC_\"+num+\"_S01\",13,bc,1);
 completaLVLBB(\"RPC_\"+num+\"_S02\",17,bc,1);
 completaLVLBB(\"RPC_\"+num+\"_S03\",21,bc,1);
 
 completaLVLBB(\"RPC_\"+num+\"_S04\",1,bc,4);
 completaLVLBB(\"RPC_\"+num+\"_S05\",5,bc,4);
 completaLVLBB(\"RPC_\"+num+\"_S06\",9,bc,4);
 completaLVLBB(\"RPC_\"+num+\"_S07\",13,bc,4);
 completaLVLBB(\"RPC_\"+num+\"_S08\",17,bc,4);
 completaLVLBB(\"RPC_\"+num+\"_S09\",21,bc,4);
  
 
completaT(\"RPC_\"+num+\"_S01\",3,bc,0,5);
completaT(\"RPC_\"+num+\"_S02\",10,bc,0,5);
completaT(\"RPC_\"+num+\"_S03\",17,bc,0,5);
completaT(\"RPC_\"+num+\"_S10\",34,bc,0,6);
completaT(\"RPC_\"+num+\"_S11\",42,bc,0,5);
completaT(\"RPC_\"+num+\"_S12\",49,bc,0,5);


completaT(\"RPC_\"+num+\"_S04\",2,bc,5,6);
completaT(\"RPC_\"+num+\"_S05\",10,bc,5,5);
completaT(\"RPC_\"+num+\"_S06\",17,bc,5,5);
completaT(\"RPC_\"+num+\"_S07\",35,bc,5,5);
completaT(\"RPC_\"+num+\"_S08\",42,bc,5,5);
completaT(\"RPC_\"+num+\"_S09\",49,bc,5,5);

 completaBoard(\"RPC_\"+num+\"_X1N\",bc,0);
 completaBoard(\"RPC_\"+num+\"_X2N\",bc,1);
 completaBoard(\"RPC_\"+num+\"_X3N\",bc,2);
 completaBoard(\"RPC_\"+num+\"_X1F\",bc,5);
 completaBoard(\"RPC_\"+num+\"_X2F\",bc,4);
 completaBoard(\"RPC_\"+num+\"_X3F\",bc,3);

completaMAO(\"RPC_\"+num+\"_X2F\",bc,4);
completaMAO(\"RPC_\"+num+\"_X2N\",bc,1);
completaBC(bc,num); 
DebugN(\"end wheel\"); 
  
  }

void completaBC(int bc,string names){
  string bbc;
  if(bc<10)
    bbc = \"0\"+bc;
  else
    bbc=bc;
  string bcs = dpNames(\"*er\"+bbc+\"*\",\"FwCaenBoardSY1527A1676\");
//dyn_string names = makeDynString(\"UXC_WP2\",\"UXC_WP1\",\"UXC_W0Near\",\"UXC_W0Far\",\"UXC_WM1\",\"UXC_WM2\");
//for (int i=1;i<=dynlen(names);i++)
	{
	//dyn_string name = strsplit(sys[i],\"/\");
	dpSetAlias (bcs+\".\",\"RPCBarrel/BCs/RPC_UXC_\"+names+\"_BC\");
	}



}

void completaCrate(){

dyn_string sys = dpNames(\"*\",\"FwCaenCrateSY1527\");
for (int i=1;i<=dynlen(sys);i++)
	{
	//dyn_string name = strsplit(sys[i],\"/\");
	dpSetAlias (sys[i]+\".\",\"RPCBarrel/Crates/RPCSY1527BarrelS4\");
	}

}

void completaMAO(string name, int br, int cr) { 
dyn_string nodes,anodes,exInfo; 

dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/pow*\",\"FwCaenChannel\"); 
int j=1; 

for(int i=1;i<=dynlen(deviceList);i++) {
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/MAO/\"+name+\"MAOch0\"+i);
	j++;
	
	}
DebugN(\"Fine MAO\");
}


void completaBoard(string name, int br, int cr) { 
dyn_string nodes,anodes,exInfo; 
string nome;
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenBoardEasy\"); 
int j=1; 

for(int i=1;i<=dynlen(deviceList);i++) {
	if(i==5)
		nome = \"_MAO\";
	else
		nome = \"_B0\"+i;		
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/Boards/\"+name+nome);
	j++;
	
	}
DebugN(\"Fine Board\");
}


void completaLVLBB(string name, int num,int br, int cr) { 
dyn_string nodes,anodes,exInfo; 
dyn_string cham=makeDynString(\"_LBB25_1\",\"_LBB33_1\",\"_LBB25_11\",\"_LBB33_11\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);

for (int i=1;i<=dynlen(cham);i++)
	{
	nodes[i]= name+cham[i]+\"_LV\";
	}
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\"); 
int j=num; 

for(int i=1;i<=dynlen(nodes);i++) {
	//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LBB_LV/\"+nodes[i]);
	j++;
	
	}
DebugN(\"Fine LBB\");
}





void completaHV(string name, int num,int br, int cr, int nHV) {


dyn_string nodes,anodes,exInfo;
dyn_string
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4minus\",     
\"_RB4plus\",\"_RB4minusminus\",\"_RB4plusplus\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);
if((strpos(name,\"S11\")>1)||(strpos(name,\"S09\")>1))
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3minus\",\"_RB3plus\",\"_RB4\",
                                \"_RB4minusminus\",\"_RB4plusplus\");
int dim = dynlen(cham)-2;
if(strpos(name,\"S04\")>1)
	dim = dynlen(cham);
	

for (int i=1;i<=dim;i++)
	{
	nodes[i]=name+cham[i]+\"_HV\";
	}

dyn_string
deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\");
dynAppend(deviceList,dpNames(\"*\"+br+\"/easyCrate\"+(cr+1)+\"/*\",\"FwCaenChannel\"));
int j = num;
for(int i=1;i<=dynlen(nodes);i++)
	{
	if(nHV == 1)
		{
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]);
		j++;
		}
	else if(nHV==2)
		{
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]+\"_UP\");
		j++;
		dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/HV/\"+nodes[i]+\"_DOWN\");
		j++;
		}
	//DebugN(re);
	}
DebugN(\"Fine HV\");
}

void completaLV(string name, int num,int br, int cr) { dyn_string
nodes,anodes,exInfo; dyn_string
cham=makeDynString(\"_RB1in\",\"_RB1out\",\"_RB2in\",\"_RB2out\",\"_RB3\",\"_RB3\",\"_RB4\",
                                \"_RB4\",\"_RB4minusminus\",\"_RB4plusplus\");
//fwTree_getChildren(\"RPC_WP1_S10\", nodes, exInfo);

for (int i=1;i<=(dynlen(cham)-2);i++)
{
nodes[i]= name+cham[i]+\"_LV\";
}
dyn_string
deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannel\");
int j=num;
for(int i=1;i<=dynlen(nodes);i++)
{
if(i!=6&&i!=8)
{
//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"1\");
dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+nodes[i]+\"_ANA\");
j++;
//dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+anodes[2]+\"2\");
dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/LV/\"+nodes[i]+\"_DIG\");
j++;
}
//DebugN(re);
}
DebugN(\"Fine LV\");
}
void completaT(string name, int num,int br, int cr, int tot)
{

dyn_string cham=makeDynString(\"_RB1in_T\",\"_RB1out_T\",\"_RB2_T\",\"_RB3_T\",\"_RB4minus_T\",\"_RB4plus_T\");
if(tot== 5)
	cham[5]=\"_RB4_T\";
dyn_string deviceList=dpNames(\"*\"+br+\"/easyCrate\"+cr+\"/*\",\"FwCaenChannelADC\");
int j = num;
DebugN(deviceList);
 for(int i = tot;i>=1;i--)
 	{
 	DebugN(\"RPCBarrel/T/\"+name+cham[i]);
 	dpSetAlias (deviceList[j]+\".\",\"RPCBarrel/T/\"+name+cham[i]);
 	j++;
 	}
DebugN(\"Fine T\");
}
" 0
 E E E
13 7
"Button2"
""
1 56 270 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
9 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 84 -*-Arial-*-r-normal-*-13-*-100-100-*-*-iso8859-1|-13,0,0,0,404,0,0,0,0,0,0,0,0,Arial
0 ""
 54 268 170 310

T 
1
LANG:1 11 Settavalori
"main()
{

dyn_string list=makeDynString(\".i0\",\".vMaxSoftValue\",\".v0\",
               \".tripTime\",\".rUp\",\".rDwn\");

               
string logName;
float value; 
dyn_string channels = dpNames(\"*\",\"FwCaenChannel\"); 

for(int i = 1; i<=dynlen(channels);i++) 
 { 
  logName = fwDU_getLogicalName(channels[i]);
  //DebugN(logName);
if((strpos(logName,\"ANA\")>1)||(strpos(logName,\"DIG\")>1))
  	{
  	LVChann(channels[i],logName);
    }
    else if(strpos(logName,\"LBB\")>1)
  	{
  	LBBChann(channels[i],logName);
    }
     else if(strpos(logName,\"MAO\")>1)
  	{
  	MAO(channels[i],logName);
    }
    //DebugN(channels[i]);  
 } 
DebugN(\"Fin\");
}
MAO(string dpe,string logName)
{
dyn_string list=makeDynString(\".i0\",\".vMaxSoftValue\",\".v0\",\".tripTime\");
                              
dyn_string value=makeDynString(\"40\",\"52\",\"48\",\"1\");

// DebugN(dpe,value);         
for(int j=1;j<=dynlen(list);j++)
   		{
   	
    	//dpGet(channels[i]+\".readBackSettings\"+list[j],value); 
        //DebugN(logName,\"sas\",value); 
        dpSet(dpe+\".settings\"+list[j],value[j]);
        //dpSet(dpe+\".readBackSettings\"+list[j],value[j]);  
    	}
    	

}
LVChann(string dpe,string logName)
{
dyn_string list=makeDynString(\".i0\",\".vMaxSoftValue\",\".v0\",\".tripTime\");
                              
dyn_string value=makeDynString(\"2\",\"8\",\"7\",\"1\");
	if(strpos(logName,\"DIG\")>1)
{
   			value[1] = \"3\";
                        value[3] = \"7.5\";
                        }  else
   	 value[1] = \"2\";
// DebugN(dpe,value);         
for(int j=1;j<=dynlen(list);j++)
   		{
   	
    	//dpGet(channels[i]+\".readBackSettings\"+list[j],value); 
        //DebugN(logName,\"sas\",value); 
        dpSet(dpe+\".settings\"+list[j],value[j]);
        //dpSet(dpe+\".readBackSettings\"+list[j],value[j]);  
    	}
    	

}
LBBChann(string dpe,string logName)
{
dyn_string list=makeDynString(\".i0\",\".vMaxSoftValue\",\".v0\",\".tripTime\");
                              
dyn_string value=makeDynString(\"5\",\"3\",\"2.55\",\"1\");

          
for(int j=1;j<=dynlen(list);j++)
   		{
   		if(strpos(logName,\"33\")>1)
   			{
   			value[3] = 3.35;
   			value[2] = 4;
   			value[1] = 10;
                           if(((strpos(logName,\"S10\")>-1)||(strpos(logName,\"S04\")>-1))&&(strpos(logName,\"_1_\")>-1))
                            value[1]=12;
                           if((strpos(logName,\"W00_S04\")>-1)&&(strpos(logName,\"_1_\")>-1))
                             value[1]=14;
   			}
             
    	//dpGet(channels[i]+\".readBackSettings\"+list[j],value); 
        //DebugN(dpe,value); 
        dpSet(dpe+\".settings\"+list[j],value[j]); 
        //dpSet(dpe+\".readBackSettings\"+list[j],value[j]); 
    	}
 dynClear(value);

}" 0
 E E E
13 8
"PUSH_BUTTON6"
""
1 210 300 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
10 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 208 298 322 372

T 
1
LANG:1 7 conddb

"main()
{
 SetDeviceConditionDB(); 
 DebugN(\"ss\");
}
void SetDeviceConditionDB(){
// Ricorda che dovrebbe partire anche il manager ed essere settato
dyn_string deviceList;//=dpAliases(\"*/HV/*\",\"*\");
// setRDBManager();
bool configExists; 
string archiveClassName=\"ValueArchive_0000\"; //\"ValueArchive_0000\";//Archive's name
int archiveType=DPATTR_ARCH_PROC_SIMPLESM,count=1,value,l;
int smoothProcedure=DPATTR_TIME_AND_VALUE_SMOOTH ,pos;//set old/new comparition 
float deadband=0.2;
float timeInterval=3600; 
bool isActive; 
dyn_string exceptionInfo,channels,boards;
int ff = 0;

//dynClear(deviceList);
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));
dynAppend(deviceList,dpAliases(\"*/LBB_LV/*\",\"*\"));
dynAppend(deviceList,dpAliases(\"*/MAO/*\",\"*\"));

for(int i=1;i<=dynlen(deviceList);i++)
{
ff++;ff++;ff++;ff++;ff++;ff++;ff++;ff++;
deviceList[i]=fwDU_getPhysicalName(deviceList[i]);

fwArchive_setMultiple(deviceList[i]+\".actual.iMon\" , archiveClassName,archiveType,smoothProcedure,
					0.2, timeInterval,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".actual.vMon\" , archiveClassName,archiveType,smoothProcedure,
					1, timeInterval,exceptionInfo);
					
// pos = strpos(deviceList[i],\"/chann\");
// boards[i] = substr(deviceList[i],0,pos); 

////************************Slow parameter
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.i0\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 10000,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.v0\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 10000,exceptionInfo);


// Every 6 hours
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.rDwn\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 20000,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.rUp\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 20000,exceptionInfo);
fwArchive_setMultiple(deviceList[i]+\".readBackSettings.tripTime\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, 20000,exceptionInfo);
					
// Every Hour
fwArchive_setMultiple(deviceList[i]+\".actual.status\" , archiveClassName,archiveType,DPATTR_OLD_NEW_AND_TIME_SMOOTH,
					deadband, timeInterval,exceptionInfo);
					
}

dynClear(deviceList);
dynAppend(deviceList,dpAliases(\"*/T/*\",\"*\"));
for(int i=1;i<=dynlen(deviceList);i++)
{
ff++;
deviceList[i]=fwDU_getPhysicalName(deviceList[i]);

fwArchive_setMultiple(deviceList[i]+\".actual.temperature\" , archiveClassName,archiveType,DPATTR_TIME_AND_VALUE_SMOOTH,
					0.2, 7200,exceptionInfo);
}



dynClear(deviceList);
dynAppend(deviceList,dpAliases(\"*/Boards/*\",\"*\"));


for(int i=1;i<=dynlen(deviceList);i++)
{
deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
fwArchive_setMultiple(deviceList[i]+\".Temp.Temp1\" , archiveClassName,archiveType,DPATTR_TIME_AND_VALUE_SMOOTH,
					0.2, 7200,exceptionInfo);

fwArchive_setMultiple(deviceList[i]+\".Information.SerNum\" , archiveClassName,archiveType,DPATTR_COMPARE_OLD_NEW,
					0.2, 7200,exceptionInfo);
ff++;ff++;
}
dynClear(deviceList);


DebugN(\"Set archiving configuration \",ff);
}
" 0
 E E E
13 9
"PUSH_BUTTON7"
""
1 386 318 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
11 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-11-*-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 384 316 434 366

T 
1
LANG:1 3 wbm
"main()
{
  WBM();
  DebugN(\"end\");
  
}
void WBM(){
  
   dyn_string types;
 

  // Create dp for WBM refresh
  types = dpTypes(\"heartbeat\");
  //DebugN(types);
  if(dynlen(types)<1) 
  {
  int n;

  dyn_dyn_string xxdepes;

  dyn_dyn_int xxdepei;

 

// Create the data type

  xxdepes[1] = makeDynString (\"heartbeat\",\"\");

  xxdepes[2] = makeDynString (\"\",\"timechange\");
  //xxdepes[3] = makeDynString (\"\",\"offset\");


  xxdepei[1] = makeDynInt (1);

  xxdepei[2] = makeDynInt (0,25);

 

 

// Create the datapoint type

  n = dpTypeCreate(xxdepes,xxdepei);

  DebugN (\"Datapoint Type created \");

  }
  if(!dpExists(\"dbConnForWBM\"))
    dpCreate(\"dbConnForWBM\",\"hearbeat\");
  
  //***************** Set Archiving
  bool configExists; 
string archiveClassName=\"RDB-99) EVENT\"; //\"ValueArchive_0000\";//Archive's name
int archiveType=DPATTR_ARCH_PROC_SIMPLESM,count=1,value,l;
dyn_string exceptionInfo;


  
  
  fwArchive_set( \"dbConnForWBM.timechange\", archiveClassName,archiveType,DPATTR_TIME_SMOOTH,
					0.2, 30,exceptionInfo);

  
  
    
}

" 0
 E E E
13 10
"PUSH_BUTTON8"
""
1 374 44 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
12 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-*-80-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 372 42 432 88

T 
1
LANG:1 12 PUSH_BUTTON8
"main()
{
  
  string dpe;
  dpe = dpNames(\"*\",\"heartbeat\");
if(dpe !=\"\")
  {  
while(1)
  {
  dpSet(dpe+\".timechange\",1);
  delay(60,0);
  
  }
}else
  DebugN(\"heartbeat dp not found\");
}" 0
 E E E
13 11
"PUSH_BUTTON9"
""
1 28 334 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
13 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 98 -*-MS Shell Dlg-*-r-normal-*-*-80-100-100-*-*-iso8859-1|-11,0,0,0,505,0,0,0,0,0,0,0,0,MS Shell Dlg
0 ""
 26 332 156 368

T 
1
LANG:1 6 alarmi
"main()
{
  SetAlarmDevice();
  SetAlarmBoard();
  DebugN(\"end\");
}
void SetAlarmBoard(){
  
dyn_string deviceList,exceptionInfo,summary;//=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/Boards/*\",\"*\"));
//DebugN(deviceList);
for(int i = 1;i<=dynlen(deviceList);i++)
{
  if(strpos(deviceList[i],\"MAO\")<0)
  {
    dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\"),
       aTexts = makeDynString(\"OK\", \"Too High\") ;
 dyn_float limits; 
 dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\"),
       aClasses = makeDynString(\"\", \"_fwErrorAck.\");
  string alertPanel; dyn_string alertPanelParameters; string alertHelp;
 
 deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
 
  
///Set  Alarm channel for Imon
string  channel= deviceList[i]+\".Temp.Temp1\";
 
  fwAlertConfig_deactivate(channel,exceptionInfo);  
  limits = makeDynFloat( 35 ,  40 );
  //DebugN(channel);
 fwAlertConfig_set(channel,DPCONFIG_ALERT_NONBINARYSIGNAL ,alertTexts,limits, alertClasses,summary,alertPanel,alertPanelParameters,
             alertHelp,exceptionInfo);
             if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
 fwAlertConfig_activate(channel,exceptionInfo);
      
    }
  } 
  
// Set alarm for Mao temperature


dynClear(deviceList);
dynAppend(deviceList,dpAliases(\"*/MAO/*\",\"*\"));
//DebugN(deviceList);
for(int i = 1;i<=dynlen(deviceList);i++)
{
    dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\"),
       aTexts = makeDynString(\"OK\", \"Too High\") ;
 dyn_float limits; 
 dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\"),
       aClasses = makeDynString(\"\", \"_fwErrorAck.\");
  string alertPanel; dyn_string alertPanelParameters; string alertHelp;
 
 deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
 
  
///Set  Alarm channel for Imon
string  channel= deviceList[i]+\".actual.temp\";
 
  fwAlertConfig_deactivate(channel,exceptionInfo);  
  limits = makeDynFloat( 35 ,  40 );
  //DebugN(channel);
 fwAlertConfig_set(channel,DPCONFIG_ALERT_NONBINARYSIGNAL ,alertTexts,limits, alertClasses,summary,alertPanel,alertPanelParameters,
             alertHelp,exceptionInfo);
             if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
 fwAlertConfig_activate(channel,exceptionInfo);
      
    }
  

  
  
  }
void AlarmTemp(){
dyn_string deviceList,exceptionInfo,summary;//=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/T/*\",\"*\"));

for (int i=1;i<=dynlen(deviceList);i++)
 {
 dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\"),
       aTexts = makeDynString(\"OK\", \"Too High\") ;
 dyn_float limits; 
 dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\"),
       aClasses = makeDynString(\"\", \"_fwErrorAck.\");
  string alertPanel; dyn_string alertPanelParameters; string alertHelp;
 
 deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
 
  
///Set  Alarm channel for Imon
string  channel= deviceList[i]+\".actual.temperature\";
 
  fwAlertConfig_deactivate(channel,exceptionInfo);  
  limits = makeDynFloat( 23,24 );
  //DebugN(channel);
 fwAlertConfig_set(channel,DPCONFIG_ALERT_NONBINARYSIGNAL ,alertTexts,limits, alertClasses,summary,alertPanel,alertPanelParameters,
             alertHelp,exceptionInfo);
             if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
 fwAlertConfig_activate(channel,exceptionInfo);
}
  
  
  
  
}

void SetAlarmDevice(){

float diff1,diff2,value;
dyn_string exceptionInfo,split,splitt,summary;
string channelName,channel;
dyn_string boolAlarms = makeDynString(\".actual.Trip\",\".actual.OvC\",\".actual.OvV\",
                   \".actual.UnV\",\".actual.UnC\",\".actual.overHvMax\");
dyn_string deviceList;//=dpAliases(\"*/HV/*\",\"*\");
dynAppend(deviceList,dpAliases(\"*/LV/*\",\"*\"));
dynAppend(deviceList,dpAliases(\"*/LBB_LV/*\",\"*\"));
for (int i=1;i<=dynlen(deviceList);i++)
 {
 dyn_string alertTexts = makeDynString( \"OK\", \"Warning\",\"Error\"),
       aTexts = makeDynString(\"OK\", \"Not OK\") ;
 dyn_float limits; 
 dyn_string alertClasses = makeDynString( \"\" ,\"_fwWarningAck.\", \"_fwErrorAck.\"),
       aClasses = makeDynString(\"\", \"_fwErrorAck.\");
  string alertPanel; dyn_string alertPanelParameters; string alertHelp;
 
 deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
 dpGet(deviceList[i]+\".settings.i0\", value);
 if(value != 0)
 {
 diff1=value*0.03;//primo limite al 5%
 diff2=value*0.05;//secondo limite al 10%
 
  
///Set  Alarm channel for Imon
 channel= deviceList[i]+\".actual.iMon\";
 
 dynAppend(summary,channel);
 fwAlertConfig_deactivate(channel,exceptionInfo);  
  limits = makeDynFloat( value-diff2,value-diff1 );
  DebugN(channel);
 fwAlertConfig_set(channel,DPCONFIG_ALERT_NONBINARYSIGNAL ,alertTexts,limits, alertClasses,summary,alertPanel,alertPanelParameters,
             alertHelp,exceptionInfo);
             if (fwConfigurationDB_handleErrors(exceptionInfo)) return;
 fwAlertConfig_activate(channel,exceptionInfo);
 }
 //Set Digital alarm for channel
 for(int j =1;j<=dynlen(boolAlarms);j++)
  {
  
  fwAlertConfig_deactivate(deviceList[i]+boolAlarms[j],exceptionInfo); 
  
  fwAlertConfig_set(deviceList[i]+boolAlarms[j], DPCONFIG_ALERT_BINARYSIGNAL, aTexts, 
      limits, aClasses, summary,  alertPanel, alertPanelParameters, alertHelp,  exceptionInfo);
  
  
    
    fwAlertConfig_activate(deviceList[i]+boolAlarms[j],exceptionInfo); 
    dynAppend(summary, deviceList[i]+boolAlarms[j]) ;            
    }
  
  fwAlertConfig_deactivate(deviceList[i]+\".\",exceptionInfo); 
  fwAlertConfig_set(deviceList[i]+\".\",DPCONFIG_SUM_ALERT , aTexts, 
      limits, aClasses, summary,  alertPanel, alertPanelParameters, alertHelp,  exceptionInfo); 
 //DebugN(deviceList[i],exceptionInfo,summary);
 fwAlertConfig_activate(deviceList[i]+\".\",exceptionInfo); 
 dynClear(summary);
  
              
 }
  AlarmTemp();
 DebugN(\"Set Alarm configuration\");
}
" 0
 E E E
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
0