/*************************************************
* Created by Giovanni Polese 
*	date:08/03/2007
*	LastChange:20/03/2013
        version: 3.0
        -New approach
        -the key FSMVersionDB needs to edited
        
*************************************************/
#uses "fwInstallationUtils.ctl"
#uses "fwRDBArchiving/fwRDBConfig.ctl"
#uses "CMS_RPCfwGeneral/CMS_RPCfwGeneral.ctl"
#uses "CMSfwAlertSystem/CMSfwAlertSystemUtil.ctl"
#uses "CMSfwAlertSystem/CMSfwAlertSystemGeneral.ctc"
#uses "CMSfw_CAENOPCConfigurator/CMSfw_CAENOPCConfiguratorLib.ctl"

const string componentName = "CMS_RPCfwHardwareEndcapUSC";
const string FSMVersion = "1.0";
const string standardRecipe = "RPCUSCEndcapGeneral_v1.0";


main()
{
 CMS_RPCfwGeneralInstallation_RPCDebug("null"); 
CMS_RPCfwGeneralInstallation_RPCDebug("START Installation");

  dyn_string exc;  
  if (! isFunctionDefined("fwInstallationUtils_loadConfigurations")) {
    DebugTN("Cannot run post install without fwInstallationUtils!!!");
    return;
  }


//Start Database Connection and recive hardware and Logical schema
fwFsmTree_stopTree();
CMS_RPCfwGeneralInstallation_RPCDebug("Importing Configuration...");
CMS_RPCfwGeneralInstallation_createUtilities();

// Start installing the hardware view
if(installHardwareView()<0) return; 

CMS_RPCfwGeneralInstallation_RPCDebug("Hardware Created. Installing FSM...");
bool reinstallFSM = CMS_RPCfwGeneralInstallation_getInstallationKey("FSMVersionInstalled");
if (reinstallFSM) installFSM();

CMS_RPCfwGeneralInstallation_RPCDebug("FSM Created. Installing Additional Components...");
installServices();


  DebugTN("Configuring OPC Server");
  CMSfw_CAENOPCConfigurator_configureFromFwCaenDps(exc);

CMS_RPCfwGeneralInstallation_RPCDebug("RPC Hardware component installed successfully.");
}


//FSM

void installFSM(){

 generateTreeforDevice();
       
 InsertBoards(); 
 InsertBcMaoCrate(); 
 fwFsmTree_generateAll();
 fwFsmTree_refreshTree();
             
}      



void installServices(){
  
  
    globalCurrent();
    setOPCServerStatus("RPCHV02CMS","HVE");
    setSMSAlert();      
    
   
    CMS_RPCfwGeneralInstallation_installProtectionHV();
    CMS_RPCfwGeneralInstallation_installProtectionHV("LHCCondition");

     
    CMS_RPCfwGeneralInstallation_RPCDebug("USC Component successfully installed");
   }

bool createHardwareTree() {

  dyn_string exInfo;
  fwInstallationUtils_loadConfigurations(componentName,exInfo);

  CMS_RPCfwGeneralInstallation_RPCDebug("Finished loading configurations ", exInfo);
  if (dynlen(exInfo)>0) return false;
  CMS_RPCfwGeneralInstallation_RPCDebug("Hardware Dps Imported");   
  return true;
}
int installHardwareView(){

  CMS_RPCfwGeneralInstallation_createOPCGroup(4);
  bool bRes = createHardwareTree();
  if (!bRes) {
    CMS_RPCfwGeneralInstallation_RPCDebug("**** PROBLEMS IN CREATING DATA POINTS. Stopping the postInstall for RPC Barrel HV");
    return -1;
  }

  //Apply recipe  
  
  dyn_string exceptionInfo,list;
  dyn_dyn_mixed recipeObject;
 	fwConfigurationDB_getRecipeFromDB("",list, fwDevice_LOGICAL,standardRecipe, recipeObject,exceptionInfo);
	  if (fwConfigurationDB_handleErrors(exceptionInfo)) {
         return -1;  
        }

	fwConfigurationDB_ApplyRecipe( recipeObject, fwDevice_LOGICAL,exceptionInfo); 
        if (fwConfigurationDB_handleErrors(exceptionInfo)) {
         return -1;  
          }
return 0;

}



void setOPCServerStatus(string caen,string subsys){
  
  
  dyn_string types;
  types = dpTypes("RPCUtils");
  if(dynlen(types)>0) {    
   if(!dpExists("caen"+subsys+"ServerStatus"))
    dpCreate("caen"+subsys+"ServerStatus","RPCUtils");
  }
  
  dyn_string obj = dpNames("*"+caen+"*","FwCaenCrateSY1527");
  string newDps;  
//  DebugN(obj);
  if(dynlen(obj)>0)
  {
  string dpe = obj+ ".Information.Sessions";
  newDps = "caen"+subsys+"ServerStatus.svalue";
  dyn_string exInfo;
  dyn_anytype conf;
  bool exist, isAct;
  fwPeriphAddress_get(dpe, exist, conf,isAct,exInfo);
  
  //DebugN(dpe, exist, conf[fwPeriphAddress_OPC_SERVER_NAME],conf[fwPeriphAddress_DRIVER_NUMBER],isAct,exInfo);
  
  string newItem = substr(conf[fwPeriphAddress_ROOT_NAME],0,(strpos(conf[fwPeriphAddress_ROOT_NAME],".")))+ ".ConnStatus";
  
  fwPeriphAddress_setOPC(newDps,conf[fwPeriphAddress_OPC_SERVER_NAME],
                         conf[fwPeriphAddress_DRIVER_NUMBER],newItem,
                         conf[fwPeriphAddress_OPC_GROUP_IN],
                         conf[fwPeriphAddress_DATATYPE],
                         conf[fwPeriphAddress_DIRECTION],
                         conf[fwPeriphAddress_OPC_SUBINDEX],exInfo);
  }else
    DebugN("Caen Mainframe not found");
 
  ///// Set db
string archiveClassName="RDB-99) EVENT"; //"ValueArchive_0000";//Archive's name
float timeInterval=3600; 
dyn_string exceptionInfo;

fwArchive_set(newDps, archiveClassName,DPATTR_ARCH_PROC_SIMPLESM,DPATTR_COMPARE_OLD_NEW,
					0.3, timeInterval,exceptionInfo);

/// store interlock
string interlock = obj + ".FrontPanInP.Interlock";
fwArchive_set(interlock, archiveClassName,DPATTR_ARCH_PROC_SIMPLESM,DPATTR_COMPARE_OLD_NEW,
					0.3, timeInterval,exceptionInfo);
   
    
}

void globalCurrent() 
{ 
  dyn_string types; 
  types = dpTypes("RpcGlobalValue"); 
  //DebugN(types); 
  if(dynlen(types)<1)
    CMS_RPCfwGeneralInstallation_CreateTypesGenCurrent(); 
   dyn_string Discs = makeDynString("EN3","EN2","EN1","EP3","EP2","EP1"); 

  
  dyn_string exceptionInfo; 

 for(int i = 1; i<=dynlen(Discs);i++) 
    { 
    if(!dpExists("globImon"+Discs[i])) 
      dpCreate("globImon"+Discs[i],"RpcGlobalValue"); 
      fwArchive_setMultiple("globImon"+Discs[i]+".averange" , "RDB-99) EVENT",DPATTR_ARCH_PROC_SIMPLESM,DPATTR_TIME_AND_VALUE_SMOOTH,

                             0.3,2000,exceptionInfo);   
      fwArchive_setMultiple("globImon"+Discs[i]+".total" , "RDB-99) EVENT",DPATTR_ARCH_PROC_SIMPLESM,DPATTR_TIME_AND_VALUE_SMOOTH,

                             3,2000,exceptionInfo);     
     
    } 
  DebugN("globImonEndcap dpt created"); 
   
  } 


void setSMSAlert()
{
  dyn_string exInfo;
   CMS_RPCfwGeneralInstallation_smsAlertConfigsmsAlertConfig("RPCUSCE_BoardTemp","polese",3,exInfo);

   CMS_RPCfwGeneralInstallation_smsAlertConfigsmsAlertConfig("RPCUSCE_BoardTemp","rpcbarre",1,exInfo);
  
   configSmsAlarmBoard("RPCUSCE_BoardTemp");
  
  //Syscheck alarm
  CMS_RPCfwGeneralInstallation_smsAlertConfigsmsAlertConfig("RPCUSCE_SysCheck","polese",3,exInfo);

  CMS_RPCfwGeneralInstallation_smsAlertConfigsmsAlertConfig("RPCUSCE_SysCheck","rpcbarre",1,exInfo);

  configSmsRPCSysCheck("RPCUSCE_SysCheck");
  CMS_RPCfwGeneralInstallation_RPCDebug("SMS Configuration done.");
  
  }


void configSmsRPCSysCheck(string notifType){

  dyn_string exInfo,dp = dpNames("*Check*","RPCUtils");
  if(dynlen(dp)>0){
CMSfwAlertSystemUtil_addAlertToNotification(notifType,dp[1]+".fvalue") ;

fwAlertConfig_activate("CMSAlertSystem/SumAlerts/" + notifType+".Notification",exInfo);
}
  }
void configSmsAlarmBoard(string notifType){

  dyn_string deviceList,chs,exInfo;
  dynAppend(deviceList,dpAliases("*/Boards/*","*"));
for(int i =1 ;i<=dynlen(deviceList);i++)
  {
  if(strpos(deviceList[i],"MAO")<0)
  {
  dynAppend(chs,fwDU_getPhysicalName(deviceList[i])+".Temp.Temp1");
  }
  
  }
dynClear(deviceList);
dynAppend(deviceList,dpAliases("*/MAO/*","*"));
//DebugN(deviceList);
for(int i = 1;i<=dynlen(deviceList);i++)
{
   
 deviceList[i]=fwDU_getPhysicalName(deviceList[i]);
 if(strpos(deviceList[i],"wNode")<0)
 {
 dynAppend(chs,fwDU_getPhysicalName(deviceList[i])+".actual.temp");
  }
}

for(int i=1;i<=dynlen(chs);i++)
{
  
CMSfwAlertSystemUtil_addAlertToNotification(notifType,chs[i]) ;
}
fwAlertConfig_activate("CMSAlertSystem/SumAlerts/" + notifType+".Notification",exInfo);
 
}

 
void InsertBoards()
{
  int pos,pos1;
string names;
  //Add Boards
dyn_string exInfo;
dyn_string deviceList=dpAliases("*USEndcap/Boards/*","*");
DebugN(deviceList);
for(int i=1;i<=dynlen(deviceList);i++)
    {
        fwFsmTree_addNode("RPC_E_Bd_USC",deviceList[i],"FwCaenBoardEasy", 0);        
    }  
DebugN("BOARDS ready");

}

void InsertBcMaoCrate()
{
  //Add BC
 int pos,pos1;
string names;
dyn_string exInfo;
dyn_string deviceList=dpAliases("*USEndcap/BCs/*","*");
DebugN(deviceList);
for(int i=1;i<=dynlen(deviceList);i++)
 {
 fwFsmTree_addNode("RPC_E_BCs_USC",deviceList[i] ,"FwCaenBoardSY1527A1676", 0);
 }
DebugN("BC ready");
/////////////////////////////////////////////////////////////////////
dyn_string deviceList=dpAliases("*USEndcap/MAO/*","*");
//  DebugN(deviceList);
int i=1;
  fwFsmTree_addNode("RPC_E_MAO_USC",deviceList[i] ,"FwCaenChannelMAO", 0);
int  i=2;
  fwFsmTree_addNode("RPC_E_MAO_USC",deviceList[i] ,"FwCaenChannelMAO", 0);  
  
/////////////////////////////////////////////////////////////////////
dyn_string deviceList1=dpAliases("*USEndcap/Crates/*","*");
DebugN(deviceList1);
for(int i=1;i<=dynlen(deviceList1);i++)
 {
 fwFsmTree_addNode("RPC_E_Crates_USC",deviceList1[i] ,"FwCaenCrateSY1527Basic", 0);
 }
DebugN("crate ready");
}
 
 

generateTreeforDevice()
{
dyn_string nodes, exInfo;
string top_node;

dyn_string discs=makeDynString("_EP1","_EP2","_EP3","_EN1","_EN2","_EN3");
 
 
fwTree_getRootNodes(nodes,exInfo);
//DebugN(nodes, exInfo);
if(fwFsmTree_isNode("RPC_ENDCAP_HWUSC"))
    fwFsmTree_removeNode("FSM","RPC_ENDCAP_HWUSC");
top_node=fwFsmTree_addNode("FSM","RPC_ENDCAP_HWUSC","RPC_TopHwDevice",1);
  

if(!fwFsmTree_isNode("RPC_E_Bd_USC"))
top_node=fwFsmTree_addNode("RPC_ENDCAP_HWUSC","RPC_E_Bd_USC","RPC_Boards",0);
if(!fwFsmTree_isNode("RPC_E_BCs_USC"))
top_node=fwFsmTree_addNode("RPC_ENDCAP_HWUSC","RPC_E_BCs_USC","RPC_BC",0);
if(!fwFsmTree_isNode("RPC_E_MAO_USC"))
top_node=fwFsmTree_addNode("RPC_ENDCAP_HWUSC","RPC_E_MAO_USC","RPC_MAO",0);
if(!fwFsmTree_isNode("RPC_E_Crates_USC"))
top_node=fwFsmTree_addNode("RPC_ENDCAP_HWUSC","RPC_E_Crates_USC","RPC_SY1527",0);


for(int i=1; i<=dynlen(discs);i++)
 {
   if(!fwFsmTree_isNode("RPC_USC"+discs[i]))
    top_node=fwFsmTree_addNode("RPC_ENDCAP_HWUSC","RPC_USC"+discs[i],"RPC_Device",1);
    fwFsmTree_setNodeVisibility("RPC_USC"+discs[i],0);   
  }
DebugN("Structure ready");
 
}

int getIdentifier(string name,string identifier,int nchar, string &disk){
  
  string ret = "";
  disk = "";
  int len = strlen(identifier);
  if(name=="") return -1;
  int pos = strpos(name,identifier);
  if(pos>-1) ret = substr(name,pos+len,nchar);
      
if(ret=="") return -1;  
disk = ret; 
return pos+len+nchar;  
}

void InsertHV(){
dyn_string deviceList=dpAliases("*USEndcap/HV/*","*");
string node;
int res;
for(int i = 1;i<=dynlen(deviceList);i++){

  string disk,ch1,ch2,r1,r2;
 
  res = getIdentifier(deviceList[i],"PC_E",2,disk) ;
  if(res<0){
    DebugN("Problem parsing "+deviceList[i]+"for flag PC_E, skipping...");
    continue;
    }
  string newstring = substr(deviceList[i],res);
  
  newstring = substr(deviceList[i],res);
  
  res = getIdentifier(newstring,"_R",1,r1); 
  if(res<0){
    DebugN("Problem parsing "+deviceList[i]+"for flag _R, skipping...");
    continue;
    }
  newstring = substr(newstring,res);
  res = getIdentifier(newstring,"_R",1,r2); 
  if(res>0)
    newstring = substr(newstring,res);

  res = getIdentifier(newstring,"_C",2,ch1); 
  if(res<0){
     DebugN("Problem parsing "+deviceList[i]+"for flag _C, skipping...");
    continue;
    }
   newstring = substr(newstring,res);

  res = getIdentifier(newstring,"_C",2,ch2); 
  
  string fsm2add = "RPC_E"+disk+"_R"+r1+"_C"+ch1;
  if(!fwFsmTree_isNode(fsm2add)){
  top_node=fwFsmTree_addNode("RPC_USC_E"+disk,fsm2add,"RPC_HV",0);//Adding node and then device
  top_node=fwFsmTree_addNode(fsm2add,deviceList[i],"FwCaenChannelHV",0);  
  }
  if(r2==""){
    fsm2add = "RPC_E"+disk+"_R"+r1+"_C"+ch2;   
   top_node=fwFsmTree_addNode("RPC_USC_E"+disk,fsm2add,"RPC_HV",0);//Adding node and then device
   top_node=fwFsmTree_addNode(fsm2add,"RPC_USC_E"+disk+"::"+deviceList[i],"FwCaenChannelHV",0);  
  }
  else{
    fsm2add = "RPC_E"+disk+"_R"+r2+"_C"+ch1;
   top_node=fwFsmTree_addNode("RPC_USC_E"+disk+"_R"+r1,fsm2add,"RPC_HV",0);//Adding node and then device
    top_node=fwFsmTree_addNode(fsm2add,"RPC_USC_E"+disk+"::"+deviceList[i],"FwCaenChannelHV",0);  
  }


}

DebugN("HV FSM ready");

     
}
