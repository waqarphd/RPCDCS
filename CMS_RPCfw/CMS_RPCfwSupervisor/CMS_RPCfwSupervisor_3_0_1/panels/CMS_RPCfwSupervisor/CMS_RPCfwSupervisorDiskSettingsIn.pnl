V 11
1
LANG:1 11 DiskSummary
PANEL,-1 -1 823 480 N "_3DFace" 4
"$2"
"$chs"
"$name"
"$wheel"
"main()
{
  dyn_string exceptionInfo;

  fwAccessControl_setupPanel( \"ApplyPanelAccessControl\", exceptionInfo);
}" 0
 E E E E 1 -1 -1 0  30 380
""0  1
E "dyn_string channelName,channels,listOfSettingsDpElement,value,
					 split,statusLevel;
string channelAddress, sys;
//dyn_string split;
 

getChannelsName(dyn_string logicName,dyn_string &channels)
{
 for (int i=1;i<=dynlen(logicName);i++)
	{
	channels[i] = fwDU_getPhysicalName(logicName[i]);
	}

}

waitForPanel()
{
	int i;
}
DisableAllInPanel()
{
Button2.enabled = FALSE;

 }
enableControl(){
  Button2.enabled = false;

   }
enableDebug(){
Button2.enabled = TRUE;
 
  }
void ApplyPanelAccessControl(string s1, string s2) // s1 and s2 are not //used
{
bool hasDebug, hasControl;
dyn_string exceptionInfo;
// revoke all previous rights:
DisableAllInPanel(); //here you can call a function that disables //all buttons in the panel
// check privileges:
fwAccessControl_isGranted( \"CMS_RPC:Control\", hasControl, exceptionInfo); //this function checks if the user logged in has the //priviledge passed as first parameter
fwAccessControl_isGranted( \"CMS_RPC:Debug\", hasDebug, exceptionInfo); //this function checks if the user logged in has the //priviledge passed as first parameter
if (dynlen(exceptionInfo)) { fwExceptionHandling_display(exceptionInfo); return;}
// enable/disable panel functionality:
//hasDebug = 1;
if (hasControl) enableControl();
if (hasDebug) enableDebug();
}
" 0
 2
"CBRef" "1"
"EClose" E
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 6 Layer1
2 5
"l"
""
1 138 428 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
4 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
"main()
{
    dyn_string exceptionInfo;
//This function creates a callback to the function passed as //first parameter every time the user logged in changes
if(ACCESS_DCS)
  fwAccessControl_setupPanel( \"ApplyPanelAccessControl\", exceptionInfo);

}" 0
 E 0 1 1 0 1 E U  0 E 140 430 272 446
0 2 0 "0s" 0 0 0 64 0 0  140 430 1
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0 1
LANG:1 20 Last Channel Changed
2 9
"Text1"
""
1 531 421 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
8 0 0 0 0 0
E E E
0
1
LANG:1 0 

1
"dashclr"N "_Transparent"
E E 0 1 1 0 1 E U  0 E 533 423 544 440
0 2 0 "0s" 0 0 0 192 0 0  533 423 1
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0 1
LANG:1 2 at
25 1
"TabSum"
""
1 20 20 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  18 18 808 392
"main()
{
	dyn_string channelsHV,splitChannels,alias,type;
	string channel,statusCond,model;
	shape table=getShape(\"TabSum\");
	int num=1;
	int hv=1,nicha,nvcha;
	bool flag = TRUE; 
	while(!isFunctionDefined(\"waitForPanel\"))//Serve per ritardare la partenza del inizialize
		delay(0,100);//dopo le procedure del general
	  channel=$chs; 
	string wName = $wheel;
        split=strsplit(channel, \" |\");
        dynUnique(split);
//	DebugN(\"sa\",channel);												
	table.deleteAllLines;
	//DebugN(\"type===\", type,\"wheel====\",wName, \"dynlen(split)\",dynlen(split));
	for(int i=1; i<=dynlen(split); i++)/* ciclo che identifica ogni singl canale*/
	{	
		if(split[i] != \"\")
			{
			
			 channelAddress = channelAddress + split[i] + \"|\";/*variabile per generare tutti gli address*/
			

			alias[i] = dpSubStr(split[i],DPSUB_SYS_DP);	
//DebugN(\"alias\", alias);	
                   			alias[i] = dpGetAlias(alias[i]+\".\");
	//DebugN(\"split=\",split,\"channel=\",channel, \" channelAddress\", channelAddress,\"alias222\", alias);			
			if(flag)
			{
			type = strsplit(alias[i],\"/\");
                  //	DebugN(\"type111===\", type);
                          if(type[2][0]== \"H\")
                   
				{
				nicha = 4;
				nvcha = 4;
				table.columnHeader(4,\"iMon (uA)\");
				}
			else
				{
				nvcha = 4;
				nicha = 4;
				table.columnHeader(4,\"iMon (A)\");
				}
				
			flag = FALSE;
			}
			
					
			listOfSettingsDpElement = makeDynString ( split[i] ,
 								split[i] + \".settings.onOff\",
 								split[i] + \".actual.vMon\",
 								split[i] + \".actual.iMon\",
 								split[i] + \".readBackSettings.v0\",
 								split[i] + \".readBackSettings.i0\",
								split[i] + \".actual.isOn\");
																			
				
				
				for(int j=1; j<=dynlen(listOfSettingsDpElement); j++)
					{
					
					dpGet(listOfSettingsDpElement[j], value[j]);
					
								
					dpConnect(\"refresh\", TRUE, listOfSettingsDpElement[j]);
					}
				
 				if(value[7] == \"FALSE\")
 					value[7] = \"OFF\";
 				else
 					value[7] = \"ON\";
 				//Format output for vMon and Imon	 				
 				int pos=strpos(value[3],\".\");
				if(pos>-1)
					value[3] = substr(value[3],0,(pos+nvcha));
		
				pos=strpos(value[4],\".\");
				if(pos>-1)
					value[4] = substr(value[4],0,(pos+nicha));
                                pos=strpos(value[5],\".\");
				if(pos>-1)
					value[5] = substr(value[5],0,(pos+3));	
				int valueInt;
				
				dpGet(split[i] + \".actual.status\",valueInt);
				if(getBit(valueInt,8)||getBit(valueInt,9))
					{
					statusCond=\"TRIPPED\";
					}
				else if(getBit(valueInt,3)||getBit(valueInt,4)||getBit(valueInt,5)||getBit(valueInt,12))
					{
					statusCond=\"Warning\";
					}
				else if(getBit(valueInt,1))
					{
					statusCond=\"Ramping Up\";
					}
				else if(getBit(valueInt,2))
					{
					statusCond=\"Ramping Down\";
					}
				else if(valueInt==0||valueInt==1)
					{
					statusCond=\"OK\";
					}
				else
					statusCond=\"ERROR\";
				
 			
 				
			
					
				dpConnect(\"refreshStatus\", TRUE, split[i] + \".actual.status\");	
 					
 				
 					
 				if(value[2] == \"FALSE\")
 					value[2] = \"OK\";
 				
 				dyn_string splitAlias=strsplit(alias[i], \"/\");
 				//DebugN(\"sas\",splitAlias);		
 				setValue(table,\"appendLine\",\"num\",num,\"Name\", splitAlias[3], \"status\" , statusCond, \"vMon\" ,  value[3], \"iMon\" , value[4],
 							\"v0\", value[5], \"i0\", value[6], \"switch\", value[7], \"details\", \"  ...\");	
 				
                //DebugN(value[7],statusCond);                
                if(value[7]==\"ON\" && statusCond ==\"OK\")
			{
			table.cellBackColRC(num-1,\"switch\") = \"FwStateOKPhysics\";
			table.cellBackColRC(num-1,\"status\") = \"FwStateOKPhysics\";
			}
		else if (value[7]==\"OFF\" && statusCond ==\"OK\")
			{
			table.cellBackColRC(num-1,\"switch\") = \"FwStateOKNotPhysics\";
			table.cellBackColRC(num-1,\"status\") = \"FwStateOKPhysics\";
			}
		else if (statusCond ==\"ERROR\")
			{
			table.cellBackColRC(num-1,\"switch\") = \"FwStateOKNotPhysics\";
			table.cellBackColRC(num-1,\"status\") = \"FwStateAttention3\";
			}
                else if (statusCond ==\"Ramping Up\" || statusCond==\"Ramping Down\")
			{
			table.cellBackColRC(num-1,\"switch\") = \"FwStateOKPhysics\";
			table.cellBackColRC(num-1,\"status\") = \"FwStateAttention1\";
			}
 			
                
                num++;
                	
 			}
 		
 		}
	this.tableMode(TABLE_SELECT_NOTHING);
	this.selectByClick(TABLE_SELECT_NOTHING);
	
	dynClear(split);
}



refresh(string dpe, string val)
{
	
	int cellPos,pos;
	shape table=getShape(\"TabSum\");
	string color;
	string channelName = dpSubStr(dpe, DPSUB_SYS_DP_EL);
	string channelName1 = dpSubStr(dpe, DPSUB_SYS_DP);
	
	dyn_string splitt = strsplit(channelAddress, \"|\");
	
	cellPos = dynContains(splitt, channelName1);
	dyn_string splitChannelName=strsplit(channelName, \".\");
	
	
	switch (splitChannelName[3])
		{
		case \"vMon\":
				pos=strpos(val,\".\");
				if(pos>-1)
					val = substr(val,0,(pos+2));
			//DebugN(\"vMon\"); 
				table.cellValueRC(cellPos -1,\"vMon\",val);
				break;
			
		case \"iMon\":
				pos=strpos(val,\".\");
				if(pos>-1)
					val = substr(val,0,(pos+2));
				//DebugN(\"iMon: \",val);
				table.cellValueRC(cellPos -1,\"iMon\",val);
				break;
				
		case \"v0\":
				
                                pos=strpos(val,\".\");
				if(pos>-1)
					val = substr(val,0,(pos+2));
				table.cellValueRC(cellPos -1,\"v0\",val);
				break;
		
		case \"i0\":
				//DebugN(\"iMon\");
				table.cellValueRC(cellPos -1,\"i0\",val);
				
				break;
				
		case \"isOn\":
				//DebugN(\"val\",val);
				if(val == \"FALSE\")
                                  {  
 					val = \"OFF\";
                                        color = \"FwStateOKNotPhysics\";
                                      }
 				else
                                  {
                                  val = \"ON\";
                                  color = \"FwStateOKPhysics\";
                                }
 					
				table.cellValueRC(cellPos -1,\"switch\",val);
				table.cellBackColRC(cellPos-1,\"switch\",color);
				break;
		}	
}



refreshStatus(string dpe, int value)

{
	
	bool flagS ;
	int x;
	string val1;
	shape table=getShape(\"TabSum\");
	dyn_string statusCondRef;
	
	
	string channelName = dpSubStr(dpe, DPSUB_SYS_DP_EL);
	string channelName1 = dpSubStr(dpe, DPSUB_SYS_DP);
	
	dyn_string splitt = strsplit(channelAddress, \"|\");
	dyn_string splitChannelName2=strsplit(channelName, \".\");
	
	x = dynContains(splitt, channelName1);
	
			
 			if(getBit(value,8)||getBit(value,9))
							{
							this.cellValueRC(x-1,\"status\",\"TRIPPED\");
							this.cellBackColRC(x-1,\"status\",\"FwStateAttention3\");
                                                        }
					else if(getBit(value,3)||getBit(value,4)||getBit(value,5)||getBit(value,12))
							{
							this.cellValueRC(x-1,\"status\",\"Warning\");
							this.cellBackColRC(x-1,\"status\",\"FwStateAttention2\");
                                                        }
					else if(getBit(value,1))
							{
							this.cellValueRC(x-1,\"status\",\"Ramping Up\");
							this.cellBackColRC(x-1,\"status\",\"FwStateAttention1\");
                                                        }
					else if(getBit(value,2))
							{
							this.cellValueRC(x-1,\"status\",\"Ramping Down\");
							this.cellBackColRC(x-1,\"status\",\"FwStateAttention1\");
                                                        }
					else if(value==0||value==1)
							{
							this.cellValueRC(x-1,\"status\",\"OK\");
                                                        this.cellBackColRC(x-1,\"status\",\"FwStateOKPhysics\");
							}
					else
                                        					{		
                                          this.cellValueRC(x-1,\"status\",\"ERROR\");
                                        	this.cellBackColRC(x-1,\"status\",\"FwStateAttention3\");							
                                          }
 
} " 0
"
main(int xpos,string columnName,string value)
{
	int i,len,lenRb, row, col,nN;
	bit32      status;
	string elementName,xx;
	dyn_string listOfElement,splat,splat1,split_Rb;
	dyn_int selectedLine;
	shape table = getShape(\"TabSum\");
	len =1;
	lenRb =1;
	splat=strsplit($chs, \" | \");
//	splat=strsplit($2, \" | \");
	//DebugN(\"splat===============\",splat);
	
	for(int i=1;i<=dynlen(splat);i++)
		{
		if(splat[i]!=\"\")
			{
			splat1[len]=splat[i];
			len++;
			}
		}
		
	
	
	getValue(table, \"currentCell\", row, col);
	
	string channelSelect = splat1[row + 1];
	if (columnName == \"details\")
	{
		ChildPanelOn(\"CMS_RPCfwSupervisor//CMS_RPCfwSupervisorDetailPanel.pnl\",
							\"Details\",
							makeDynString(\"$channel:\" + channelSelect,\"$row:\" + row),-100,-100);
						  					
	}
	
}" 0
 1 0 1 9 1 "num" 2 1 0 "s" 1
LANG:1 3 Num
E
1
LANG:1 0 

40 "Name" 22 1 0 "s" 1
LANG:1 7 Channel
E
1
LANG:1 0 

250 "status" 10 1 0 "s" 1
LANG:1 6 Status
E
1
LANG:1 0 

128 "vMon" 4 1 0 "s" 1
LANG:1 4 VMon
E
1
LANG:1 0 

60 "iMon" 5 1 0 "s" 1
LANG:1 4 IMon
E
1
LANG:1 0 

70 "v0" 4 1 0 "s" 1
LANG:1 2 v0
E
1
LANG:1 0 

60 "i0" 4 1 0 "s" 1
LANG:1 2 i0
E
1
LANG:1 0 

60 "switch" 4 1 0 "s" 1
LANG:1 6 On/Off
E
1
LANG:1 0 

60 "details" 4 1 0 "s" 1
LANG:1 7 Details
E
1
LANG:1 0 

60 
26 26 "" 1 1
LANG:1 2 #1
8 30
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0 0 1 1 1 7
1 0
13 2
"Button1"
""
1 722 416 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  720 414 814 448

T 
1
LANG:1 5 Close
"// SimpleCtrlScriptStart {valid}
main()
{
  EP_panelOff();
}

EP_panelOff()
{
  PanelOff();
}

// SimpleCtrlScript {EP_panelOff}
// Function {PanelOff}
// Panel {}
// Module {}
// SimpleCtrlScriptEnd {EP_panelOff}
" 0
 E E E
13 3
"Button2"
""
1 30 420 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  28 418 134 452

T 
1
LANG:1 15 Global Settings
"// SimpleCtrlScriptStart {invalid}
main()
{
  //DebugN(\"OOOOOOOOOOOO\",$wheel);
  
  EP_childPanelOn();
}

EP_childPanelOn()
{
 // DebugN(\"$name : \", $name);
  string panel;
  if($name == \"HV\")
    panel = \"CMS_RPCfwSupervisor//CMS_RPCfwSupervisorGlobalSettingsfordisk.pnl\";
  else
    panel = \"CMS_RPCfwSupervisor//CMS_RPCfwSupervisorGlobalSettingsLVfordisk.pnl\";
  
  ChildPanelOnCentral(panel,
      \"Global Settings for Disk \",
      makeDynString(\"$2:\" + $2,\"$name:\"+$name,\"$wheel:\"+$wheel, \"$chs:\"+$chs));
}
" 0
 E E "main()
{
    dyn_string exceptionInfo;
   //if($name != \"HV\")
     //this.visible= false;
}" 0

14 4
"timeMax"
""
1 548 419 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
3 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  546 417 708 444
3 "0s" 0 0 0 0 0 -1  E "main()
{
	string channel=$chs;	
	dyn_string listOfSettingsDpEl,splot;
	dyn_time timeStamp;
	dyn_dyn_time xx;
	float max;
	
	
	while(!isFunctionDefined(\"waitForPanel\"))//Serve per ritardare la partenza del inizialize
		delay(0,100);//dopo le procedure del general
	
	for(int i=1; i<=dynlen(split); i++)
		{	
		if(split[i] != \"\")
			{
			dynAppend (splot, split[i]);
			//DebugN(splot);
			}
		}
	
	
	
	for(int i=1; i<=dynlen(splot); i++)
		{	
			listOfSettingsDpEl = makeDynString ( splot[i] + \".actual.vMon\",
 																					splot[i] + \".actual.iMon\",
 																					splot[i] + \".settings.v0\",
 																					splot[i] + \".settings.i0\",
																					splot[i] + \".actual.isOn\",
																					splot[i] + \".actual.Trip\",
 																					splot[i] + \".actual.OvC\",
 																					splot[i] + \".actual.OvV\",
 																					splot[i] + \".actual.UnV\");	
			
 			for (int j=1;j<=dynlen(listOfSettingsDpEl);j++)
 				{																		
 			
  			/*if(dpConnect(\"work\", listOfSettingsDpEl[j] + \":_online.._stime\") == -1)
  				{
     			this.backCol = \"_dpdoesnotexist\";
     			this.foreCol = \"_dpdoesnotexist\";
  				}*/
  			dpGet(listOfSettingsDpEl[j] + \":_online.._stime\",timeStamp[j]);
  			}
				xx[i]=timeStamp;
				
			
		}
		
		dyn_string newchannel =strsplit(channel, \"|\");
		//DebugN(\"questo\",xx,newchannel);
		findMax(xx,newchannel,max);
		delay(0,100);
		for(int i=1; i<=dynlen(split); i++)
		{	
		if(split[i] != \"\")
			{
			listOfSettingsDpEl = makeDynString ( split[i] + \".actual.vMon\",
 																					split[i] + \".actual.iMon\",
 																					split[i] + \".settings.v0\",
 																					split[i] + \".settings.i0\",
																					split[i] + \".actual.isOn\",
																					split[i] + \".actual.Trip\",
 																					split[i] + \".actual.OvC\",
 																					split[i] + \".actual.OvV\",
 																					split[i] + \".actual.UnV\");	
			for (int j=1;j<=dynlen(listOfSettingsDpEl);j++)
 				{
 				dpConnect(\"refreshTime\",listOfSettingsDpEl[j] + \":_online.._stime\");
 				}	
 			}
		}
	}

findMax(dyn_dyn_time matrix,dyn_string newchannel,time & max)
{
	dyn_time splittime;
	dyn_int position; 
	max = 0;
	
	for(int i=1;i<=dynlen(matrix);i++)
		{
		if(matrix[i] != \"\")
			{
			for(int j=1; j<=dynlen(matrix[i]); j++)
				{
				
				if (matrix[i][j]>=max)
					{
					max = matrix[i][j];
					position[1] = i;
					position[2] = j;
					}
				
				}
			}
		}
		if(dynlen(position)>1)
                  {
                int t = position[1];
		//DebugN(\"QQ\",newchannel[t]);
		 
		this.text=max ;
		channelname.text=newchannel[t];
                  }
                else
                   channelname.text = \"No channels founded\";
	
}
refreshTime(string dpe,time val)
{
shape timemax = getShape(\"timeMax\");
time getMax = timemax.text;

if(val >= getMax)
	{
	this.text = val;
	channelname.text= dpSubStr(dpe,DPSUB_DP);
	//DebugN(\"MMM\",getMax,dpe,val);
	}
}
" 0
 E
14 8
"channelname"
""
1 280 420 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:1 0 

0
1
LANG:1 26 Arial,-1,13,5,40,0,0,0,0,0
0  278 418 532 445
3 "0s" 0 0 0 0 0 -1  E "main()
{
	
}" 0
 E
0
LAYER, 1 
1
LANG:1 6 Layer2
0
LAYER, 2 
1
LANG:1 6 Layer3
0
LAYER, 3 
1
LANG:1 6 Layer4
0
LAYER, 4 
1
LANG:1 6 Layer5
0
LAYER, 5 
1
LANG:1 6 Layer6
0
LAYER, 6 
1
LANG:1 6 Layer7
0
LAYER, 7 
1
LANG:1 6 Layer8
0
0
