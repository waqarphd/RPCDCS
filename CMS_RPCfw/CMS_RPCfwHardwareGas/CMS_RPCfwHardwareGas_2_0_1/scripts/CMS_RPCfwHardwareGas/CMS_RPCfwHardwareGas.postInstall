/**********************************************
  Postinstall file v2.0
  last update: 20.4.2013
  New version
  
  
***********************************************/  
#uses "fwDIP/fwDIP.ctl"
#uses "fwInstallationUtils.ctl"

const string setupname = "RPCConfig";
const string configurationName = "RPCGasSystem_AllIn_V1.0";  
const string RPCDIP_CONFIG_DP = "DIPConfig_RPC";
const string component_Name = "CMS_RPCfwHardwareGas";


//_____________________________________________________________________________
main()
{
  dyn_string exc;  
  if (! isFunctionDefined("fwInstallationUtils_loadConfigurations")) 
  {
    DebugTN("Cannot run post install without fwInstallationUtils!!!");
    return;
  }
  datatypecreation();
  dyn_string exceptionInfo;
  RPCDIP_createConfigDp(); 
  fwInstallationUtils_loadConfigurations(component_Name,exceptionInfo);
  //fwInstallationUtils_loadConfigurationDbHardware(configurationName, exceptionInfo,setupname);  

  fsmAdd();
  fwInstallationUtils_appendManagers(component_Name,exceptionInfo);
}


//_____________________________________________________________________________
int 
datatypecreation()
{
  dyn_string searchtypes = dpTypes("RPCGasChannel");
  if(dynlen(searchtypes)<1)
  {
    dyn_dyn_string nametypes;
    nametypes[1]= makeDynString("RPCGasChannel", "");
    nametypes[2]= makeDynString("", "flowIn");
    nametypes[3]= makeDynString("", "flowOut");
    nametypes[4]= makeDynString("", "difference");
  
    dyn_dyn_int xtypes;
    xtypes[1]= makeDynInt(1);
    xtypes[2]= makeDynInt(0, DPEL_FLOAT);
    xtypes[3]= makeDynInt(0, DPEL_FLOAT);
    xtypes[4]= makeDynInt(0, DPEL_INT);
  
    int var = dpTypeCreate(nametypes, xtypes);
  }
  
  dyn_string searchgasparameter = dpTypes("RPCGasParameters");
  if(dynlen(searchgasparameter)<1)
  {
    dyn_dyn_string nametypes1;
    nametypes1[1]= makeDynString("RPCGasParameters", "");
    nametypes1[2]= makeDynString("", "value");
    
    dyn_dyn_int xtypes1;
    xtypes1[1]= makeDynInt(1);
    xtypes1[2]= makeDynInt(0, DPEL_FLOAT);
    
    int var1 = dpTypeCreate(nametypes1, xtypes1);
  }
  
  dyn_string searchgasparameterstatus = dpTypes("RPCGasParameterStatus");
  if(dynlen(searchgasparameterstatus)<1)
  {
    dyn_dyn_string nametypes1;
    nametypes1[1]= makeDynString("RPCGasParameterStatus", "");
    nametypes1[2]= makeDynString("", "state");
    
    dyn_dyn_int xtypes1;
    xtypes1[1]= makeDynInt(1);
    xtypes1[2]= makeDynInt(0, DPEL_INT);
    
    int var1 = dpTypeCreate(nametypes1, xtypes1);
  }  
  
  dyn_string searchgasstatus = dpTypes("RPCGasStatus");
  if(dynlen(searchgasstatus)<1)
  {
    dyn_dyn_string nametypes2;
    nametypes2[1]= makeDynString("RPCGasStatus", "");
    nametypes2[2]= makeDynString("", "status");
    nametypes2[3]= makeDynString("", "error");
    nametypes2[4]= makeDynString("", "warning");
    nametypes2[5]= makeDynString("", "unacknowledge");
    
    dyn_dyn_int xtypes2;
    xtypes2[1]= makeDynInt(1);
    xtypes2[2]= makeDynInt(0, DPEL_INT);
    xtypes2[3]= makeDynInt(0, DPEL_INT);
    xtypes2[4]= makeDynInt(0, DPEL_INT);
    xtypes2[5]= makeDynInt(0, DPEL_INT);
    
    int var2 = dpTypeCreate(nametypes2, xtypes2);
  
    DebugN("Data Types created");
  }
  else
  { 
    DebugN("Data Types already exist");
  }
}


//_____________________________________________________________________________
string 
RPCGasGetSysName()
{
  dyn_string systemNumber;
  
  fwInstallation_getApplicationSystem("CMS_RPCfwHardwareGas",systemNumber);
  if(dynlen(systemNumber)==1)
  {
    return systemNumber[1];
  }
  else
  {
    return getSystemName();
    DebugN("Gas Component not found");
  }  
}


//_____________________________________________________________________________
void 
fsmAdd()
{
  // if top node exist, detete it
  if(fwFsmTree_isNode("RPC_GAS_TOP"))
  {
    fwFsmTree_removeNode("FSM", "RPC_GAS_TOP", 1);
  }
  fwFsmTree_addNode("FSM", "RPC_GAS_TOP", "RPC_TOPGAS", 1);
  fwFsmTree_setNodeLabel("RPC_GAS_TOP","RPC Gas System");
  dyn_string children = makeDynString("Barrel", "Endcap", "Infrastructure");
  for(int i=1; i<=dynlen(children); i++)
  {
    fwFsmTree_addNode("RPC_GAS_TOP",RPCGasGetSysName()+children[i],"RPCGasStatusNode",0); 
  }
  linkGGM();
  fwFsmTree_generateAll();                                     
  fwFsmTree_refreshTree();  
}


//_____________________________________________________________________________
void 
linkGGM()
{
  dyn_string sysnum,exInfo;
  fwInstallation_getApplicationSystem("CMS_RPCfwGGM",sysnum);
  if(dynlen(sysnum)>0)
  { 
    dyn_string chldren;
    fwTree_getChildren(sysnum[1]+"FSM",chldren,exInfo);
   
    if(dynlen(chldren)==1)
    {
      fwFsmTree_importType("RPC_GGMDevice",strrtrim(sysnum[1],":"));
      fwFsmTree_addNode("RPC_GAS_TOP",sysnum[1]+chldren[1],"RPC_GGMDevice",1);
    }     
  }
  else
  {
    Debug("Gas Link not found");
  }
}


//_____________________________________________________________________________
void 
RPCDIP_createConfigDp() 
{
  string configDp = RPCDIP_CONFIG_DP;
  if (! dpExists(configDp) ) 
  {
    DebugN("RPCDIP: creating " + configDp);      
    dpCreate(configDp, "_FwDipConfig");
  }
  DebugN("RPCDIP: Setting DIP manager configuration");

  dpSet(configDp + ".publishName",getHostname()+"_"+rand());
  dpSet(configDp + ".queryTimeout",15);
}
